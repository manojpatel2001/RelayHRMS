@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Employee Panel";
    Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
    string UIBaseUrl = Configuration["UIBaseUrlSettings:baseUrl"];
    var uri = new Uri(baseUrl);
    string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
}

<!-- CSS -->

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<style>
    :root {
        --primary-color: #3e4b6d;
        --primary-hover: #2c3a57;
        --text-light: white;
        --bg-overlay: rgba(255, 255, 255, 0.6);
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    /* Buttons */
    .btn-custom {
        background-color: var(--primary-color);
        color: var(--text-light);
        font-weight: 600;
        padding: 8px 16px;
        border: none;
        border-radius: 6px;
        transition: all 0.3s ease;
        font-size: 14px;
    }

        .btn-custom:hover {
            background-color: var(--primary-hover);
            transform: translateY(-1px);
            box-shadow: 0 4px 8px rgba(62, 75, 109, 0.3);
        }

        .btn-custom:active {
            transform: translateY(0);
        }

    .btn-punching {
        background-color: #6c757d;
        cursor: not-allowed;
    }

    /* Search Panel */
    .search-panel-container {
        background-color: var(--primary-color);
        padding: 12px 20px;
        border-radius: 8px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(62, 75, 109, 0.2);
    }

    .search-heading {
        font-size: 16px;
        color: var(--text-light);
        font-weight: 600;
        margin: 0;
    }

    /* Form Controls */
    .form-control {
        border: 2px solid #e0e6ed;
        border-radius: 6px;
        padding: 8px 12px;
        transition: all 0.3s ease;
    }

        .form-control:focus {
            border-color: var(--primary-color);
            box-shadow: 0 0 0 0.2rem rgba(62, 75, 109, 0.25);
        }

    /* Filter Section */
    .filter-section {
        background: white;
        padding: 20px;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
    }

    .filter-label {
        font-weight: 600;
        color: var(--primary-color);
        margin-bottom: 5px;
    }

    .filter-row > div {
        margin-bottom: 15px;
    }

        .filter-row > div:last-child {
            margin-bottom: 0;
        }

    /* Tabs */
    .nav-tabs {
        border-bottom: 2px solid var(--primary-color);
    }

        .nav-tabs .nav-link {
            color: var(--primary-color);
            font-weight: 600;
            border: none;
            padding: 12px 20px;
            transition: all 0.3s ease;
        }

            .nav-tabs .nav-link:hover {
                background-color: rgba(62, 75, 109, 0.1);
            }

            .nav-tabs .nav-link.active {
                background-color: var(--primary-color);
                color: var(--text-light);
                border-color: var(--primary-color);
            }

    /* Grid */
    .grid-container {
        background: white;
        border-radius: 10px;
        padding: 20px;
        box-shadow: 0 2px 15px rgba(0, 0, 0, 0.08);
        max-height: 450px;
    }

    .grid-wrapper {
        position: relative;
        max-height: 400px;
    }

   
   
    @@keyframes spin {
        0%

    {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }

    }

    /* Action Buttons */
    .action-buttons {
        margin-bottom: 20px;
    }

    .btn-group-custom {
        gap: 10px;
        flex-wrap: wrap;
    }

    .mb-custom {
        margin-bottom: 1rem;
    }

    /* Tab Content */
    .tab-content {
        margin-top: 20px;
    }

   

   
</style>

<style>
    #attendanceGridFirst, #attendanceGridMultiple{
        max-height:350px;
    }
    .dx-datagrid-search-panel .dx-texteditor-input-container {
        display: flex;
        flex-direction: row-reverse;
        align-items: center;
    }
</style>




<div class="container-fluid py-4">
    <!-- Search Panel Header -->
    <div class="row">
        <div class="col-12">
            <div class="search-panel-container">
                <div class="search-panel-row">
                    <div class="search-heading">
                        <i class="fas fa-search me-2"></i>Search Panel
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="row">
        <div class="col-12">
            <div class="filter-section">
                <div class="row g-3 filter-row">
                    <!-- Month Filter -->
                    <div class="col-12 col-md-4">
                        <label class="filter-label" for="dropdownmonth">Month:</label>
                        <select id="dropdownmonth" class="form-control">
                            <option value="" disabled>Select Month</option>
                            @for (int i = 1; i <= 12; i++)
                            {
                                var selected = (i == DateTime.Now.Month) ? "selected" : "";
                                <option value="@i" @selected>@System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(i)</option>
                            }
                        </select>
                    </div>

                    <!-- Year Filter -->
                    <div class="col-12 col-md-4">
                        <label class="filter-label" for="dropdownyear">Year:</label>
                        <select id="dropdownyear" class="form-control">
                            @for (int y = 2024; y <= DateTime.Now.Year; y++)
                            {
                                var selected = (y == DateTime.Now.Year) ? "selected" : "";
                                <option value="@y" @selected>@y</option>
                            }
                        </select>
                    </div>

                    <!-- Go Button -->
                    <div class="col-12 col-md-4 d-flex align-items-end">
                        <button type="button" class="btn-custom w-25 mb-3" id="btnGo">
                            <i class="fas fa-play me-2"></i>Go
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Employee In/Out Header -->
    <div class="row">
        <div class="col-12">
            <div class="search-panel-container">
                <div class="search-panel-row">
                    <div class="search-heading">
                        <i class="fas fa-clock me-2"></i>Employee In Out
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Action Buttons -->
    <div class="row mt-3" id="punchTag" style="display:none;">
        <div class="col-12">
            <div class="d-flex btn-group-custom action-buttons" id="actionButtons">
                <button type="button" id="btnInOut" class="btn-custom">
                    <i class="fas fa-sign-in-alt me-2"></i>In/Out
                </button>
                <button type="button" class="btn-custom btn-punching" disabled id="btnPunching" style="display:none;">
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    Punching...
                </button>
            </div>
        </div>
    </div>

    <!-- Tab Navigation -->
    <div class="row">
        <div class="col-12">
            <ul class="nav nav-tabs" id="attendanceTabs" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="firstLast-tab" data-bs-toggle="tab" data-bs-target="#firstLast" type="button" role="tab">
                        <i class="fas fa-list-alt me-2"></i>First In and Last Out
                    </button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="multiplePunches-tab" data-bs-toggle="tab" data-bs-target="#multiplePunches" type="button" role="tab">
                        <i class="fas fa-clock me-2"></i>Multiple Punches
                    </button>
                </li>
            </ul>
        </div>
    </div>

    
    <!-- Tab Content -->
    <div class="row">
        <div class="col-12">
            <div class="tab-content" id="attendanceTabContent">
                <!-- First In Last Out Tab -->
                <div class="tab-pane fade show active" id="firstLast" role="tabpanel">
                    <div class="grid-container">
                        <div class="grid-wrapper " style="position: relative; ">
                            <div id="grid-first-loader" class="grid-loader justify-content-center align-items-center flex-column "
                                 style="display: none;  inset: 0; background: rgba(255,255,255,0.6); z-index: 10; ">
                                <img src="@baseDomainUrl/loders/loder.png" class="grid-logo-spinner" style="width: 30px; height: 30px; animation: spin 1s linear infinite;" />
                                <div class="grid-loading-text text-dark" style="font-size: 16px;">Loading...</div>

                            </div>
                            <div id="GridTagFirst">
                                <div id="attendanceGridFirstCount"></div>
                                <div id="attendanceGridFirst"></div>
                            </div>
                            <div id="spnNoRecordFirst" class="text-center py-5 text-muted" style="display:none;">No Record Found!</div>

                        </div>
                    </div>
                </div>

                <!-- Multiple Punches Tab -->
                <div class="tab-pane fade" id="multiplePunches" role="tabpanel">
                    <div class="grid-container">
                        <div class="grid-wrapper " style="position: relative; ">
                            <div id="grid-multi-loader" class="grid-loader justify-content-center align-items-center flex-column "
                                 style="display: none;  inset: 0; background: rgba(255,255,255,0.6); z-index: 10; ">
                                <img src="@baseDomainUrl/loders/loder.png" class="grid-logo-spinner" style="width: 30px; height: 30px; animation: spin 1s linear infinite;" />
                                <div class="grid-loading-text text-dark" style="font-size: 16px;">Loading...</div>

                            </div>
                            <div id="GridTagMulti">
                                <div id="attendanceGridMultipleCount"></div>
                                <div id="attendanceGridMultiple"></div>
                           </div>

                            <div id="spnNoRecordMulti" class="text-center py-5 text-muted" style="display:none;">No Record Found!</div>

                         </div>

                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- JavaScript -->
<script>
    const apiBase = '@baseUrl';
    const empid = parseInt(localStorage.getItem("EmployeeId"));
     const savedCompany = localStorage.getItem('selectedCompany');
    const companyDetails = JSON.parse(savedCompany || '{}');
    const Compid = parseInt(companyDetails.CompanyId);
    const Token=localStorage.getItem("authToken");

    function convertUTCtoIST(utcInput) {
        const utcDate = new Date(utcInput);
        const istOffsetMs = 5.5 * 60 * 60 * 1000; // IST is UTC+5:30
        const istDate = new Date(utcDate.getTime() + istOffsetMs);
        return istDate;
    }


    $(document).ready( async function ()
    {
        await checkPermissionInOut();
           reloadGrids();

         $('#btnInOut').click(function () {
            $('#btnInOut').hide();
            $('#btnPunching').show();

            try {
                const utcNow = new Date();

                const payload = {
                    EmployeeId: empid,
                    PunchDateTime: convertUTCtoIST(utcNow),
                    CreatedBy: empid.toString(),
                    Mode: "Web",
                    CompanyId: Compid
                };

                $.ajax({
                    url: apiBase + '/EmployeeInOut/CreateEmpINOut',
                    type: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(payload),
                    success: function (response) {
                        if (response.isSuccess) {
                            round_success_noti(response.responseMessage);
                            reloadGrids();
                        } else {
                            round_error_noti(response.responseMessage);
                        }
                        $('#btnInOut').show();
                        $('#btnPunching').hide();
                    },
                    error: function (xhr, status, error) {
                        console.error("AJAX error:", error);
                        $('#btnInOut').show();
                        $('#btnPunching').hide();
                        round_error_noti("Failed to punch in/out. Please try again.");
                    }
                });

            } catch (err) {
                console.error("Unexpected error:", err);
                $('#btnInOut').show();
                $('#btnPunching').hide();
                round_error_noti("Something went wrong. Please try again.");
            }
        });

        $('#dropdownyear,#dropdownmonth').focus(function(){
            $('#btnGo').prop("disabled",false);
        });




         $('#btnGo').click(function () {
             $('#btnGo').prop("disabled",true);
            const month = $('#dropdownmonth').val();
            const year = $('#dropdownyear').val();
            if (!month || !year) return  round_error_noti("Please select Month and Year");

            const activeTab = $('#attendanceTabs .nav-link.active');
            const tab = activeTab.attr("data-bs-target");

            if (tab === "#firstLast") {
                loadFirstLast(empid, Compid, month, year);
            } else if (tab === "#multiplePunches") {
                loadMultiple(empid, Compid, month, year);
            } else {
                 round_error_noti("Unknown tab selected");
            }
        });


             $('button[data-bs-toggle="tab"]').on('shown.bs.tab', async function (e) {
                const target = $(e.target).attr("data-bs-target");
                const month = $('#dropdownmonth').val();
                const year = $('#dropdownyear').val();

                if (!month || !year) return;

                if (target === "#firstLast") {
                    await loadFirstLast(empid, Compid, month, year);
                }
                else if (target === "#multiplePunches") {
                    await loadMultiple(empid, Compid, month, year);
                }
            });
    });

    function reloadGrids() {
        const month = $('#dropdownmonth').val() || (new Date().getMonth() + 1);
        const year = $('#dropdownyear').val() || new Date().getFullYear();
        loadFirstLast(empid,Compid, month, year);
        loadMultiple(empid,Compid, month, year);
    }

    async function checkPermissionInOut() {
        try {
            const response = await fetch(`${apiBase}/EmployeeMasterAPI/GetEmployeeById/${empid}`, {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${Token}` // optional, if needed
                }
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            
            if (data.isSuccess ) {
               if(data.data.isPermissionPunchInOut)
               {
                   $('#punchTag').show();
               }
            } else {
                
            }
            
        } catch (error) {
            
            console.error('Failed to load check permission', error);
          
        }
    }

     async function loadFirstLast(empid, Compid, month, year) {
         $('#grid-first-loader').addClass('d-flex').show();
        try {
            const response = await fetch(`${apiBase}/EmployeeInOut/GetMonthlyAttendanceDetails`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${Token}` // optional, if needed
                },
                body: JSON.stringify({
                    employeeId: empid,
                    companyId: Compid,
                    monthNumber: month,
                    year: year
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();

            if (data.isSuccess && Array.isArray(data.data)) {
                $('#GridTagFirst').show();
                $('#spnNoRecordFirst').hide();
                $('#attendanceGridFirst').dxDataGrid({
                    dataSource: data.data,
                    rowHeight: 40,
                    width: '100%',
                       columns: [
                            { dataField: 'employeeCode', caption: 'Employee Code' },
                            { dataField: 'fullName', caption: 'Full Name' },
                            { dataField: 'branchName', caption: 'Branch' },
                            { dataField: 'companyName', caption: 'Company Name' },
                            {
                                dataField: 'shiftDate',
                                caption: 'Shift Date',
                                dataType: 'date',
                                format: 'dd-MM-yyyy'
                            },
                            {
                                dataField: 'inTime',
                                caption: 'In Time'
                                
                            },
                            {
                                dataField: 'outTime',
                                caption: 'Out Time'
                                
                            },
                            {
                                dataField: 'workingHours',
                                caption: 'Working Hours',
                                dataType: 'number',
                                format: '#0.00',
                                alignment: 'left'
                            },
                            { dataField: 'attendanceStatus', caption: 'Attendance Status' },
                            {
                                dataField: 'salaryDay',
                                caption: 'Salary Day',
                                dataType: 'number',
                                format: '#0.0',
                                alignment: 'left'

                            }
                           
                        ],
                    columnsAutoWidth: false,
                    wordWrapEnabled: false,
                    showBorders: true,
                    rowAlternationEnabled: false,
                    grouping: { autoExpandAll: false },
                    // paging: { pageSize: 10 },
                    // pager: { showPageSizeSelector: false, allowedPageSizes: [10, 25, 50, 100] },
                    headerFilter: { visible: false },
                    filterRow: { visible: false, applyFilter: "auto" },
                    allowColumnResizing: true,
                    groupPanel: { visible: false },
                    searchPanel: { visible: true, width: 240, placeholder: "Search..." },
                    columnFixing: { enabled: false },
                    scrolling: {
                        mode: "standard",
                        useNative: false,
                        scrollByContent: true,
                        scrollByThumb: true
                    },
                    onContentReady(e) {
                            $('#attendanceGridFirstCount').html('Total Records: ' + e.component.totalCount());
                    }
                });
            } else {
                 $('#GridTagFirst').hide();
                $('#spnNoRecordFirst').show();
            }
            $('#grid-first-loader').removeClass('d-flex').hide();
        } catch (error) {
           
            $('#grid-first-loader').removeClass('d-flex').hide();
            console.error('Failed to load First In/Out records:', error);
            round_error_noti("Failed to load First In/Out records.");
        }
    }

    async function loadMultiple(empid, Compid, month, year) {
         $('#grid-multi-loader').addClass('d-flex').show();
        try {
            const response = await fetch(`${apiBase}/EmployeeInOut/GetMonthlyAttendanceLog`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json',
                    'Authorization': `Bearer ${Token}` // optional, if needed
                },
                body: JSON.stringify({
                    employeeId: empid,
                    companyId: Compid,
                    monthNumber: month,
                    year: year
                })
            });

            if (!response.ok) {
                round_error_noti('Something went wrong!');
            }

            const data = await response.json();

            if (data.isSuccess && Array.isArray(data.data)) {
                 $('#GridTagMulti').show();
                $('#spnNoRecordMulti').hide();
                $('#attendanceGridMultiple').dxDataGrid({
                    dataSource: data.data,
                    rowHeight: 40,
                    width: '100%',
                       columns: [
                               { dataField: 'employeeCode', caption: 'Employee Code' },
                                { dataField: 'fullName', caption: 'Full Name' },
                                { dataField: 'branchName', caption: 'Branch' },
                                { dataField: 'companyName', caption: 'Company Name' },
                                {
                                    dataField: 'punchDateTime',
                                    caption: 'Punch Date',
                                    dataType: 'date',
                                    format: 'dd-MM-yyyy',
                                    alignment: 'left'
                                },
                                {
                                    dataField: 'punchTime',
                                    caption: 'Punch Time',

                                },
                                {
                                    dataField: 'mode',
                                    caption: 'Mode',
                                    alignment: 'left'
                                }

                        ],
                    columnsAutoWidth: false,
                    wordWrapEnabled: false,
                    showBorders: true,
                    rowAlternationEnabled: false,
                    grouping: { autoExpandAll: false },
                    // paging: { pageSize: 10 },
                    // pager: { showPageSizeSelector: false, allowedPageSizes: [10, 25, 50, 100] },
                    headerFilter: { visible: false },
                    filterRow: { visible: false, applyFilter: "auto" },
                    allowColumnResizing: true,
                    groupPanel: { visible: false },
                    searchPanel: { visible: true, width: 240,height:30, placeholder: "Search..." },
                    columnFixing: { enabled: false },
                    scrolling: {
                        mode: "standard",
                        useNative: false,
                        scrollByContent: true,
                        scrollByThumb: true
                    },
                    onContentReady(e) {
                                    $('#attendanceGridMultipleCount').html('Total Records: ' + e.component.totalCount());
                    }
                });
            } else {
                 $('#GridTagMulti').hide();
                $('#spnNoRecordMulti').show();
            }
            $('#grid-multi-loader').removeClass('d-flex').hide();
        } catch (error) {
            $('#grid-multi-loader').removeClass('d-flex').hide();
            console.error('Failed to load First In/Out records:', error);
            alert("Failed to load First In/Out records.");
        }
    }







    // function loadMultiple(empid, month, year) {
    //     $.post(apiBase + "/EmployeeInOut/MultipleOut",
    //         { EmpId: empid, Month: month, Year: year },
    //         function (data) {
    //             if (data.isSuccess && data.data?.length) {
    //                 renderTableMultiple(data.data);
    //             } else {
    //                 $('#attendanceGridMultiple').html('<div class="text-center text-muted">No records found.</div>');
    //             }
    //         }
    //     ).fail(() => alert("❌ Failed to load Multiple Punches records."));
    // }


    function renderTableFirst(data) {
        $("#attendanceGridFirst").dxDataGrid({
            dataSource: data,
            //keyExpr: "comp_Off_Detailsid",
            showBorders: true,
            columnAutoWidth: true,
               height: "auto",
            // selection: {
            //     mode: "multiple",
            //     showCheckBoxesMode: "always"
            // },
            // onSelectionChanged: function (e) {
            //     $("#actionButtons").toggle(e.selectedRowKeys.length > 0);
            // },
            columns: [

                 { dataField: "employeeCode", caption: "EmployeeCode" ,cssClass: "text-center-cell"},
                { dataField: "fullName", caption: "EmployeeName" ,cssClass: "text-center-cell"},
                { dataField: "branchName", caption: "BranchName" ,cssClass: "text-center-cell"},
                { dataField: "for_Date", caption: "Date",dataType: "date",format: "dd-MM-yyyy",cssClass: "text-center-cell"},
                { dataField: "day_Name", caption: "Day" ,cssClass: "text-center-cell"},
                { dataField: "in_Time", caption: "In Time",cssClass: "text-center-cell" },
                { dataField: "out_Time", caption: "Out Time",cssClass: "text-center-cell" },
                { dataField: "duration", caption: "Duration" ,cssClass: "text-center-cell"}
            ]
              ,   onContentReady: function (e) {
            const rowCount = data.length;
            const rowHeight = 40; // approx row height in pixels
            const headerHeight = 40;
            const totalHeight = headerHeight + (rowCount * rowHeight);
            e.component.option("height", totalHeight);
        }
        });
    }


    function renderTableMultiple(data) {
        $("#attendanceGridMultiple").dxDataGrid({
            dataSource: data,
            //keyExpr: "comp_Off_Detailsid",
            showBorders: true,
                columnAutoWidth: true,
        height: "auto", 
        paging: {
            pageSize: 15 
        },
        pager: {
            showPageSizeSelector: true,
            allowedPageSizes: [15, 30, 45],
            showInfo: true
        },
           scrolling: {
            mode: "standard",     
            useNative: true     
        },
            // selection: {
            //     mode: "multiple",
            //     showCheckBoxesMode: "always"
            // },
            // onSelectionChanged: function (e) {
            //     $("#actionButtons").toggle(e.selectedRowKeys.length > 0);
            // },
            columns: [
                   { dataField: "employeeCode", caption: "EmployeeCode" ,cssClass: "text-center-cell"},
                 { dataField: "employeeName", caption: "EmployeeName" ,cssClass: "text-center-cell"},
                { dataField: "branchName", caption: "BranchName" ,cssClass: "text-center-cell"},
                { dataField: "for_Date", caption: "Date",format: "dd-MM-yyyy",dataType: "date",cssClass: "text-center-cell"},
                { dataField: "day_Name", caption: "Day",cssClass: "text-center-cell" },
                { dataField: "in_Time", caption: "In Time",cssClass: "text-center-cell" },
                { dataField: "out_Time", caption: "Out Time",cssClass: "text-center-cell" },
                { dataField: "duration", caption: "Duration",cssClass: "text-center-cell" }
            ]

        });
    }


</script>


