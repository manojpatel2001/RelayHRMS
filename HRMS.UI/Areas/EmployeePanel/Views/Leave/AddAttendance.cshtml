@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Attendance Regularisation";
    Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
    string baseUrl = ViewBag.BaseUrl;
    string apiBase = ViewBag.BaseUrlAPI;
    string baseUrls = Configuration["BaseUrlSettings:baseUrl"];
    string UIBaseUrl = Configuration["UIBaseUrlSettings:baseUrl"];
    var uri = new Uri(baseUrls);
    string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
}
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css">
<script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

<style>
    body {
        background-color: #ffffff !important;
    }

    .form-label {
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 5px;
    }

    .form-control,
    .form-select {
        font-size: 13px;
        padding: 4px 10px;
        height: 32px;
        width: 240px;
        max-width: 100%;
    }

    .row.gutter-tight > [class*='col-'] {
        padding-left: 10px;
        padding-right: 10px;
        margin-bottom: 14px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .btn-custom {
        background-color: #3e4b6d;
        color: white;
        border: none;
        padding: 4px 12px;
        font-size: 13px;
        font-weight: 600;
        border-radius: 4px;
        transition: none;
        box-shadow: none;
    }

        .btn-custom:hover,
        .btn-custom:focus,
        .btn-custom:active {
            background-color: #3e4b6d;
            color: white;
            outline: none;
            box-shadow: none;
        }

    .back-btn {
        float: right;
        margin-top: 20px;
        margin-right: 40px;
    }

    .dx-editor-cell .dx-link.dx-link-cancel {
        display: none !important;
    }

    .flatpickr-time {
        font-size: 12px !important;
    }

        .flatpickr-time input {
            height: 24px !important;
            font-size: 12px !important;
        }

    .short-field {
        width: 100px !important;
    }

    .medium-field {
        width: 180px !important;
    }

    .field-error {
        font-size: 12px;
        margin-top: 2px;
    }

    .swal-small {
        font-size: 14px;
        padding: 10px;
    }

    .myGrid, .myCard {
        width: 100% !important;
        max-width: 100% !important;
        overflow-x: auto;
    }

    #attendanceGrid {
        width: 100% !important;
        max-width: 100% !important;
        overflow-y: hidden !important;
        overflow-x: auto !important;
    }

    .form-section {
        max-width: 100% !important;
        margin-top: 0;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 6px;
        background-color: #fff;
    }

    .section-header {
        background-color: #3e4b6d;
        color: #fff;
        font-weight: bold;
        padding: 10px 20px;
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
        margin: 0 auto;
        max-width: 100%;
    }

    #attendanceGrid .dx-scrollbar-vertical {
        display: none !important;
    }

    #attendanceGrid .dx-scrollbar-horizontal {
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    #attendanceGrid:hover .dx-scrollbar-horizontal {
        opacity: 1;
    }

    #attendanceGrid .dx-scrollable-scroll,
    #attendanceGrid ::-webkit-scrollbar {
        width: 6px;
        height: 6px;
    }

    #attendanceGrid ::-webkit-scrollbar-thumb {
        background-color: #999;
        border-radius: 3px;
    }

    #attendanceGrid ::-webkit-scrollbar-track {
        background-color: #f0f0f0;
    }

    #attendanceGrid {
        scrollbar-width: thin;
        scrollbar-color: #999 #f0f0f0;
    }

    .checkbox-container {
        display: flex;
        align-items: center;
        margin-bottom: 15px;
    }

        .checkbox-container input[type="checkbox"] {
            margin-right: 8px;
            transform: scale(1.2);
        }

    .date-field {
        width: 150px !important;
    }
</style>

<div class="section-header">
    EMPLOYEE ATTENDANCE REGULARIZATION REQUEST
</div>

<div class="form-section">
    <div class="container mt-2">
        <!-- Checkbox for Date Range Toggle -->
        <div class="checkbox-container">
            <input type="checkbox" id="chkBetween" />
            <label for="chkBetween">Between Date Range</label>
        </div>

        <div class="row gutter-tight justify-content-center flex-wrap">
            <!-- Year Field (Default Visible) -->
            <div class="col-md-auto" id="yearField">
                <label class="form-label">Year :</label>
                <select class="form-select form-select-sm short-field" id="year"></select>
                <div class="text-danger field-error" id="yearError"></div>
            </div>

            <!-- Month Field (Default Visible) -->
            <div class="col-md-auto" id="monthField">
                <label class="form-label">Month :</label>
                <select class="form-select form-select-sm short-field" id="month">
                    <option value="">--Select--</option>
                    <option value="1">January</option>
                    <option value="2">February</option>
                    <option value="3">March</option>
                    <option value="4">April</option>
                    <option value="5">May</option>
                    <option value="6">June</option>
                    <option value="7">July</option>
                    <option value="8">August</option>
                    <option value="9">September</option>
                    <option value="10">October</option>
                    <option value="11">November</option>
                    <option value="12">December</option>
                </select>
                <div class="text-danger field-error" id="monthError"></div>
            </div>

            <!-- Start Date Field (Hidden by Default) -->
            <div class="col-md-auto d-none" id="startDateField">
                <label class="form-label">Start Date :</label>
                <input type="text" class="form-control form-control-sm date-field" id="startDate" placeholder="Select Date" />
                <div class="text-danger field-error" id="startDateError"></div>
            </div>

            <!-- End Date Field (Hidden by Default) -->
            <div class="col-md-auto d-none" id="endDateField">
                <label class="form-label">End Date :</label>
                <input type="text" class="form-control form-control-sm date-field" id="endDate" placeholder="Select Date" />
                <div class="text-danger field-error" id="endDateError"></div>
            </div>

            <div class="col-md-auto">
                <label class="form-label">Employee <span class="text-danger">*</span> :</label>
                <select class="form-select form-select-sm medium-field" id="employeeDropdown">
                   
                </select>
                <div class="text-danger field-error" id="employeeError"></div>
            </div>

            <div class="col-md-auto">
                <label class="form-label">Record Type :</label>
                <select class="form-select form-select-sm medium-field" id="recordtype">
                    <option value="All">All</option>
                    <option value="P">Present</option>
                    <option value="A">Absent</option>
        @*             <option value="H">Holiday</option>
                    <option value="W">Week Off</option>
                    <option value="HF">Half Day</option> *@
                </select>
                <div class="text-danger field-error" id="recordTypeError"></div>
            </div>
        </div>

        <div class="action-buttons d-flex justify-content-center gap-3 mt-2">
            <button class="btn btn-custom" id="btnGo">Go</button>
            <button class="btn btn-custom" id="btnClear">Clear</button>
            <button class="btn btn-custom" onclick="goBack()">Back</button>
        </div>
    </div>
</div>

<div id="grid-loader"
     class="grid-loader justify-content-center align-items-center flex-column"
     style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(255, 255, 255, 0.6); backdrop-filter: blur(3px); z-index: 9999;">
    <img src="@baseDomainUrl/loders/loder.png"
         class="grid-logo-spinner"
         style="width: 40px; height: 40px; animation: spin 1s linear infinite;" />
    <div class="grid-loading-text text-dark " style="font-size: 16px;">Loading...</div>
</div>

<div id="attendanceSummary"
     style="background-color:#d7f3f4; padding:5px; font-size:14px; font-weight:600; margin-top:10px;">
</div>

<div class="form-section" id="attendanceSection" style="margin-top: 30px; display: none;">
    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
        <h6 class="mb-0">Attendance Details</h6>
        <div id="saveButtonContainer" style="display: none;">
            <button class="btn btn-custom mt-2 mt-md-0" id="btnSaveGridData" style="min-width: 90px;">Save</button>
        </div>
    </div>
    <div id="attendanceGrid" style="overflow-x: auto;"></div>
</div>


<script>

    const savedCompany = localStorage.getItem('selectedCompany');
      var companyDetails = JSON.parse(savedCompany);
      const CompanyId = companyDetails.CompanyId;
      const EmployeeId = localStorage.getItem('EmployeeId');
      const Token = localStorage.getItem("authToken");
      const apiBase = '@apiBase';
    const EmployeeName = localStorage.getItem("EmployeeName");
      $(document).ready(function () {
              bindEmployee();
          // GetEmployeesByBranchAndUser();
          populateYearDropdown();
          initializeDatePickers();
          setupDateRangeToggle();
          $("#attendanceSummary").hide();

          // Set default values
          const currentYear = new Date().getFullYear();
          const currentMonth = new Date().getMonth() + 1;
          $('#year').val(currentYear);
          $('#month').val(currentMonth);

          // Remove future months
          removeFutureMonths();
      });

      function bindEmployee(){
          const dropdown = document.getElementById('employeeDropdown');
          const option = document.createElement('option');
            option.value = EmployeeId;
            option.textContent = EmployeeName;
            dropdown.appendChild(option);
      }
      function initializeDatePickers() {
          flatpickr("#startDate", {
              dateFormat: "d/m/Y",
              maxDate: "today"
          });

          flatpickr("#endDate", {
              dateFormat: "d/m/Y",
              maxDate: "today"
          });
      }

      function setupDateRangeToggle() {
          $('#chkBetween').on('change', function () {
              if ($(this).is(':checked')) {
                  // Hide Month/Year, Show Date Range
                  $('#monthField, #yearField').addClass('d-none');
                  $('#startDateField, #endDateField').removeClass('d-none');

                  // Clear Month/Year errors
                  $('#monthError, #yearError').text('');
              } else {
                  // Hide Date Range, Show Month/Year
                  $('#startDateField, #endDateField').addClass('d-none');
                  $('#monthField, #yearField').removeClass('d-none');

                  // Clear Date Range errors
                  $('#startDateError, #endDateError').text('');
              }
          });
      }

      function removeFutureMonths() {
          const currentMonth = new Date().getMonth() + 1;
          $('#month option').each(function () {
              const monthValue = parseInt($(this).val());
              if (monthValue > currentMonth) {
                  $(this).remove();
              }
          });
      }

      function goBack() {
          window.location.href = '@UIBaseUrl/EmployeePanel/Home/index';
      }

      function populateYearDropdown() {
          const startYear = 2024;
          const currentYear = new Date().getFullYear();
          const yearDropdown = $("#year");
          yearDropdown.empty();
          yearDropdown.append('<option value="">--Select--</option>');
          for (let year = currentYear; year >= startYear; year--) {
              yearDropdown.append(`<option value="${year}">${year}</option>`);
          }
      }

      // function GetEmployeesByBranchAndUser() {
      //     $.ajax({
      //         type: "GET",
      //         url: apiBase + "/BranchAPI/GetEmployeesByBranchAndUser?EmpId=" + EmployeeId + "&CompId=" + CompanyId,
      //         headers: {
      //             'Authorization': 'Bearer ' + Token
      //         },
      //         success: function (response) {
      //             const $emp = $('#employeeDropdown');
      //             $emp.empty().append('<option value="">--Select Employee--</option>');

      //             if (response?.isSuccess && response?.data) {
      //                 $.each(response.data, function (i, item) {
      //                     $emp.append('<option value="' + item.id + '">' + item.fullName + '</option>');
      //                 });
      //             } else {
      //                 console.warn(response?.responseMessage || 'No employees found.');
      //             }
      //         },
      //         error: function (err) {
      //             console.error("Error fetching employees:", err);
      //         }
      //     });
      // }

      function GetEmployeeById() {
          var empId = $("#employeeDropdown").val();
          return $.ajax({
              type: "GET",
              url: '@baseDomainUrl/api/EmployeeMasterAPI/GetEmployeeById/' + empId,
              headers: {
                  'Authorization': 'Bearer ' + Token
              },
              success: function (data) {
                  if (data.isSuccess && data.data) {
                      // Employee data loaded
                  }
              },
              error: function (xhr, status, error) {
                  console.error("AJAX Error: " + status + " - " + error);
              }
          });
      }

      async function showLoder() {
          $('#grid-loader').addClass('d-flex').show();
      }

      async function hideLoder() {
          $('#grid-loader').removeClass('d-flex').hide();
      }

      function clearValidationErrors() {
          $('.field-error').text('');
          $('#validationMsg').text('');
      }

      function getDateRange() {
          const isDateRange = $('#chkBetween').is(':checked');

          if (isDateRange) {
              // Use Start Date and End Date
              const startDate = $('#startDate').val();
              const endDate = $('#endDate').val();

              if (startDate && endDate) {
                  // Convert dd/mm/yyyy to yyyy-mm-dd
                  const startParts = startDate.split('/');
                  const endParts = endDate.split('/');

                  return {
                      startDate: `${startParts[2]}-${startParts[1].padStart(2, '0')}-${startParts[0].padStart(2, '0')}`,
                      endDate: `${endParts[2]}-${endParts[1].padStart(2, '0')}-${endParts[0].padStart(2, '0')}`
                  };
              }
          } else {
              // Use Month and Year
              const month = $('#month').val();
              const year = $('#year').val();

              if (month && year) {
                  const monthStr = month.padStart(2, '0');
                  const startDate = `${year}-${monthStr}-01`;
                  const lastDay = new Date(year, month, 0).getDate();
                  const endDate = `${year}-${monthStr}-${lastDay.toString().padStart(2, '0')}`;

                  return { startDate, endDate };
              }
          }

          return null;
      }

      function validateForm() {
          clearValidationErrors();
          let hasError = false;

          const emp = $('#employeeDropdown').val();
          const record = $('#recordtype').val();
          const isDateRange = $('#chkBetween').is(':checked');

          // Employee validation
          if (!emp) {
              $('#employeeError').text("Please select Employee.");
              hasError = true;
          }

          // Record type validation
          if (!record) {
              $('#recordTypeError').text("Please select Record Type.");
              hasError = true;
          }

          if (isDateRange) {
              // Date range validation
              const startDate = $('#startDate').val();
              const endDate = $('#endDate').val();

              if (!startDate) {
                  $('#startDateError').text("Please select Start Date.");
                  hasError = true;
              }
              if (!endDate) {
                  $('#endDateError').text("Please select End Date.");
                  hasError = true;
              }

              if (startDate && endDate) {
                  const start = new Date(startDate.split('/').reverse().join('-'));
                  const end = new Date(endDate.split('/').reverse().join('-'));

                  if (start > end) {
                      $('#endDateError').text("End Date must be greater than or equal to Start Date.");
                      hasError = true;
                  }
              }
          } else {
              // Month/Year validation
              const year = $('#year').val();
              const month = $('#month').val();

              if (!year) {
                  $('#yearError').text("Please select Year.");
                  hasError = true;
              }
              if (!month) {
                  $('#monthError').text("Please select Month.");
                  hasError = true;
              }
          }

          return !hasError;
      }

      // Go Button Click Event
      $('#btnGo').on('click', function () {
          if (!validateForm()) {
              return;
          }

          const emp = $('#employeeDropdown').val();
          const record = $('#recordtype').val();
          const dateRange = getDateRange();

          if (!dateRange) {
              Swal.fire({
                  text: "Please provide valid date range.",
                  icon: "warning",
                  confirmButtonText: "OK",
                  width: "300px",
                  customClass: {
                      popup: 'swal-small'
                  }
              });
              return;
          }

          // Check joining date before proceeding
          GetEmployeeById().done(function (data) {
              if (data.isSuccess && data.data) {
                  let joiningDate = new Date(data.data.dateOfJoining);
                  let selectedStartDate = new Date(dateRange.startDate);

                  if (selectedStartDate < joiningDate) {
                      Swal.fire({
                          text: `Attendance Regularisation is only allowed from ${joiningDate.toLocaleDateString()}.`,
                          icon: 'warning',
                          width: '300px',
                          confirmButtonText: 'OK',
                          customClass: {
                              popup: 'swal-small'
                          }
                      });
                      return;
                  }

                  // Proceed with AJAX
                  showLoder();
                  const formData = new FormData();
                  formData.append("EmpId", emp);
                  formData.append("StartDate", dateRange.startDate);
                  formData.append("EndDate", dateRange.endDate);
                  formData.append("RecordType", record);

                  $.ajax({
                      url: '@(baseDomainUrl + "/api/EmployeeInOut/GetEmployeeInOutReport")',
                      type: 'POST',
                      data: formData,
                      contentType: false,
                      processData: false,
                      success: function (response) {
                          if (response?.isSuccess) {
                              if (response.data && response.data.length > 0) {
                                  $("#attendanceSummary").show();
                                  showAttendanceSummary(response.data);
                                  LoadAttendanceGrid(response.data);
                                  $("#saveButtonContainer").show();
                                  $("#attendanceSection").show();
                              } else {
                                  $("#attendanceSummary").hide();
                                  $("#saveButtonContainer").hide();
                                  $("#attendanceSection").hide();
                                  Swal.fire({
                                      text: "No Record Found.",
                                      icon: "info",
                                      confirmButtonText: "OK",
                                      width: "300px",
                                      customClass: {
                                          popup: 'swal-small'
                                      }
                                  });
                              }
                          } else {
                              Swal.fire({
                                  text: "No Record Found.",
                                  icon: "info",
                                  confirmButtonText: "OK",
                                  width: "300px",
                                  customClass: {
                                      popup: 'swal-small'
                                  }
                              });
                              $("#attendanceSummary").hide();
                              $("#saveButtonContainer").hide();
                              $("#attendanceSection").hide();
                          }
                      },
                      error: function () {
                          Swal.fire({
                              text: "Something went wrong while fetching data.",
                              icon: "error",
                              confirmButtonText: "OK",
                              width: "300px",
                              customClass: {
                                  popup: 'swal-small'
                              }
                          });
                      },
                      complete: function () {
                          hideLoder();
                      }
                  });
              }
          });
      });

      // Clear Button Click Event
      $('#btnClear').on('click', function () {
          // Reset form fields
          $('#month').val('');
          $('#year').val('');
          $('#startDate').val('');
          $('#endDate').val('');
          $('#recordtype').val('All');
          $('#employeeDropdown').val('');
          $('#chkBetween').prop('checked', false);

          // Reset visibility
          $('#startDateField, #endDateField').addClass('d-none');
          $('#monthField, #yearField').removeClass('d-none');

          clearValidationErrors();

          $("#saveButtonContainer").hide();
          $("#attendanceSection").hide();
          $("#attendanceSummary").hide();

          const grid = $("#attendanceGrid").dxDataGrid("instance");
          if (grid) {
              grid.option("dataSource", []);
              grid.refresh();
          }
      });



            function showAttendanceSummary(data) {
        let counts = {
            P: 0, // Present
            A: 0, // Absent
            // L: 0, // Leave
            W: 0, // Week-off
            H: 0   // Holiday
            // Late: 0
        };

        data.forEach(row => {
            const status = row.attendanceStatus?.trim().toUpperCase();
            if (status === "P") counts.P++;
            else if (status === "A") counts.A++;
            // else if (status === "L") counts.L++;
            else if (status === "W") counts.W++;
            else if (status === "H") counts.H++;

            if (row.lateDeductionDays && row.lateDeductionDays > 0) {
                counts.Late += row.lateDeductionDays;
            }
        });

        const total = data.length;

        $("#attendanceSummary").html(`
            <span style="color:green;">Present : ${counts.P}</span> &nbsp;&nbsp;
            <span style="color:red;">Absent : ${counts.A}</span> &nbsp;&nbsp;
            <span style="color:purple;">Week-off : ${counts.W}</span> &nbsp;&nbsp;
            <span style="color:blue;">Holiday : ${counts.H}</span> &nbsp;&nbsp;
            <span>Total : ${total}</span>
        `);
    }



       function formatToISOString(dateStr) {
        const date = new Date(dateStr);
        return !isNaN(date) ? date.toISOString() : null;
    }


     $('#btnSaveGridData').on('click', function () {
        const gridInstance = $("#attendanceGrid").dxDataGrid("instance");
        gridInstance.saveEditData();

        const selectedRows = gridInstance.getSelectedRowsData();

        if (selectedRows.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Validation',
                text: 'Please select at least one row to save.'
            });
            return;
        }

        const empId = $('#employeeDropdown').val();
        if (!empId) {
            Swal.fire({
                icon: 'warning',
                title: 'Validation',
                text: 'Please select an employee.'
            });
            return;
        }

        const validRows = [];
        selectedRows.forEach(row => {
            const reason = row.reason?.trim();
            const dayType = row.dayType?.trim();
            if (reason && dayType) {
                debugger;
                 validRows.push({
        EmpId: empId,
        FullName: row.fullName || "",
        BranchName: row.branchName || "",
        ForDate: row.shiftDate,
        ShiftTime: row.shiftTime || "",
            InTime: (row.inTime && row.inTime !== "-") ? formatToISOString(row.inTime) : null,
            OutTime: (row.outTime && row.outTime !== "-") ? formatToISOString(row.outTime) : null,
        Day: dayType,
        Status: row.attendanceStatus || "",
        Reason: reason,
        IsApproved: false,
        IsPending: true,
        IsRejected: false,
        IsLocked: false,
        CreatedBy:EmployeeId
    });
            }
        });
        if (validRows.length === 0) {
            Swal.fire({
                icon: 'warning',
                title: 'Validation',
                text: 'Please select reason and day type for selected row(s).'
            });
            return;
        }
                     showLoder();

        // Save via AJAX
        $.ajax({
            url: '@(baseDomainUrl + "/api/AttendanceRegularizationAPI/CreateAttendanceRegularization")',
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(validRows),
            success: function (response) {
                      hideLoder();
                if (response?.isSuccess) {
                    round_success_noti(response.responseMessage || "Saved successfully.");
              const gridInstance = $("#attendanceGrid").dxDataGrid("instance");
    const selectedRowsData = gridInstance.getSelectedRowsData();
    let currentData = gridInstance.option("dataSource");

    const updatedData = currentData.filter(item => {
        return !selectedRowsData.some(sel =>
            sel.empId === item.empId && new Date(sel.shiftDate).toISOString() === new Date(item.shiftDate).toISOString()
        );
    });

    gridInstance.option("dataSource", updatedData);
    gridInstance.refresh();
    gridInstance.clearSelection(); // optional

    $("#btnGo").trigger("click");
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Save Failed',
                        text: response?.responseMessage || "Unknown error"
                    });
                }
            },
            error: function (xhr) {
                    hideLoder();
                Swal.fire({
                    icon: 'error',
                    title: 'Server Error',
                    text: xhr.status + " - " + xhr.statusText
                });
            },

        });
    });



    function LoadAttendanceGrid(data) {
        $("#attendanceGrid").dxDataGrid({
            dataSource: data,
            showBorders: true,
            keyExpr: "shiftDate",
            width: "100%",
            columnAutoWidth: true,
            allowColumnResizing: true,
            paging: { enabled: false },
              height: 300, // fixed height for scroll
    autoHeight: false, // ensure scroll can appear
    scrolling: {
        mode: "standard",
        useNative: true,
        showScrollbar: "always"
    },
            selection: {
                mode: "multiple",
                showCheckBoxesMode: "always"
            },
            editing: {
                mode: "cell",
                allowUpdating: true
            },
            onContentReady: function (e) {
                e.component.option("width", "100%");
            },
            onCellPrepared: function (e) {
                if (e.rowType === "data") {
                    e.cellElement.css({
                        'padding-top': '2px',
                        'padding-bottom': '2px',
                        'font-size': '12px',
                        'line-height': '16px'
                    });
                }
            },
            onEditingStart: function (e) {
                const status = e.data.attendanceStatus?.trim().toUpperCase();
                if (status === "P" || status === "W" || status === "H") {
                    e.cancel = true;
                    let msg =
                        status === "P" ? "Editing not allowed for Present records." :
                            status === "W" ? "Editing not allowed for Week Off records." :
                                "Editing not allowed for Holiday records.";
                    DevExpress.ui.notify(msg, "warning", 2000);
                }
            },
            columns: [
                {
                    dataField: "shiftDate",
                    caption: "Date",
                    dataType: "date",
                    format: "dd/MM/yyyy",
                    width: 100,
                    minWidth: 100
                },
                {
                    dataField: "monthDay",
                    caption: "Day",
                    allowEditing: false,
                    width: 50
                },
                {
                    dataField: "fullName",
                    caption: "Employee",
                    allowEditing: false,
                    minWidth: 120
                },
                {
                    dataField: "branchName",
                    caption: "Branch",
                    allowEditing: false,
                    minWidth: 100
                },
                {
                    dataField: "shiftTime",
                    caption: "Shift Time",
                    allowEditing: false,
                    minWidth: 120
                },
                {
                    dataField: "inTime",
                    caption: "In Time",
                    minWidth: 80,
                    allowEditing: false, // ✅ Read-only
                    cellTemplate: function (container, options) {
                        const value = options.data.inTime && options.data.inTime !== "-"
                            ? new Date(options.data.inTime).toLocaleTimeString('en-GB', {
                                hour: '2-digit',
                                minute: '2-digit'
                            })
                            : "--";
                        $("<div>")
                            .text(value)
                            .css({
                                textAlign: "center",
                                border: "1px solid #ddd",
                                padding: "6px",
                                borderRadius: "4px",
                                backgroundColor: "#f5f5f5",
                                fontSize: "12px"
                            })
                            .appendTo(container);
                    }
                },
                {
                    dataField: "outTime",
                    caption: "Out Time",
                    minWidth: 80,
                    allowEditing: false, // ✅ Read-only
                    cellTemplate: function (container, options) {
                        const value = options.data.outTime && options.data.outTime !== "-"
                            ? new Date(options.data.outTime).toLocaleTimeString('en-GB', {
                                hour: '2-digit',
                                minute: '2-digit'
                            })
                            : "--";
                        $("<div>")
                            .text(value)
                            .css({
                                textAlign: "center",
                                border: "1px solid #ddd",
                                padding: "6px",
                                borderRadius: "4px",
                                backgroundColor: "#f5f5f5",
                                fontSize: "12px"
                            })
                            .appendTo(container);
                    }
                },
                {
                    dataField: "attendanceStatus",
                    caption: "Present Day",
                    width: 100,
                    minWidth: 100,
                    allowEditing: false,
                    cellTemplate: function (container, options) {
                        const status = options.data.attendanceStatus?.trim();
                        let color;
                        let text;

                        if (status === "P") { color = "green"; text = "P"; }
                        else if (status === "HF") { color = "orange"; text = "HF"; }
                        else if (status === "A") { color = "red"; text = "A"; }
                        else if (status === "H") { color = "blue"; text = "H"; }
                        else if (status === "W") { color = "purple"; text = "W"; }
                        else { color = "gray"; text = status; }

                        $("<div>")
                            .text(text)
                            .css({
                                color: color,
                                fontWeight: "bold",
                                textAlign: "center"
                            })
                            .appendTo(container);
                    }
                },
                {
                    dataField: "reason",
                    caption: "Reason",
                    width: 180,
                    minWidth: 180,
                    lookup: {
                        dataSource: [
                            { ID: "Forgot To Punch/Sign", Name: "Forgot To Punch/Sign" },
                            { ID: "Working from Home", Name: "Working from Home" },
                            { ID: "Client Visit", Name: "Client Visit" },
                            { ID: "Training", Name: "Training" },
                            { ID: "Other", Name: "Other" }
                        ],
                        valueExpr: "ID",
                        displayExpr: "Name"
                    },
                    calculateDisplayValue: function (rowData) {
                        return rowData.reason || "--Select--";
                    },
                    allowEditing: function (rowData) {
                        const status = rowData.attendanceStatus?.trim().toLowerCase();
                        return status === "absent" || status === "half day";
                    },
                    editorOptions: function (rowData) {
                        const status = rowData.attendanceStatus?.trim().toLowerCase();
                        return {
                            showClearButton: true,
                            disabled: !(status === "absent" || status === "half day")
                        };
                    },
                    editing: {
                        allowUpdating: true
                    }
                },
                {
                    dataField: "workingHours",
                    caption: "Working Hours",
                    allowEditing: false,
                    minWidth: 120
                },
                {
                    dataField: "dayType",
                    caption: "Day Type",
                    width: 140,
                    minWidth: 140,
                    lookup: {
                        dataSource: [
                            { id: "Full Day", name: "Full Day" },
                            { id: "First Half", name: "First Half" },
                            { id: "Second Half", name: "Second Half" }
                        ],
                        valueExpr: "id",
                        displayExpr: "name"
                    },
                    calculateDisplayValue: function (rowData) {
                        return rowData.dayType || "--Select--";
                    },
                    allowEditing: function (rowData) {
                        const status = rowData.attendanceStatus?.trim().toLowerCase();
                        return status === "absent" || status === "half day";
                    },
                    editorOptions: function (rowData) {
                        const status = rowData.attendanceStatus?.trim().toLowerCase();
                        return {
                            showClearButton: true,
                            disabled: !(status === "absent" || status === "half day")
                        };
                    },
                    editing: {
                        allowUpdating: true
                    }
                }
            ]
        });
    }

</script>
