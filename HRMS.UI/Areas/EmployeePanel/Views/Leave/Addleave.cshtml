@{
    ViewData["Title"] = "Employee Panel";
    Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
    string baseUrl = ViewBag.BaseUrl;
    string apiBase = ViewBag.BaseUrlAPI;
}
<title>Leave Application Form</title>
<!-- Bootstrap CSS -->
<!-- jQuery + Bootstrap + SweetAlert -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #ffffff;
    }

    .form-section {
        padding: 15px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
    }

    .btn-custom {
        background-color: #3e4b6d;
        color: white;
        font-weight: 600;
        padding: 4px 12px;
        border: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-custom:hover {
            background-color: #2c3a57;
        }

        .btn-custom:active,
        .btn-custom:focus {
            background-color: #3e4b6d !important;
            box-shadow: none !important;
            outline: none !important;
        }

    .search-panel-container {
        background-color: #3e4b6d;
        padding: 6px 15px;
        border-radius: 6px;
        margin-bottom: 15px;
    }

    .search-panel-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-heading {
        font-size: 15px;
        color: white;
        margin: 0;
    }

    .form-label {
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 4px;
    }

        .form-label.required::after {
            content: " *";
            color: #dc3545;
            font-weight: bold;
        }

    .form-control-sm, .form-select-sm {
        height: calc(1.5em + .5rem + 2px);
        font-size: 0.875rem;
        padding: .25rem .5rem;
    }

    .text-center-cell {
        text-align: center !important;
    }

        .text-center-cell > div {
            text-align: center !important;
        }

    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: none;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }

    .half-day-dropdown {
        display: none;
    }

    .leave-balance-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

        .leave-balance-table th,
        .leave-balance-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        .leave-balance-table th {
            background-color: #3e4b6d;
            color: white;
            font-size: 13px;
        }

    .badge {
        display: inline-block;
        padding: 0.25em 0.4em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .badge-success {
        color: #fff;
        background-color: #28a745;
    }

    .badge-warning {
        color: #212529;
        background-color: #ffc107;
    }

    .badge-danger {
        color: #fff;
        background-color: #dc3545;
    }

    .badge-secondary {
        color: #fff;
        background-color: #6c757d;
    }

    .badge-info {
        color: #fff;
        background-color: #17a2b8;
    }

    .half-day-checkbox {
        display: none;
    }

    .half-day-info {
        background-color: #e3f2fd;
        border: 1px solid #90caf9;
        padding: 8px;
        border-radius: 4px;
        font-size: 12px;
        color: #1976d2;
        margin-top: 5px;
        display: none;
    }

    .dx-datagrid {
        font-size: 11px !important;
        width: 100% !important;
        max-width: 100% !important;
        overflow-x: auto !important;
    }

    .dx-datagrid-headers {
        width: 100% !important;
    }

    .dx-datagrid-rowsview {
        overflow-x: auto !important;
    }

    .dx-datagrid-content {
        width: 100% !important;
    }

    /* Ensure parent container is properly sized */
    #LeaveDetailsid {
        width: 100% !important;
        max-width: 100% !important;
        overflow: hidden !important;
    }

    .dx-datagrid .dx-row > td {
        font-size: 10px !important;
        padding: 2px 4px !important;
        white-space: nowrap !important;
        text-overflow: ellipsis !important;
        min-width: auto !important;
        max-width: none !important;
    }

    .dx-datagrid-headers .dx-header-row .dx-datagrid-table .dx-row > td {
        font-size: 10px !important;
        padding: 4px 2px !important;
        font-weight: 600;
        white-space: nowrap !important;
        min-width: auto !important;
        max-width: none !important;
    }

    .btn-custom {
        background-color: #3e4b6d !important;
        color: white !important;
        font-weight: 600;
        padding: 4px 12px;
        border: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-custom:hover {
            background-color: #2c3a57 !important;
        }

        .btn-custom:active,
        .btn-custom:focus {
            background-color: #3e4b6d !important;
            box-shadow: none !important;
            outline: none !important;
        }

        .btn-custom:disabled {
            background-color: #3e4b6d !important;
            color: white !important;
            opacity: 0.7;
            cursor: not-allowed;
        }

    #submitid {
        background-color: #3e4b6d !important;
    }

        #submitid:hover {
            background-color: #2c3a57 !important;
        }

        #submitid:focus,
        #submitid:active {
            background-color: #3e4b6d !important;
        }

</style>
<div class="container-fluid">
    <div class="search-panel-wrapper">
        <div class="search-panel-container">
            <div class="search-panel-row">
                <div class="search-heading">Search Panel</div>
                <div class="col-auto">
                    <a href="@Url.Action("LeaveApplication", "Leave", new { area = "EmployeePanel" })" class="btn btn-primary btn-sm">Back</a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="search-panel-wrapper">
            <div class="search-panel-container">
                <div class="search-panel-row">
                    <div class="search-heading">Leave Application:</div>
                </div>
            </div>
        </div>

        <div class="col-md-7">
            <div class="form-section">
                <!-- Row 1 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Application Date:</label>
                        <input type="text" class="form-control" id="applicationDate" readonly>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Employee:</label>
                        <input type="text" class="form-control" id="employedid" readonly>
                    </div>
                </div>

                <!-- Row 2 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Reporting Person:</label>
                        <input type="text" class="form-control" id="repoid" readonly>
                        <input type="hidden" id="reportingManagerId" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Leave:</label>
                        <select class="form-control form-control-sm" id="Leavetypeid">
                            <option value="0">-- Select --</option>
                            <option value="1">Comp Off Leave</option>
                            <option value="2">Half Leave</option>
                            <option value="3">LWP</option>
                            <option value="4">Privilege Leave</option>
                        </select>
                        <span class="error-message" id="leaveTypeError">Please select leave type</span>
                    </div>
                </div>

                <!-- Row 3 - Hidden Application Type -->
                <input type="hidden" id="applicationType" value="Regular" />

                <!-- Row 4 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">From Date:</label>
                        <input type="date" class="form-control" id="formdateid">
                        <span class="error-message" id="fromDateError">Please select from date</span>
                        <span class="error-message" id="pastDateError">Cannot apply leave more than 30 days in the past</span>
                        <span class="error-message" id="attendanceError">You were present on this date. Cannot apply leave.</span>
                        <span class="error-message" id="salaryError">Cannot apply leave as salary has been processed</span>
                        <span class="error-message" id="halfDayCurrentDateError">Half day leave can only be applied for current date</span>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">To Date:</label>
                        <input type="date" class="form-control" id="todateid">
                        <span class="error-message" id="toDateError">Please select to date</span>
                        <span class="error-message" id="dateRangeError">To date cannot be earlier than from date</span>
                    </div>
                </div>

                <!-- Half Day Checkbox Row (New addition) -->
                <div class="row mb-3 half-day-checkbox" id="halfDayCheckboxRow">
                    <div class="col-md-12">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="halfDayCheckbox">
                            <label class="form-check-label" for="halfDayCheckbox">
                                Half day
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Half Day Type Dropdown (Hidden by default) -->
                <div class="row mb-3 half-day-dropdown" id="halfDayTypeRow">
                    <div class="col-md-6">
                        <label class="form-label required">Half Day Type:</label>
                        <select class="form-control form-control-sm" id="halfDayType">
                            <option value="">-- Select Half Day --</option>
                            <option value="first">First Half</option>
                            <option value="second">Second Half</option>
                        </select>
                        <span class="error-message" id="halfDayTypeError">Please select half day type</span>
                    </div>
                </div>

                <!-- Row 5 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">No. of Days:</label>
                        <input type="number" class="form-control" id="nodaysid" min="0.5" step="0.5" readonly>
                        <span class="error-message" id="daysError">Invalid period! Please enter valid days</span>
                        <span class="error-message" id="insufficientBalanceError">Insufficient leave balance</span>
                        <span class="error-message" id="halfDayValidationError">For half day leave, only 0.5 days allowed</span>
                        <span class="error-message" id="lwpMaxLimitError">LWP cannot exceed 30 days</span>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Responsible:</label>
                        <select class="form-control" id="responsibleid">
                            <option value="">-- Select Employee --</option>
                        </select>
                        <span class="error-message" id="responsibleError">Please select responsible person</span>
                    </div>
                </div>

                <!-- Row 6 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label required">Reason:</label>
                        <textarea class="form-control" id="resonid" rows="3"></textarea>
                        <span class="error-message" id="reasonError">Please enter reason for leave</span>
                    </div>
                </div>

                <!-- Buttons -->
                <div class="d-flex justify-content-end flex-wrap gap-2 mt-2">
                    <button type="button" class="btn btn-custom" id="submitid">Submit</button>
                    <button type="button" class="btn btn-custom" id="clearbuttonid">Clear</button>
                </div>
            </div>
        </div>

        <div class="col-md-5">
            <div class="form-section">
                <div class="card-header">
                    <h6 class="mb-0 form-label">Leave Balance</h6>
                </div>
                <div id="Leavebalanceid" style="margin-top: 10px; max-height: 300px; overflow: auto;">Loading...</div>
                <div id="recordSummary" class="text-center mt-2 text-muted"></div>
            </div>

            <!-- Leave Details Section -->
            <div class="form-section">
                <div class="card-header">
                    <h6 class="mb-0 form-label">Leave Details</h6>
                </div>
                <div id="LeaveDetailsid" style="margin-top: 10px; max-height: 400px; overflow-x: auto; overflow-y: auto; width: 100%;">Select date range to view leave details</div>
            </div>
        </div>
    </div>
</div>

<script>
    const apiBase = '@apiBase';
    const Empid = parseInt(localStorage.getItem("EmployeeId"));
    const EmployeeName = localStorage.getItem("EmployeeName");
    const savedCompany = localStorage.getItem('selectedCompany');
    const companyDetails = JSON.parse(savedCompany || '{}');
    const Compid = parseInt(companyDetails.CompanyId);
    let leaveBalanceData = [];
    let gridCallInProgress = false;
    const today = new Date();

    $(document).ready(function () {
        const day = String(today.getDate()).padStart(2, '0');
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const year = today.getFullYear();
        const formattedDate = `${day}-${month}-${year}`;

        $('#applicationDate').val(formattedDate);
        $('#employedid').val(EmployeeName);
        $('#formdateid').prop('readonly', true);
        $('#todateid').prop('readonly', true);
        $('.form-section:has(#LeaveDetailsid)').hide();

        loadReportingPerson();
        loadLeaveBalance();
        loadResponsibleDropdown();

        $('#Leavetypeid').on('change', function () {
            handleLeaveTypeChange();
        });

        $('#formdateid').on('change', function () {
            handleFromDateChange();
        });

        $('#todateid').on('change', function () {
            handleToDateChange();
        });

        $('#halfDayCheckbox').on('change', function () {
            handleHalfDayCheckboxChange();
        });

        $('#halfDayType').on('change', function () {
            handleHalfDayTypeChange();
        });

        $('#submitid').on('click', async function () {
            $(this).prop('disabled', true);
            try {
                await handleSubmit();
            } finally {
                setTimeout(() => {
                    $(this).prop('disabled', false);
                }, 500);
            }
        });

        $('#clearbuttonid').on('click', function () {
            clearForm();
        });
    });

    function handleLeaveTypeChange() {
        const leaveTypeId = $('#Leavetypeid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();

        // Clear all errors and reset form
        $('.error-message').hide();
        $('.form-control, .form-select').removeClass('is-invalid');
        $('#halfDayValidationMessage, #lwpInfoMessage, #compOffInfoMessage').remove();

        // Reset form fields
        $('#formdateid').val('');
        $('#todateid').val('');
        $('#nodaysid').val('').prop('readonly', true);
        $('#halfDayTypeRow').hide();
        $('#halfDayCheckboxRow').hide();
        $('#halfDayCheckbox').prop('checked', false);
        $('#halfDayType').val('');
        $('.form-section:has(#LeaveDetailsid)').hide();

        if (leaveTypeId === "0") {
            $('#formdateid').prop('readonly', true);
            $('#todateid').prop('readonly', true);
            return;
        }

        // Configure fields based on leave type
        switch (leaveTypeName) {
            case 'Half Leave':
                $('#formdateid').prop('readonly', false);
                $('#todateid').prop('readonly', true);
                $('#halfDayTypeRow').show();
                updateHalfDayOptions([], "Select a date to see available half-day options");
                break;

            case 'Comp Off Leave':
                $('#formdateid').prop('readonly', false);
                $('#todateid').prop('readonly', false);
                $('#halfDayCheckboxRow').show();
                $('#nodaysid').after('<div id="compOffInfoMessage" style="color: #17a2b8; font-size: 12px; margin-top: 5px;">Comp Off: Based on overtime work in last 30 days</div>');
                break;

            case 'LWP':
                $('#formdateid').prop('readonly', false);
                $('#todateid').prop('readonly', false);
                $('#halfDayCheckboxRow').show();
                $('#nodaysid').after('<div id="lwpInfoMessage" style="color: #17a2b8; font-size: 12px; margin-top: 5px;">LWP: Maximum 30 days allowed</div>');
                break;

            case 'Privilege Leave':
                $('#formdateid').prop('readonly', false);
                $('#todateid').prop('readonly', false);
                $('#halfDayCheckboxRow').show();
                break;
        }
    }

    function handleFromDateChange() {
        const leaveTypeId = $('#Leavetypeid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
        const fromDate = $('#formdateid').val();

        if (leaveTypeId === "0") {
            $('#formdateid').val('');
            return;
        }

        // Clear previous errors
        $('.error-message').hide();
        $('#formdateid').removeClass('is-invalid');
        $('#halfDayValidationMessage, #compOffInfoMessage').remove();

        if (!fromDate) return;

        // Handle Half Leave
        if (leaveTypeName === 'Half Leave') {
            $('#todateid').val(fromDate);
            $('#nodaysid').val('0.5');
            validateHalfLeave(fromDate);
            loadLeaveDetailsGrid();
            return;
        }

        // Handle Comp Off Leave
        if (leaveTypeName === 'Comp Off Leave') {
            validateCompOffLeave(fromDate);
        }

        // Handle other leave types
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');
        if (isHalfDayChecked) {
            $('#todateid').val(fromDate).prop('readonly', true);
            validateHalfDayForDate(fromDate, leaveTypeName);
        } else {
            $('#todateid').prop('readonly', false);
            validateFullDayLeave(fromDate, leaveTypeName);
        }

        calculateDaysFromDates();
        loadLeaveDetailsGrid();
    }

    function handleToDateChange() {
        const leaveTypeId = $('#Leavetypeid').val();
        if (leaveTypeId === "0") {
            $('#todateid').val('');
            return;
        }

        calculateDaysFromDates();
        loadLeaveDetailsGrid();
    }

    function handleHalfDayCheckboxChange() {
        const isChecked = $('#halfDayCheckbox').is(':checked');
        const fromDate = $('#formdateid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();

        if (isChecked) {
            $('#halfDayTypeRow').show();
            if (fromDate) {
                $('#todateid').val(fromDate).prop('readonly', true);
                validateHalfDayForDate(fromDate, leaveTypeName);
            } else {
                $('#todateid').prop('readonly', true);
            }
        } else {
            $('#halfDayTypeRow').hide();
            $('#todateid').prop('readonly', false);
            $('#halfDayType').val('');
            $('#halfDayValidationMessage').remove();
            if (fromDate) {
                validateFullDayLeave(fromDate, leaveTypeName);
            }
        }

        calculateDaysFromDates();
        loadLeaveDetailsGrid();
    }

    function handleHalfDayTypeChange() {
        $('#halfDayTypeError').hide();
        $('#halfDayType').removeClass('is-invalid');
        loadLeaveDetailsGrid();
    }

    function validateHalfLeave(selectedDate) {
        const payload = {
            BranchId: 0,
            EmpId: Empid,
            StartDate: selectedDate,
            EndDate: selectedDate,
            RecordType: "All"
        };

        const formData = new FormData();
        formData.append("BranchId", "0");
        formData.append("EmpId", Empid);
        formData.append("StartDate", selectedDate);
        formData.append("EndDate", selectedDate);
        formData.append("RecordType", "All");

        $.ajax({
            url: apiBase + '/EmployeeInOut/GetEmployeeInOutReport',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response?.isSuccess && response.data && response.data.length > 0) {
                    const attendanceData = response.data[0];
                    validateHalfDayByAttendanceData(attendanceData, selectedDate, 'Half Leave');
                } else {
                    updateHalfDayOptions(['first', 'second'], "No attendance record found. You can apply for either half.");
                }
            },
            error: function (xhr, status, error) {
                console.error('Error checking attendance:', error);
                updateHalfDayOptions(['first', 'second'], "Error checking attendance. You can apply for either half.");
            }
        });
    }

    function validateCompOffLeave(selectedDate) {
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        const startDate = thirtyDaysAgo.toISOString().split('T')[0];
        const endDate = new Date().toISOString().split('T')[0];

        const formData = new FormData();
        formData.append("BranchId", "0");
        formData.append("EmpId", Empid);
        formData.append("StartDate", startDate);
        formData.append("EndDate", endDate);
        formData.append("RecordType", "All");

        $.ajax({
            url: apiBase + '/EmployeeInOut/GetEmployeeInOutReport',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response?.isSuccess && response.data && response.data.length > 0) {
                    checkCompOffEligibility(response.data, selectedDate);
                } else {
                    showCompOffError("No attendance records found for last 30 days. Comp Off not applicable.");
                }
            },
            error: function (xhr, status, error) {
                console.error('Error checking comp off eligibility:', error);
                showCompOffError("Error checking comp off eligibility.");
            }
        });
    }

    function checkCompOffEligibility(attendanceData, selectedDate) {
        // Find days where employee worked on weekoffs or holidays
        const eligibleDays = attendanceData.filter(record => {
            const statusReason = record.statusReason || '';
            const hasWorked = record.workingHours > 0;
            const isWeekoffOrHoliday = statusReason.includes('Sunday') ||
                                     statusReason.includes('Saturday') ||
                                     statusReason.includes('Holiday') ||
                                     record.attendanceStatus === 'W';
            return hasWorked && isWeekoffOrHoliday;
        });

        if (eligibleDays.length === 0) {
            showCompOffError("No overtime work found on weekoffs/holidays in last 30 days. Comp Off not applicable.");
            return;
        }

        // Calculate available comp off days
        let availableCompOffDays = 0;
        eligibleDays.forEach(day => {
            if (day.workingHours >= 9) {
                availableCompOffDays += 1; // Full day
            } else if (day.workingHours >= 4.5) {
                availableCompOffDays += 0.5; // Half day
            }
        });

        if (availableCompOffDays === 0) {
            showCompOffError("No eligible comp off days available. Minimum 4.5 hours work required.");
            return;
        }

        // Show success message
        $('#compOffInfoMessage').remove();
        $('#nodaysid').after(`<div id="compOffInfoMessage" style="color: #28a745; font-size: 12px; margin-top: 5px;">Comp Off Available: ${availableCompOffDays} days based on overtime work</div>`);

        // Now validate the selected date
        validateFullDayLeave(selectedDate, 'Comp Off Leave');
    }

    function showCompOffError(message) {
        $('#formdateid').addClass('is-invalid');
        $('#compOffInfoMessage').remove();
        $('#formdateid').after(`<div id="compOffInfoMessage" class="error-message" style="display: block; color: #dc3545; font-size: 12px; margin-top: 5px;">${message}</div>`);
    }

    function validateHalfDayForDate(selectedDate, leaveTypeName) {
        const formData = new FormData();
        formData.append("BranchId", "0");
        formData.append("EmpId", Empid);
        formData.append("StartDate", selectedDate);
        formData.append("EndDate", selectedDate);
        formData.append("RecordType", "All");

        $.ajax({
            url: apiBase + '/EmployeeInOut/GetEmployeeInOutReport',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response?.isSuccess && response.data && response.data.length > 0) {
                    const attendanceData = response.data[0];
                    validateHalfDayByAttendanceData(attendanceData, selectedDate, leaveTypeName);
                } else {
                    if (leaveTypeName === 'LWP') {
                        updateHalfDayOptions(['first', 'second'], "No attendance record. LWP can be applied for either half.");
                    } else {
                        updateHalfDayOptions(['first', 'second'], "No attendance record found. You can apply for either half.");
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error('Error checking attendance:', error);
                updateHalfDayOptions(['first', 'second'], "Error checking attendance. You can apply for either half.");
            }
        });
    }

    function validateFullDayLeave(selectedDate, leaveTypeName) {
        const formData = new FormData();
        formData.append("BranchId", "0");
        formData.append("EmpId", Empid);
        formData.append("StartDate", selectedDate);
        formData.append("EndDate", selectedDate);
        formData.append("RecordType", "All");

        $.ajax({
            url: apiBase + '/EmployeeInOut/GetEmployeeInOutReport',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response?.isSuccess && response.data && response.data.length > 0) {
                    const attendanceData = response.data[0];
                    const workingHours = attendanceData.workingHours || 0;
                    const attendanceStatus = attendanceData.attendanceStatus?.trim();

                    // Remove previous validation messages
                    $('#attendanceError, #halfDayCurrentDateError, #pastDateError').hide();
                    $('#formdateid').removeClass('is-invalid');

                    if (leaveTypeName === 'LWP') {
                        // LWP can be applied regardless of attendance
                        return;
                    }

                    if (attendanceStatus === 'P' || workingHours > 0) {
                        if (workingHours >= 9) {
                            $('#formdateid').addClass('is-invalid');
                            $('#attendanceError').text(`You worked ${workingHours} hours on ${new Date(selectedDate).toLocaleDateString()}. Cannot apply full day leave.`).show();
                        } else if (workingHours >= 4.5) {
                            $('#formdateid').addClass('is-invalid');
                            $('#attendanceError').text(`You worked ${workingHours} hours on ${new Date(selectedDate).toLocaleDateString()}. You can apply for half day leave only.`).show();
                        }
                    }
                } else {
                    // No attendance record found - leave can be applied
                    if (leaveTypeName !== 'LWP') {
                        // For non-LWP leaves, this is acceptable
                    }
                }
            },
            error: function (xhr, status, error) {
                console.error('Error checking attendance:', error);
            }
        });
    }

    function validateHalfDayByAttendanceData(attendanceData, selectedDate, leaveTypeName) {
        const workingHours = attendanceData.workingHours || 0;
        const attendanceStatus = attendanceData.attendanceStatus?.trim();
        const inTime = attendanceData.inTime && attendanceData.inTime !== '-' ? new Date(attendanceData.inTime) : null;
        const outTime = attendanceData.outTime && attendanceData.outTime !== '-' ? new Date(attendanceData.outTime) : null;

        let allowedHalves = [];
        let validationMessage = "";

        // For LWP, always allow both halves regardless of attendance
        if (leaveTypeName === 'LWP') {
            allowedHalves = ['first', 'second'];
            validationMessage = "LWP: You can select either first half or second half.";
            updateHalfDayOptions(allowedHalves, validationMessage);
            return;
        }

        // If completely absent, allow both halves
        if (attendanceStatus === 'A' && workingHours === 0) {
            allowedHalves = ['first', 'second'];
            validationMessage = "You were absent. You can apply for either half day leave.";
            updateHalfDayOptions(allowedHalves, validationMessage);
            return;
        }

        // If worked full day (9+ hours), no half day leave allowed
        if (workingHours >= 9) {
            allowedHalves = [];
            validationMessage = `You worked ${workingHours} hours (full day). Half day leave cannot be applied.`;
            updateHalfDayOptions(allowedHalves, validationMessage);
            return;
        }

        // If worked between 4.5 to 9 hours, determine which half was worked
        if (workingHours >= 4.5 && workingHours < 9) {
            if (inTime && outTime) {
                const shiftMidHour = 13; // Assuming 1 PM as mid-shift
                const inHour = inTime.getHours();
                const outHour = outTime.getHours();

                if (inHour < shiftMidHour && outHour <= shiftMidHour) {
                    // Worked in first half
                    allowedHalves = ['second'];
                    validationMessage = `You worked ${workingHours} hours in first half. You can apply for second half leave.`;
                } else if (inHour >= shiftMidHour && outHour > shiftMidHour) {
                    // Worked in second half
                    allowedHalves = ['first'];
                    validationMessage = `You worked ${workingHours} hours in second half. You can apply for first half leave.`;
                } else {
                    // Worked across both halves
                    allowedHalves = [];
                    validationMessage = `You worked ${workingHours} hours across both halves. Half day leave cannot be applied.`;
                }
            } else {
                allowedHalves = [];
                validationMessage = `You worked ${workingHours} hours. Half day leave cannot be applied.`;
            }
        } else if (workingHours > 0 && workingHours < 4.5) {
            // Less than 4.5 hours worked, determine which half
            if (inTime) {
                const inHour = inTime.getHours();
                if (inHour < 13) {
                    allowedHalves = ['second'];
                    validationMessage = `You worked ${workingHours} hours in first half. You can apply for second half leave.`;
                } else {
                    allowedHalves = ['first'];
                    validationMessage = `You worked ${workingHours} hours in second half. You can apply for first half leave.`;
                }
            } else {
                allowedHalves = ['first', 'second'];
                validationMessage = `You worked ${workingHours} hours. You can apply for either half day leave.`;
            }
        } else {
            // No working hours recorded
            allowedHalves = ['first', 'second'];
            validationMessage = "No working hours recorded. You can apply for either half day leave.";
        }

        updateHalfDayOptions(allowedHalves, validationMessage);
    }

    function updateHalfDayOptions(allowedHalves, validationMessage = "") {
        const halfDayDropdown = $('#halfDayType');

        halfDayDropdown.empty().append('<option value="">-- Select Half Day --</option>');
        halfDayDropdown.removeClass('is-invalid');
        $('#halfDayTypeError').hide();
        $('#halfDayValidationMessage').remove();

        if (allowedHalves.length === 0) {
            halfDayDropdown.prop('disabled', true);
            if (validationMessage) {
                halfDayDropdown.after(`<div id="halfDayValidationMessage" class="error-message" style="display: block; color: #dc3545; font-size: 12px; margin-top: 5px;">${validationMessage}</div>`);
            }
        } else {
            halfDayDropdown.prop('disabled', false);
            if (allowedHalves.includes('first')) {
                halfDayDropdown.append('<option value="first">First Half</option>');
            }
            if (allowedHalves.includes('second')) {
                halfDayDropdown.append('<option value="second">Second Half</option>');
            }
            if (validationMessage) {
                halfDayDropdown.after(`<div id="halfDayValidationMessage" style="color: #28a745; font-size: 12px; margin-top: 5px;">${validationMessage}</div>`);
            }
        }

        loadLeaveDetailsGrid();
    }

       function loadLeaveDetailsGrid() {
        const leaveTypeId = $('#Leavetypeid').val();
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const shouldShowGrid = leaveTypeId !== "0" && fromDate && toDate;

        if (!shouldShowGrid) {
            $('.form-section:has(#LeaveDetailsid)').hide();
            return;
        }

        // Always show the container
        $('.form-section:has(#LeaveDetailsid)').show();

        const formData = new FormData();
        formData.append("BranchId", "0");
        formData.append("EmpId", Empid);
        formData.append("StartDate", fromDate);
        formData.append("EndDate", toDate);
        formData.append("RecordType", "All");

        const gridInstance = $("#LeaveDetailsid").dxDataGrid("instance");
        if (gridInstance) {
            gridInstance.dispose();
        }

        $.ajax({
            url: apiBase + '/EmployeeInOut/GetEmployeeInOutReport',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response?.isSuccess && response.data && response.data.length > 0) {
                    const data = response.data;
                    $("#LeaveDetailsid").dxDataGrid({
                        dataSource: data,
                        showBorders: true,
                        columnAutoWidth: true,
                        wordWrapEnabled: false,
                        width: '100%',
                        height: 'auto',
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        columns: [
                            {
                                dataField: "shiftDate",
                                caption: "Date",
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value) return "";
                                    return new Date(cellInfo.value).toLocaleDateString("en-IN", {
                                        day: "2-digit",
                                        month: "2-digit",
                                        year: "numeric"
                                    });
                                }
                            },
                            {
                                dataField: "monthDay",
                                caption: "Day",
                                cssClass: "text-center-cell"
                            },
                            {
                                caption: "Status",
                                cssClass: "text-center-cell",
                                calculateCellValue: function (data) {
                                    const leaveType = $("#Leavetypeid option:selected").text();
                                    const isHalfDay = $('#halfDayCheckbox').is(':checked') || leaveType === 'Half Leave';
                                    const halfDayType = $('#halfDayType').val();
                                    if (isHalfDay && halfDayType) {
                                        return `${leaveType} (${halfDayType === 'first' ? 'First Half' : 'Second Half'})`;
                                    }
                                    return leaveType;
                                }
                            },
                            {
                                dataField: "inTime",
                                caption: "In",
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value || cellInfo.value === '-') return "-";
                                    return new Date(cellInfo.value).toLocaleTimeString("en-IN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: true
                                    });
                                }
                            },
                            {
                                dataField: "outTime",
                                caption: "Out",
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value || cellInfo.value === '-') return "-";
                                    return new Date(cellInfo.value).toLocaleTimeString("en-IN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: true
                                    });
                                }
                            },
                            {
                                dataField: "workingHours",
                                caption: "WH",
                                cssClass: "text-center-cell"
                            }
                        ],
                        paging: {
                            enabled: true,
                            pageSize: 7
                        }
                    });
                } else {
                    $("#LeaveDetailsid").html('<div class="text-muted text-center">No attendance records found for selected date range</div>');
                }
            },
            error: function (xhr, status, error) {
                $("#LeaveDetailsid").html('<div class="text-danger text-center">Error loading attendance details</div>');
                console.error('Error loading attendance details:', error);
            }
        });
    }


    function calculateDaysFromDates() {
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');

        $('#dateRangeError').hide();
        $('#todateid').removeClass('is-invalid');

        if (fromDate && toDate) {
            const startDate = new Date(fromDate);
            const endDate = new Date(toDate);

            if (endDate >= startDate) {
                const timeDiff = endDate.getTime() - startDate.getTime();
                const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;

                if (leaveTypeName === 'Half Leave') {
                    $('#nodaysid').val('0.5');
                } else if (isHalfDayChecked) {
                    const halfDays = daysDiff * 0.5;
                    $('#nodaysid').val(halfDays);
                } else {
                    $('#nodaysid').val(daysDiff);
                }
            } else {
                $('#todateid').addClass('is-invalid');
                $('#dateRangeError').show();
                $('#nodaysid').val('');
            }
        }
    }

    // Validation functions
    const leaveTypeMapping = {
        1: "Comp Off Leave",
        2: "Half Leave",
        3: "LWP",
        4: "Privilege Leave"
    };

    function getLeaveBalance(leaveTypeId) {
        const leaveTypeName = leaveTypeMapping[leaveTypeId];
        if (!leaveTypeName) return 0;

        const balance = leaveBalanceData.find(item => item.leaveType === leaveTypeName);
        return balance ? parseFloat(balance.leaveValue || 0) : 0;
    }

    function validateLeaveBalance(leaveTypeId, requestedDays) {
        const leaveTypeName = leaveTypeMapping[leaveTypeId];

        if (leaveTypeName === "LWP") {
            if (requestedDays > 30) {
                return {
                    isValid: false,
                    message: `LWP cannot exceed 30 days! Requested: ${requestedDays} days`
                };
            }
            return { isValid: true, message: "" };
        }

        if (leaveTypeName === "Comp Off Leave") {
            // For comp off, we don't check balance from leave balance table
            // as it's based on overtime work
            return { isValid: true, message: "" };
        }

        const availableBalance = getLeaveBalance(leaveTypeId);
        if (requestedDays > availableBalance) {
            return {
                isValid: false,
                message: `Insufficient balance! Available: ${availableBalance}, Requested: ${requestedDays}`
            };
        }

        return { isValid: true, message: "" };
    }

    function checkDuplicateLeaveApplication(fromDate, toDate) {
        return new Promise((resolve, reject) => {
            let filter = {
                LeaveType: 0,
                Status: null,
                SearchFor: "",
                Emplooyeid: Empid,
                CompId: Compid
            };

            $.ajax({
                url: apiBase + '/LeaveApplication/GetLeaveApplications',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(filter),
                success: function (data) {
                    if (data.isSuccess && data.data && data.data.length > 0) {
                        const selectedFromDate = new Date(fromDate);
                        const selectedToDate = new Date(toDate);

                        const duplicateLeaves = data.data.filter(leave => {
                            const leaveFromDate = new Date(leave.fromDate);
                            const leaveToDate = new Date(leave.todate);
                            const isOverlapping = (selectedFromDate <= leaveToDate && selectedToDate >= leaveFromDate);
                            const isActiveStatus = leave.status === 'Pending' || leave.status === 'Approved';
                            return isOverlapping && isActiveStatus;
                        });

                        resolve({
                            hasDuplicate: duplicateLeaves.length > 0,
                            duplicateLeaves: duplicateLeaves
                        });
                    } else {
                        resolve({
                            hasDuplicate: false,
                            duplicateLeaves: []
                        });
                    }
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function checkSalaryProcessed(fromDate) {
        return new Promise((resolve, reject) => {
            const leaveDate = new Date(fromDate);
            const month = leaveDate.getMonth() + 1;
            const year = leaveDate.getFullYear();
            const requestData = {
                Month: parseInt(month),
                Year: parseInt(year),
                EmployeeCodes: 0,
                BranchId: 0
            };

            $.ajax({
                url: apiBase + '/MonthlySalaryDetailsAPI/GetAll',
                type: "POST",
                data: JSON.stringify(requestData),
                contentType: "application/json",
                success: function (response) {
                    resolve({
                        isProcessed: response.isSuccess && response.data && response.data.length > 0,
                        month: month,
                        year: year
                    });
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function loadReportingPerson() {
        $.ajax({
            url: `${apiBase}/LeaveApplication/GetReportingperson?Empid=${Empid}`,
            method: 'POST',
            dataType: 'json',
            success: function (response) {
                if (response.isSuccess && response.data) {
                    $('#repoid').val(response.data.fullName);
                    $('#reportingManagerId').val(response.data.id);
                }
            },
            error: function() {
                console.error('Error loading reporting person');
            }
        });
    }

    function loadLeaveBalance() {
        $.ajax({
            url: `${apiBase}/LeaveApplication/GetLeaveType`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ Compid: Compid, Empid: Empid }),
            success: function (response) {
                if (response.isSuccess && response.data && response.data.length > 0) {
                    leaveBalanceData = response.data;

                    $("#Leavebalanceid").dxDataGrid({
                        dataSource: response.data,
                        keyExpr: "leaveType",
                        showBorders: true,
                        columnAutoWidth: true,
                        columns: [
                            { dataField: "leaveType", caption: "Leave Type", cssClass: "text-center-cell" },
                            { dataField: "leaveValue", caption: "Balance", cssClass: "text-center-cell" }
                        ]
                    });
                } else {
                    $("#Leavebalanceid").html('<div class="text-muted text-center">No leave balance found</div>');
                }
            },
            error: function () {
                Swal.fire("Error", "Could not load leave balance", "error");
            }
        });
    }

    function loadResponsibleDropdown() {
        $.ajax({
            url: `${apiBase}/CompOffAPI/ReportingPersonEmpVise?Compid=${Compid}&Empid=${Empid}`,
            method: 'POST',
            success: function (res) {
                const dropdown = $('#responsibleid');
                dropdown.empty().append('<option value="">-- Select Employee --</option>');
                if (res.isSuccess && res.data?.length > 0) {
                    res.data.forEach(item => {
                        dropdown.append(`<option value="${item.reportingPersonId}">${item.reportingPersonName}</option>`);
                    });
                }
            },
            error: function () {
                console.error('Error loading responsible dropdown');
            }
        });
    }

    async function handleSubmit() {
        $('.error-message').hide();
        $('.form-control, .form-select').removeClass('is-invalid');

        let hasError = false;

        const leaveType = $('#Leavetypeid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
        const noOfDays = parseFloat($('#nodaysid').val());
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const reason = $('#resonid').val().trim();
        const responsible = $('#responsibleid').val();
        const halfDayType = $('#halfDayType').val();

        // Basic validations
        if (leaveType === "0") {
            $('#Leavetypeid').addClass('is-invalid');
            $('#leaveTypeError').show();
            hasError = true;
        }

        if (!fromDate) {
            $('#formdateid').addClass('is-invalid');
            $('#fromDateError').show();
            hasError = true;
        }

        if (!toDate) {
            $('#todateid').addClass('is-invalid');
            $('#toDateError').show();
            hasError = true;
        }

        if (fromDate && toDate) {
            const startDate = new Date(fromDate);
            const endDate = new Date(toDate);

            if (endDate < startDate) {
                $('#todateid').addClass('is-invalid');
                $('#dateRangeError').show();
                hasError = true;
            }
        }

        if (!$('#nodaysid').val()) {
            $('#nodaysid').addClass('is-invalid');
            $('#daysError').text('Please calculate number of days').show();
            hasError = true;
        }

        if (!reason) {
            $('#resonid').addClass('is-invalid');
            $('#reasonError').show();
            hasError = true;
        }

        if (!responsible) {
            $('#responsibleid').addClass('is-invalid');
            $('#responsibleError').show();
            hasError = true;
        }

        // Half day validations
        if (leaveTypeName === 'Half Leave' || $('#halfDayCheckbox').is(':checked')) {
            if (!halfDayType) {
                $('#halfDayType').addClass('is-invalid');
                $('#halfDayTypeError').show();
                hasError = true;
            }

            if (leaveTypeName === 'Half Leave' && noOfDays !== 0.5) {
                $('#nodaysid').addClass('is-invalid');
                $('#halfDayValidationError').show();
                hasError = true;
            }
        }

        // Leave balance validation
        if (leaveType !== "0" && !isNaN(noOfDays) && noOfDays > 0) {
            const balanceValidation = validateLeaveBalance(leaveType, noOfDays);
            if (!balanceValidation.isValid) {
                $('#nodaysid').addClass('is-invalid');
                $('#insufficientBalanceError').text(balanceValidation.message).show();
                hasError = true;
            }
        }

        // Date validations
        const inputDate = new Date(fromDate);
        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);
        inputDate.setHours(0, 0, 0, 0);

        const daysDifference = Math.ceil((currentDate.getTime() - inputDate.getTime()) / (1000 * 3600 * 24));

        if (daysDifference > 30) {
            $('#formdateid').addClass('is-invalid');
            $('#pastDateError').text('Cannot apply leave more than 30 days in the past').show();
            hasError = true;
        }

        if (hasError) {
            return;
        }

        try {
            // Check for duplicate applications
            const duplicateResult = await checkDuplicateLeaveApplication(fromDate, toDate);
            if (duplicateResult.hasDuplicate) {
                const duplicate = duplicateResult.duplicateLeaves[0];
                const statusText = duplicate.status === 'Pending' ? 'Pending' : 'Approved';
                Swal.fire({
                    title: "Leave Already Applied",
                    text: `You have already applied for leave on these dates. Status: ${statusText}`,
                    icon: "warning",
                    confirmButtonText: "OK"
                });
                return;
            }

            // Check salary processing for past months
            if (inputDate < currentDate) {
                const inputMonth = inputDate.getMonth();
                const currentMonth = currentDate.getMonth();
                const inputYear = inputDate.getFullYear();
                const currentYear = currentDate.getFullYear();

                if (inputYear < currentYear || (inputYear === currentYear && inputMonth < currentMonth)) {
                    const salaryResult = await checkSalaryProcessed(fromDate);
                    if (salaryResult.isProcessed) {
                        $('#formdateid').addClass('is-invalid');
                        $('#salaryError').text(`Cannot apply leave for ${salaryResult.month}/${salaryResult.year} as salary has already been processed`).show();
                        return;
                    }
                }
            }

            // Prepare and submit data
            const payload = {
                EmplooyeId: Empid,
                CompId: Compid,
                ReportingManagerId: parseInt($('#reportingManagerId').val()),
                LeaveType: parseInt(leaveType),
                ApplicationType: 'Regular',
                ApplicationDate: new Date(),
                FromDate: fromDate,
                Todate: toDate,
                No_Of_Date: noOfDays,
                Reason: reason,
                Responsibleperson: parseInt(responsible),
                Day: halfDayType || null,
                Cancel_Weekoff: false,
                Send_Intimate: "false",
                LeaveStatus: "Pending"
            };

            $.ajax({
                url: apiBase + '/LeaveApplication/AddLeaveapplication',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (response) {
                    if (response.isSuccess) {
                        Swal.fire({
                            title: "Success",
                            text: response.responseMessage,
                            icon: "success",
                            customClass: { popup: 'swal2-small' }
                        });
                        clearForm();
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: response.responseMessage,
                            icon: "error",
                            customClass: { popup: 'swal2-small' }
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        title: "Error",
                        text: "An error occurred while submitting",
                        icon: "error",
                        customClass: { popup: 'swal2-small' }
                    });
                }
            });

        } catch (err) {
            console.error('Submission error:', err);
            Swal.fire({
                title: "Error",
                text: "Unexpected error occurred while submitting",
                icon: "error",
                customClass: { popup: 'swal2-small' }
            });
        }
    }

    function clearForm() {
        // Reset all form fields
        $('#Leavetypeid').val('0');
        $('#formdateid').val('').prop('readonly', true);
        $('#todateid').val('').prop('readonly', true);
        $('#nodaysid').val('').prop('readonly', true);
        $('#resonid').val('');
        $('#responsibleid').val('');
        $('#halfDayType').val('');
        $('#halfDayCheckbox').prop('checked', false);

        // Hide conditional elements
        $('#halfDayTypeRow').hide();
        $('#halfDayCheckboxRow').hide();
        $('.form-section:has(#LeaveDetailsid)').hide();

        // Remove validation messages and classes
        $('.form-control, .form-select').removeClass('is-invalid');
        $('.error-message').hide();
        $('#halfDayValidationMessage, #lwpInfoMessage, #compOffInfoMessage').remove();

        // Reset grid
        const gridInstance = $("#LeaveDetailsid").dxDataGrid("instance");
        if (gridInstance) {
            gridInstance.dispose();
        }
        $("#LeaveDetailsid").html('Select date range to view leave details');

        // Reset flags
        gridCallInProgress = false;
    }
    </script>