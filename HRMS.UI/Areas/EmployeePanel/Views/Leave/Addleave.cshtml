@{
    ViewData["Title"] = "Employee Panel";
    Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
    string baseUrl = ViewBag.BaseUrl;
    string apiBase = ViewBag.BaseUrlAPI;
}
<title>Leave Application Form</title>
<!-- Bootstrap CSS -->
<!-- jQuery + Bootstrap + SweetAlert -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #ffffff;
    }

    .form-section {
        padding: 15px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
    }

    .btn-custom {
        background-color: #3e4b6d;
        color: white;
        font-weight: 600;
        padding: 4px 12px;
        border: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-custom:hover {
            background-color: #2c3a57;
        }

        .btn-custom:active,
        .btn-custom:focus {
            background-color: #3e4b6d !important;
            box-shadow: none !important;
            outline: none !important;
        }

    .search-panel-container {
        background-color: #3e4b6d;
        padding: 6px 15px;
        border-radius: 6px;
        margin-bottom: 15px;
    }

    .search-panel-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-heading {
        font-size: 15px;
        color: white;
        margin: 0;
    }

    .form-label {
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 4px;
    }

        .form-label.required::after {
            content: " *";
            color: #dc3545;
            font-weight: bold;
        }

    .form-control-sm, .form-select-sm {
        height: calc(1.5em + .5rem + 2px);
        font-size: 0.875rem;
        padding: .25rem .5rem;
    }

    .text-center-cell {
        text-align: center !important;
    }

        .text-center-cell > div {
            text-align: center !important;
        }

    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: none;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }

    .half-day-dropdown {
        display: none;
    }

    .leave-balance-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

        .leave-balance-table th,
        .leave-balance-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        .leave-balance-table th {
            background-color: #3e4b6d;
            color: white;
            font-size: 13px;
        }

    .badge {
        display: inline-block;
        padding: 0.25em 0.4em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .badge-success {
        color: #fff;
        background-color: #28a745;
    }

    .badge-warning {
        color: #212529;
        background-color: #ffc107;
    }

    .badge-danger {
        color: #fff;
        background-color: #dc3545;
    }

    .badge-secondary {
        color: #fff;
        background-color: #6c757d;
    }

    .badge-info {
        color: #fff;
        background-color: #17a2b8;
    }

    .half-day-checkbox {
        display: none;
    }

    .half-day-info {
        background-color: #e3f2fd;
        border: 1px solid #90caf9;
        padding: 8px;
        border-radius: 4px;
        font-size: 12px;
        color: #1976d2;
        margin-top: 5px;
        display: none;
    }

    .dx-datagrid {
        font-size: 11px !important;
        width: 100% !important;
        max-width: 100% !important;
        overflow-x: auto !important;
    }

    .dx-datagrid-headers {
        width: 100% !important;
    }

    .dx-datagrid-rowsview {
        overflow-x: auto !important;
    }

    .dx-datagrid-content {
        width: 100% !important;
    }

    /* Ensure parent container is properly sized */
    #LeaveDetailsid {
        width: 100% !important;
        max-width: 100% !important;
        overflow: hidden !important;
    }

    .dx-datagrid .dx-row > td {
        font-size: 10px !important;
        padding: 2px 4px !important;
        white-space: nowrap !important;
        text-overflow: ellipsis !important;
        min-width: auto !important;
        max-width: none !important;
    }

    .dx-datagrid-headers .dx-header-row .dx-datagrid-table .dx-row > td {
        font-size: 10px !important;
        padding: 4px 2px !important;
        font-weight: 600;
        white-space: nowrap !important;
        min-width: auto !important;
        max-width: none !important;
    }

    .btn-custom {
        background-color: #3e4b6d !important;
        color: white !important;
        font-weight: 600;
        padding: 4px 12px;
        border: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-custom:hover {
            background-color: #2c3a57 !important;
        }

        .btn-custom:active,
        .btn-custom:focus {
            background-color: #3e4b6d !important;
            box-shadow: none !important;
            outline: none !important;
        }

        .btn-custom:disabled {
            background-color: #3e4b6d !important;
            color: white !important;
            opacity: 0.7;
            cursor: not-allowed;
        }

    #submitid {
        background-color: #3e4b6d !important;
    }

        #submitid:hover {
            background-color: #2c3a57 !important;
        }

        #submitid:focus,
        #submitid:active {
            background-color: #3e4b6d !important;
        }

</style>
<div class="container-fluid">
    <div class="search-panel-wrapper">
        <div class="search-panel-container">
            <div class="search-panel-row">
                <div class="search-heading">Search Panel</div>
                <div class="col-auto">
                    <a href="@Url.Action("LeaveApplication", "Leave", new { area = "EmployeePanel" })" class="btn btn-primary btn-sm">Back</a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="search-panel-wrapper">
            <div class="search-panel-container">
                <div class="search-panel-row">
                    <div class="search-heading">Leave Application:</div>
                </div>
            </div>
        </div>

        <div class="col-md-7">
            <div class="form-section">
                <!-- Row 1 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Application Date:</label>
                        <input type="text" class="form-control" id="applicationDate" readonly>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Employee:</label>
                        <input type="text" class="form-control" id="employedid" readonly>
                    </div>
                </div>

                <!-- Row 2 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Reporting Person:</label>
                        <input type="text" class="form-control" id="repoid" readonly>
                        <input type="hidden" id="reportingManagerId" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Leave:</label>
                        <select class="form-control form-control-sm" id="Leavetypeid">
                            <option value="0">-- Select --</option>
                            <option value="1">Comp Off Leave</option>
                            <option value="2">Half Leave</option>
                            <option value="3">LWP</option>
                            <option value="4">Privilege Leave</option>
                        </select>
                        <span class="error-message" id="leaveTypeError">Please select leave type</span>
                    </div>
                </div>

                <!-- Row 3 - Hidden Application Type -->
                <input type="hidden" id="applicationType" value="Regular" />

                <!-- Row 4 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">From Date:</label>
                        <input type="date" class="form-control" id="formdateid">
                        <span class="error-message" id="fromDateError">Please select from date</span>
                        <span class="error-message" id="pastDateError">Cannot apply leave more than 30 days in the past</span>
                        <span class="error-message" id="attendanceError">You were present on this date. Cannot apply leave.</span>
                        <span class="error-message" id="salaryError">Cannot apply leave as salary has been processed</span>
                        <span class="error-message" id="halfDayCurrentDateError">Half day leave can only be applied for current date</span>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">To Date:</label>
                        <input type="date" class="form-control" id="todateid">
                        <span class="error-message" id="toDateError">Please select to date</span>
                        <span class="error-message" id="dateRangeError">To date cannot be earlier than from date</span>
                    </div>
                </div>

                <!-- Half Day Checkbox Row (New addition) -->
                <div class="row mb-3 half-day-checkbox" id="halfDayCheckboxRow">
                    <div class="col-md-12">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="halfDayCheckbox">
                            <label class="form-check-label" for="halfDayCheckbox">
                                Half day
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Half Day Type Dropdown (Hidden by default) -->
                <div class="row mb-3 half-day-dropdown" id="halfDayTypeRow">
                    <div class="col-md-6">
                        <label class="form-label required">Half Day Type:</label>
                        <select class="form-control form-control-sm" id="halfDayType">
                            <option value="">-- Select Half Day --</option>
                            <option value="first">First Half</option>
                            <option value="second">Second Half</option>
                        </select>
                        <span class="error-message" id="halfDayTypeError">Please select half day type</span>
                    </div>
                </div>

                <!-- Row 5 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">No. of Days:</label>
                        <input type="number" class="form-control" id="nodaysid" min="0.5" step="0.5" readonly>
                        <span class="error-message" id="daysError">Invalid period! Please enter valid days</span>
                        <span class="error-message" id="insufficientBalanceError">Insufficient leave balance</span>
                        <span class="error-message" id="halfDayValidationError">For half day leave, only 0.5 days allowed</span>
                        <span class="error-message" id="lwpMaxLimitError">LWP cannot exceed 30 days</span>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Responsible:</label>
                        <select class="form-control" id="responsibleid">
                            <option value="">-- Select Employee --</option>
                        </select>
                        <span class="error-message" id="responsibleError">Please select responsible person</span>
                    </div>
                </div>

                <!-- Row 6 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label required">Reason:</label>
                        <textarea class="form-control" id="resonid" rows="3"></textarea>
                        <span class="error-message" id="reasonError">Please enter reason for leave</span>
                    </div>
                </div>

                <!-- Buttons -->
                <div class="d-flex justify-content-end flex-wrap gap-2 mt-2">
                    <button type="button" class="btn btn-custom" id="submitid">Submit</button>
                    <button type="button" class="btn btn-custom" id="clearbuttonid">Clear</button>
                </div>
            </div>
        </div>

        <div class="col-md-5">
            <div class="form-section">
                <div class="card-header">
                    <h6 class="mb-0 form-label">Leave Balance</h6>
                </div>
                <div id="Leavebalanceid" style="margin-top: 10px; max-height: 300px; overflow: auto;">Loading...</div>
                <div id="recordSummary" class="text-center mt-2 text-muted"></div>
            </div>

            <!-- Leave Details Section -->
            <div class="form-section">
                <div class="card-header">
                    <h6 class="mb-0 form-label">Leave Details</h6>
                </div>
                <div id="LeaveDetailsid" style="margin-top: 10px; max-height: 400px; overflow-x: auto; overflow-y: auto; width: 100%;">Select date range to view leave details</div>
            </div>
        </div>
    </div>
</div>

<script>
    const apiBase = '@apiBase';
    const Empid = parseInt(localStorage.getItem("EmployeeId"));
    const EmployeeName = localStorage.getItem("EmployeeName");
    const savedCompany = localStorage.getItem('selectedCompany');
    const companyDetails = JSON.parse(savedCompany || '{}');
    const Compid = parseInt(companyDetails.CompanyId);
    let leaveBalanceData = [];
    const today = new Date();

    $(document).ready(function () {
        const day = String(today.getDate()).padStart(2, '0');
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const year = today.getFullYear();
        const formattedDate = `${day}-${month}-${year}`;

        $('#applicationDate').val(formattedDate);
        $('#employedid').val(EmployeeName);
        $('#formdateid').prop('readonly', true);
        $('#todateid').prop('readonly', true);
        $('.form-section:has(#LeaveDetailsid)').hide();

        loadReportingPerson();
        loadLeaveBalance();
        loadResponsibleDropdown();

        $('#Leavetypeid').on('change', function () {
            const leaveTypeId = $(this).val();
            const leaveTypeName = $(this).find('option:selected').text();

            $('.error-message').hide();
            $('.form-control, .form-select').removeClass('is-invalid');
            $('#halfDayValidationMessage').remove();
            $('#lwpInfoMessage').remove();
            $('#formdateid').val('');
            $('#todateid').val('');
            $('#nodaysid').val('').prop('readonly', true);
            $('#halfDayTypeRow').hide();
            $('#halfDayCheckboxRow').hide();
            $('#halfDayCheckbox').prop('checked', false);
            $('#halfDayInfo').hide();

            $('.form-section:has(#LeaveDetailsid)').hide();

            if (leaveTypeId === "0") {
                $('#formdateid').prop('readonly', true);
                $('#todateid').prop('readonly', true);
            } else if (leaveTypeName === 'Half Leave') {
                $('#formdateid').prop('readonly', false);
                $('#todateid').prop('readonly', true);
                $('#halfDayTypeRow').show();
                updateHalfDayOptions([], "Select a date to see available half-day options");
            } else if (leaveTypeName === 'LWP') {
                $('#formdateid').prop('readonly', false);
                $('#todateid').prop('readonly', false);
                $('#halfDayCheckboxRow').show();
                $('#nodaysid').after('<div id="lwpInfoMessage" style="color: #17a2b8; font-size: 12px; margin-top: 5px;">LWP: Maximum 30 days allowed</div>');
            } else {
                $('#formdateid').prop('readonly', false);
                $('#todateid').prop('readonly', false);
                $('#halfDayCheckboxRow').show();
            }
        });

        $('#formdateid').on('change', function () {
            const leaveTypeId = $('#Leavetypeid').val();
            const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
            const fromDate = $(this).val();
            const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');

            $('.error-message').hide();
            $('#formdateid').removeClass('is-invalid');
            $('#halfDayValidationMessage').remove();

            if (leaveTypeId === "0") {
                $(this).val('');
                return;
            }

    if (leaveTypeName === 'Half Leave' && fromDate) {
        $('#todateid').val(fromDate); // Set to date same as from date
        validateHalfLeaveDate(fromDate);
        $('#nodaysid').val('0.5');

        setTimeout(() => {
            loadLeaveDetailsIfReady();
        }, 100);
        return;
    }


            if (isHalfDayChecked && fromDate) {
                $('#todateid').val(fromDate).prop('readonly', true);
                validateHalfDayCheckbox(fromDate);
            } else if (isHalfDayChecked) {
                $('#todateid').prop('readonly', true);
            } else {
                $('#todateid').prop('readonly', false);
            }

            calculateDaysFromDates();
            loadLeaveDetailsIfReady();
        });

        $('#todateid').on('change', function () {
            const leaveTypeId = $('#Leavetypeid').val();
            if (leaveTypeId === "0") {
                $(this).val('');
                return;
            }
            calculateDaysFromDates();
            loadLeaveDetailsIfReady();
        });

      $('#halfDayCheckbox').on('change', function () {
        const isChecked = $(this).is(':checked');
        const fromDate = $('#formdateid').val();

        if (isChecked) {
            $('#halfDayTypeRow').show();
            if (fromDate) {
                $('#todateid').val(fromDate).prop('readonly', true);
                validateHalfDayCheckbox(fromDate);

                setTimeout(() => {
                    loadLeaveDetailsIfReady();
                }, 100);
            } else {
                $('#todateid').prop('readonly', true);
            }
            $('#halfDayInfo').show();
            calculateDaysFromDates();
        } else {
            $('#halfDayTypeRow').hide();
            $('#todateid').prop('readonly', false);
            $('#halfDayInfo').hide();
            $('#halfDayType').val('');
            $('#halfDayValidationMessage').remove();
            calculateDaysFromDates();

            setTimeout(() => {
                loadLeaveDetailsIfReady();
            }, 100);
        }
    });

    $('#halfDayType').on('change', function () {
        $('#halfDayTypeError').hide();
        $(this).removeClass('is-invalid');

        setTimeout(() => {
            loadLeaveDetailsIfReady();
        }, 100);
    });

        $('#submitid').on('click', async function () {

            $(this).prop('disabled', true);
            const originalBg = $(this).css('background-color');

            try {
                await handleSubmit();
            } finally {

                setTimeout(() => {
                    $(this).prop('disabled', false);
                    $(this).css('background-color', originalBg);
                }, 500);
            }
        });

        $('#clearbuttonid').on('click', function () {
            clearForm();
        });
    });

    function validateHalfDayCheckbox(selectedDate) {
        const currentDate = new Date();
        const inputDate = new Date(selectedDate);
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();

        $('.error-message').hide();
        $('#formdateid').removeClass('is-invalid');
        $('#halfDayValidationMessage').remove();

        if (leaveTypeName === 'LWP') {
            updateHalfDayOptions(['first', 'second'], "LWP: You can select either first half or second half for any date.");
            return true;
        }


        if (inputDate > currentDate) {
            updateHalfDayOptions(['first', 'second'], "Future date: You can select either first half or second half.");
            return true;
        }

        if (inputDate.toDateString() === currentDate.toDateString()) {
            validateCurrentDateHalfDay();
            return true;
        }

        checkAttendanceForHalfDay(selectedDate);
        return true;
    }

    function loadLeaveDetailsIfReady() {
        const leaveTypeId = $('#Leavetypeid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');

        console.log('loadLeaveDetailsIfReady called:', {
            leaveTypeId,
            leaveTypeName,
            fromDate,
            toDate,
            isHalfDayChecked
        });

        const shouldShowGrid = leaveTypeId !== "0" &&
                              fromDate &&
                              toDate &&
                              (
                                  (leaveTypeName === 'Half Leave' && fromDate === toDate) ||
                                  (leaveTypeName !== 'Half Leave' && fromDate && toDate)
                              );

        if (shouldShowGrid) {
            console.log('Showing grid and loading details');
            $('.form-section:has(#LeaveDetailsid)').show();
            loadLeaveDetails();
        } else {
            console.log('Hiding grid - conditions not met');
            $('.form-section:has(#LeaveDetailsid)').hide();
        }
    }
    function validateHalfLeaveDate(selectedDate) {
        const currentDate = new Date();
        const inputDate = new Date(selectedDate);

        $('.error-message').hide();
        $('#formdateid').removeClass('is-invalid');
        $('#halfDayValidationMessage').remove();


        if (inputDate > currentDate) {
            $('#formdateid').addClass('is-invalid');
            $('#halfDayCurrentDateError').text('Half day leave can only be applied for current or past dates').show();
            updateHalfDayOptions([], 'Invalid date selected');
            return false;
        }


        if (inputDate.toDateString() === currentDate.toDateString()) {
            validateCurrentDateHalfDay();
            return true;
        }


        checkAttendanceForHalfDay(selectedDate);
        return true;
    }

    function validateCurrentDateHalfDay() {
        const currentDate = new Date();
        const currentHour = currentDate.getHours();

        const today = currentDate.toISOString().split('T')[0];

        const payload = {
            BranchId: null,
            EmpId: Empid,
            StartDate: today,
            EndDate: today,
            RecordType: null
        };

        $.ajax({
            url: apiBase + '/AttendanceRegularizationAPI/GetAttendanceDetails',
            type: 'POST',
            data: JSON.stringify(payload),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                let allowedHalves = [];
                let validationMessage = "";

                if (response?.isSuccess && response.data && response.data.length > 0) {
                    const attendanceData = response.data[0];
                    const shiftStartTime = attendanceData.startTime;
                    const shiftEndTime = attendanceData.endTime;

                    const [shiftStartHour] = shiftStartTime.split(':').map(Number);
                    const [shiftEndHour] = shiftEndTime.split(':').map(Number);
                    const shiftMidHour = shiftStartHour + Math.floor((shiftEndHour - shiftStartHour) / 2);

                    const inTime = attendanceData.inTime ? new Date(attendanceData.inTime) : null;
                    const workingHours = attendanceData.workingHours || 0;

                    if (inTime) {
                        const inHour = inTime.getHours();

                        if (workingHours >= 4.5) {
                            if (inHour < shiftMidHour && currentHour >= shiftMidHour) {
                                allowedHalves = ['second'];
                                validationMessage = `You've worked ${workingHours} hours starting from first half. You can apply for second half leave.`;
                            } else {
                                allowedHalves = [];
                                validationMessage = `You've already worked ${workingHours} hours. Half day leave may not be applicable.`;
                            }
                        } else {
                            if (currentHour < shiftMidHour) {
                                allowedHalves = ['first', 'second'];
                                validationMessage = "You can apply for either first half or second half leave.";
                            } else {
                                if (inHour < shiftMidHour) {
                                    allowedHalves = ['second'];
                                    validationMessage = "You were present in first half. You can apply for second half leave.";
                                } else {
                                    allowedHalves = ['first'];
                                    validationMessage = "You came in second half. You can apply for first half leave.";
                                }
                            }
                        }
                    } else {
                        if (currentHour < shiftMidHour) {
                            allowedHalves = ['first', 'second'];
                            validationMessage = "You haven't punched in yet. You can apply for either half.";
                        } else {
                            allowedHalves = ['first'];
                            validationMessage = "It's past mid-shift time. You can apply for first half leave.";
                        }
                    }
                } else {
                    const defaultShiftMidHour = 13;
                    if (currentHour < defaultShiftMidHour) {
                        allowedHalves = ['first', 'second'];
                        validationMessage = "You can apply for either first half or second half leave.";
                    } else {
                        allowedHalves = ['first'];
                        validationMessage = "It's past 1 PM. You can only apply for first half leave.";
                    }
                }

                updateHalfDayOptions(allowedHalves, validationMessage);
            },
            error: function (xhr, status, error) {
                console.error('Error checking today\'s attendance:', error);
                const defaultShiftMidHour = 13;
                if (currentDate.getHours() < defaultShiftMidHour) {
                    updateHalfDayOptions(['first', 'second'], "You can apply for either first half or second half leave.");
                } else {
                    updateHalfDayOptions(['first'], "It's past 1 PM. You can only apply for first half leave.");
                }
            }
        });
    }

    function checkAttendanceForHalfDay(selectedDate) {
        $('#halfDayValidationMessage').remove();

        const payload = {
            BranchId: null,
            EmpId: Empid,
            StartDate: selectedDate,
            EndDate: selectedDate,
            RecordType: null
        };

        $.ajax({
            url: apiBase + '/AttendanceRegularizationAPI/GetAttendanceDetails',
            type: 'POST',
            data: JSON.stringify(payload),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response?.isSuccess && response.data && response.data.length > 0) {
                    const attendanceData = response.data[0];
                    validateHalfDayByAttendance(attendanceData, selectedDate);
                } else {
                    updateHalfDayOptions([], "No attendance record found for this date. Half day leave cannot be applied.");
                }
            },
            error: function (xhr, status, error) {
                console.error('Error checking attendance:', error);
                updateHalfDayOptions([], "Error checking attendance. Please try again.");
            }
        });
    }

    function validateHalfDayByAttendance(attendanceData, selectedDate) {
        const inTime = attendanceData.inTime ? new Date(attendanceData.inTime) : null;
        const outTime = attendanceData.outTime ? new Date(attendanceData.outTime) : null;
        const workingHours = attendanceData.workingHours || 0;

        const shiftStartTime = attendanceData.startTime;
        const shiftEndTime = attendanceData.endTime;

        const [shiftStartHour, shiftStartMinute] = shiftStartTime.split(':').map(Number);
        const [shiftEndHour, shiftEndMinute] = shiftEndTime.split(':').map(Number);

        const shiftDurationHours = shiftEndHour - shiftStartHour;
        const shiftMidHour = shiftStartHour + Math.floor(shiftDurationHours / 2);
        const shiftMidMinute = shiftStartMinute;

        let allowedHalves = [];
        let validationMessage = "";

        if (!inTime && !outTime) {
            allowedHalves = [];
            validationMessage = "No attendance record found for this date. Half leave cannot be applied.";
            updateHalfDayOptions(allowedHalves, validationMessage);
            return;
        }

        if (workingHours < 4.5) {
            if (inTime && outTime) {
                const inHour = inTime.getHours();
                const inMinute = inTime.getMinutes();
                const outHour = outTime.getHours();
                const outMinute = outTime.getMinutes();

                const wasInFirstHalf = (inHour < shiftMidHour) || (inHour === shiftMidHour && inMinute <= shiftMidMinute);
                const wasInSecondHalf = (outHour > shiftMidHour) || (outHour === shiftMidHour && outMinute >= shiftMidMinute);

                if (wasInFirstHalf && !wasInSecondHalf) {
                    allowedHalves = ['second'];
                    validationMessage = `You worked ${workingHours} hours in first half. You can apply for second half leave.`;
                } else if (!wasInFirstHalf && wasInSecondHalf) {
                    allowedHalves = ['first'];
                    validationMessage = `You worked ${workingHours} hours in second half. You can apply for first half leave.`;
                } else if (wasInFirstHalf && wasInSecondHalf) {
                    const firstHalfHours = Math.min(workingHours, shiftMidHour - inHour);
                    const secondHalfHours = workingHours - firstHalfHours;

                    if (firstHalfHours > secondHalfHours) {
                        allowedHalves = ['second'];
                        validationMessage = `You were primarily present in first half (${firstHalfHours.toFixed(1)} hrs). You can apply for second half leave.`;
                    } else {
                        allowedHalves = ['first'];
                        validationMessage = `You were primarily present in second half (${secondHalfHours.toFixed(1)} hrs). You can apply for first half leave.`;
                    }
                }
            } else if (inTime && !outTime) {
                const inHour = inTime.getHours();
                if (inHour < shiftMidHour) {
                    allowedHalves = ['second'];
                    validationMessage = `You punched in during first half (${workingHours} hrs worked). You can apply for second half leave.`;
                } else {
                    allowedHalves = ['first'];
                    validationMessage = `You punched in during second half (${workingHours} hrs worked). You can apply for first half leave.`;
                }
            } else if (!inTime && outTime) {
                const outHour = outTime.getHours();
                if (outHour <= shiftMidHour) {
                    allowedHalves = ['second'];
                    validationMessage = `You punched out during first half (${workingHours} hrs worked). You can apply for second half leave.`;
                } else {
                    allowedHalves = ['first'];
                    validationMessage = `You punched out during second half (${workingHours} hrs worked). You can apply for first half leave.`;
                }
            }
        } else if (workingHours >= 4.5 && workingHours < 8) {
            if (inTime && outTime) {
                const inHour = inTime.getHours();
                const inMinute = inTime.getMinutes();
                const outHour = outTime.getHours();
                const outMinute = outTime.getMinutes();

                const wasInDuringShiftStart = (inHour <= shiftStartHour) || (inHour === shiftStartHour && inMinute <= shiftStartMinute);
                const wasOutAfterShiftMid = (outHour > shiftMidHour) || (outHour === shiftMidHour && outMinute >= shiftMidMinute);
                const wasOutAfterShiftEnd = (outHour >= shiftEndHour) || (outHour === shiftEndHour && outMinute >= shiftEndMinute);

                if (wasInDuringShiftStart && wasOutAfterShiftEnd) {
                    allowedHalves = [];
                    validationMessage = `You worked ${workingHours} hours covering most of the shift. Half day leave cannot be applied.`;
                } else if (wasInDuringShiftStart && wasOutAfterShiftMid && !wasOutAfterShiftEnd) {
                    allowedHalves = ['second'];
                    validationMessage = `You worked ${workingHours} hours in first half and left early. You can apply for second half leave.`;
                } else if (!wasInDuringShiftStart && wasOutAfterShiftEnd) {
                    allowedHalves = ['first'];
                    validationMessage = `You came late but worked ${workingHours} hours till shift end. You can apply for first half leave.`;
                } else {
                    if (inHour < shiftMidHour) {
                        allowedHalves = ['second'];
                        validationMessage = `Based on your timing (${workingHours} hrs), you can apply for second half leave.`;
                    } else {
                        allowedHalves = ['first'];
                        validationMessage = `Based on your timing (${workingHours} hrs), you can apply for first half leave.`;
                    }
                }
            }
        } else {
            allowedHalves = [];
            validationMessage = `You worked ${workingHours} hours (full day). Half day leave cannot be applied for this date.`;
        }

        updateHalfDayOptions(allowedHalves, validationMessage);
    }

    function updateHalfDayOptions(allowedHalves, validationMessage = "") {
        const halfDayDropdown = $('#halfDayType');

        halfDayDropdown.empty().append('<option value="">-- Select Half Day --</option>');
        halfDayDropdown.removeClass('is-invalid');
        $('#halfDayTypeError').hide();

        $('#halfDayValidationMessage').remove();

        if (allowedHalves.length === 0) {
            halfDayDropdown.prop('disabled', true);

            if (validationMessage) {
                halfDayDropdown.after(`<div id="halfDayValidationMessage" class="error-message" style="display: block; color: #dc3545; font-size: 12px; margin-top: 5px;">${validationMessage}</div>`);
            }
        } else {
            halfDayDropdown.prop('disabled', false);

            if (allowedHalves.includes('first')) {
                halfDayDropdown.append('<option value="first">First Half</option>');
            }
            if (allowedHalves.includes('second')) {
                halfDayDropdown.append('<option value="second">Second Half</option>');
            }

            if (validationMessage) {
                halfDayDropdown.after(`<div id="halfDayValidationMessage" style="color: #28a745; font-size: 12px; margin-top: 5px;">${validationMessage}</div>`);
            }
        }
            setTimeout(() => {
        loadLeaveDetailsIfReady();
    }, 100);
    }

     function loadLeaveDetails() {
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();

        const payload = {
            BranchId: null,
            EmpId: Empid,
            StartDate: fromDate,
            EndDate: toDate,
            RecordType: null
        };

        $.ajax({
            url: apiBase + '/AttendanceRegularizationAPI/GetAttendanceDetails',
            type: 'POST',
            data: JSON.stringify(payload),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response?.isSuccess && response.data && response.data.length > 0) {
                    const data = response.data;
                    console.log("data", data);
                    $("#LeaveDetailsid").dxDataGrid({
                        dataSource: data,
                        showBorders: true,
                        columnAutoWidth: true,
                        wordWrapEnabled: false,
                        width: '100%',
                        height: 'auto',
                        allowColumnResizing: true,
                        columnResizingMode: 'widget',
                        columns: [
                            {
                                dataField: "shiftDate",
                                caption: "Date",
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value) return "";
                                    return new Date(cellInfo.value).toLocaleDateString("en-IN", {
                                        day: "2-digit",
                                        month: "2-digit",
                                        year: "numeric"
                                    });
                                }
                            },
                            {
                                dataField: "dayName",
                                caption: "Day",
                                cssClass: "text-center-cell"
                            },
                            {
                                caption: "Status",

                                calculateCellValue: function () {
                                    return $("#Leavetypeid option:selected").text();
                                }
                            },
                            {
                                dataField: "inTime",
                                caption: "In",
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value) return "";
                                    return new Date(cellInfo.value).toLocaleTimeString("en-IN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: true
                                    });
                                }
                            },
                            {
                                dataField: "outTime",
                                caption: "Out",
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value) return "";
                                    return new Date(cellInfo.value).toLocaleTimeString("en-IN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: true
                                    });
                                }
                            },
                            {
                                dataField: "workingHours",
                                caption: "WH",

                                cssClass: "text-center-cell"
                            }
                        ],
                        paging: {
                            enabled: true,
                            pageSize: 7
                        }
                    });


                    setTimeout(() => {
                        const gridInstance = $("#LeaveDetailsid").dxDataGrid("instance");
                        if (gridInstance) {
                            gridInstance.repaint();
                            gridInstance.refresh();
                        }
                    }, 200);

                } else {
                    $("#LeaveDetailsid").html('<div class="text-muted text-center">No attendance records found for selected date range</div>');
                }
            },
            error: function (xhr, status, error) {
                $("#LeaveDetailsid").html('<div class="text-danger text-center">Error loading attendance details</div>');
                console.error('Error loading attendance details:', error);
            }
        });
    }

    function calculateDaysFromDates() {
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');

        $('#dateRangeError').hide();
        $('#todateid').removeClass('is-invalid');

        if (fromDate && toDate) {
            const startDate = new Date(fromDate);
            const endDate = new Date(toDate);

            if (endDate >= startDate) {
                const timeDiff = endDate.getTime() - startDate.getTime();
                const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;

                if (leaveTypeName === 'Half Leave') {
                    $('#nodaysid').val('0.5');
                } else if (isHalfDayChecked) {

                    if (leaveTypeName === 'LWP') {

                        const halfDays = daysDiff * 0.5;
                        $('#nodaysid').val(halfDays);
                    } else {

                        const halfDays = daysDiff * 0.5;
                        $('#nodaysid').val(halfDays);
                    }
                } else {
                    $('#nodaysid').val(daysDiff);
                }

                setTimeout(() => {
                    loadLeaveDetailsIfReady();
                }, 50);

            } else {
                $('#todateid').addClass('is-invalid');
                $('#dateRangeError').show();
                $('#nodaysid').val('');
            }
        }
    }

    function isPastDate(dateString) {
        const inputDate = new Date(dateString);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        inputDate.setHours(0, 0, 0, 0);
        return inputDate < today;
    }

    function isPastMonth(dateString) {
        const inputDate = new Date(dateString);
        const today = new Date();
        return inputDate.getMonth() < today.getMonth() || inputDate.getFullYear() < today.getFullYear();
    }

    function isWithin30Days(dateString) {
        const inputDate = new Date(dateString);
        const currentDate = new Date();
        const timeDifference = currentDate.getTime() - inputDate.getTime();
        const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));
        return daysDifference <= 30;
    }

    const leaveTypeMapping = {
        1: "Comp Off Leave",
        2: "Half Leave",
        3: "LWP",
        4: "Privilege Leave"
    };

    function getLeaveBalance(leaveTypeId) {
        const leaveTypeName = leaveTypeMapping[leaveTypeId];
        if (!leaveTypeName) {
            return 0;
        }

        const balance = leaveBalanceData.find(item => item.leaveType === leaveTypeName);
        return balance ? parseFloat(balance.leaveValue || 0) : 0;
    }

    function validateLeaveBalance(leaveTypeId, requestedDays) {
        const leaveTypeName = leaveTypeMapping[leaveTypeId];

        if (leaveTypeName === "LWP") {
            const fullDayEquivalent = requestedDays;
            const maxAllowed = 30;

            if (fullDayEquivalent > maxAllowed) {
                return {
                    isValid: false,
                    message: `LWP cannot exceed 30 days equivalent! Requested: ${fullDayEquivalent} days`
                };
            }
            return { isValid: true, message: "" };
        }

        const availableBalance = getLeaveBalance(leaveTypeId);
        if (requestedDays > availableBalance) {
            return {
                isValid: false,
                message: `Insufficient balance! Available: ${availableBalance}, Requested: ${requestedDays}`
            };
        }

        return { isValid: true, message: "" };
    }

    function checkDuplicateLeaveApplication(fromDate, toDate) {
        return new Promise((resolve, reject) => {
            let filter = {
                LeaveType: 0,
                Status: null,
                SearchFor: "",
                Emplooyeid: Empid,
                CompId: Compid
            };
            $.ajax({
                url: apiBase + '/LeaveApplication/GetLeaveApplications',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(filter),
                success: function (data) {
                    if (data.isSuccess && data.data && data.data.length > 0) {
                        const selectedFromDate = new Date(fromDate);
                        const selectedToDate = new Date(toDate);

                        const duplicateLeaves = data.data.filter(leave => {
                            const leaveFromDate = new Date(leave.fromDate);
                            const leaveToDate = new Date(leave.todate);
                            const isOverlapping = (selectedFromDate <= leaveToDate && selectedToDate >= leaveFromDate);
                            const isActiveStatus = leave.status === 'Pending' || leave.status === 'Approved';
                            return isOverlapping && isActiveStatus;
                        });

                        if (duplicateLeaves.length > 0) {
                            resolve({
                                hasDuplicate: true,
                                duplicateLeaves: duplicateLeaves
                            });
                        } else {
                            resolve({
                                hasDuplicate: false,
                                duplicateLeaves: []
                            });
                        }
                    } else {
                        resolve({
                            hasDuplicate: false,
                            duplicateLeaves: []
                        });
                    }
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function checkAttendanceForPastMonth(fromDate, toDate, empId) {
        return new Promise((resolve, reject) => {
            const formData = new FormData();
            formData.append("BranchId", "0");
            formData.append("EmpId", empId);
            formData.append("StartDate", fromDate);
            formData.append("EndDate", toDate);
            formData.append("RecordType", "All");

            $.ajax({
                url: apiBase + '/EmployeeInOut/GetEmployeeInOutReport',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response?.isSuccess && response.data && response.data.length > 0) {
                        const presentDates = response.data.filter(record =>
                            record.status === 'Present' || record.status === 'P' ||
                            record.inTime != null || record.outTime != null
                        );
                        if (presentDates.length > 0) {
                            resolve({ isPresent: true, presentDates: presentDates });
                        } else {
                            resolve({ isPresent: false, presentDates: [] });
                        }
                    } else {
                        resolve({ isPresent: false, presentDates: [] });
                    }
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function checkSalaryProcessed(fromDate, empCode) {
        return new Promise((resolve, reject) => {
            const leaveDate = new Date(fromDate);
            const month = leaveDate.getMonth() + 1;
            const year = leaveDate.getFullYear();
            const requestData = {
                Month: parseInt(month),
                Year: parseInt(year),
                EmployeeCodes: 0,
                BranchId: 0
            };

            $.ajax({
                url: apiBase + '/MonthlySalaryDetailsAPI/GetAll',
                type: "POST",
                data: JSON.stringify(requestData),
                contentType: "application/json",
                success: function (response) {
                    if (response.isSuccess && response.data && response.data.length > 0) {
                        resolve({ isProcessed: true, salaryData: response.data, month: month, year: year });
                    } else {
                        resolve({ isProcessed: false, salaryData: [], month: month, year: year });
                    }
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function loadReportingPerson() {
        $.ajax({
            url: `${apiBase}/LeaveApplication/GetReportingperson?Empid=${Empid}`,
            method: 'POST',
            dataType: 'json',
            success: function (response) {
                if (response.isSuccess && response.data) {
                    $('#repoid').val(response.data.fullName);
                    $('#reportingManagerId').val(response.data.id);
                }
            }
        });
    }

    function loadLeaveBalance() {
        $.ajax({
            url: `${apiBase}/LeaveApplication/GetLeaveType`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ Compid: Compid, Empid: Empid }),
            success: function (response) {
                if (response.isSuccess && response.data && response.data.length > 0) {
                    leaveBalanceData = response.data;

                    $("#Leavebalanceid").dxDataGrid({
                        dataSource: response.data,
                        keyExpr: "leaveType",
                        showBorders: true,
                        columnAutoWidth: true,
                        columns: [
                            { dataField: "leaveType", caption: "Leave Type", cssClass: "text-center-cell" },
                            { dataField: "leaveValue", caption: "Balance", cssClass: "text-center-cell" }
                        ]
                    });
                } else {
                    $("#Leavebalanceid").html('<div class="text-muted text-center">No leave balance found</div>');
                }
            },
            error: function () {
                Swal.fire("Error", "Could not load leave balance", "error");
            }
        });
    }

    function loadResponsibleDropdown() {
        $.ajax({
            url: `${apiBase}/CompOffAPI/ReportingPersonEmpVise?Compid=${Compid}&Empid=${Empid}`,
            method: 'POST',
            success: function (res) {
                const dropdown = $('#responsibleid');
                dropdown.empty().append('<option value="">-- Select Employee --</option>');
                if (res.isSuccess && res.data?.length > 0) {
                    res.data.forEach(item => {
                        dropdown.append(`<option value="${item.reportingPersonId}">${item.reportingPersonName}</option>`);
                    });
                }
            },
            error: function () {
                Swal.fire("Error", "Could not load responsible list", "error");
            }
        });
    }

    async function handleSubmit() {
        $('.error-message').hide();
        $('.form-control, .form-select').removeClass('is-invalid');

        let hasError = false;

        const leaveType = $('#Leavetypeid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
        const applicationType = 'Regular'; // Set default to Regular
        const noOfDays = parseFloat($('#nodaysid').val());
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const reason = $('#resonid').val().trim();
        const responsible = $('#responsibleid').val();
        const halfDayType = $('#halfDayType').val();

        if (leaveType === "0") {
            $('#Leavetypeid').addClass('is-invalid');
            $('#leaveTypeError').show();
            hasError = true;
        }

        if (!fromDate) {
            $('#formdateid').addClass('is-invalid');
            $('#fromDateError').show();
            hasError = true;
        }

        if (!toDate) {
            $('#todateid').addClass('is-invalid');
            $('#toDateError').show();
            hasError = true;
        }

        if (fromDate && toDate) {
            const startDate = new Date(fromDate);
            const endDate = new Date(toDate);

            if (endDate < startDate) {
                $('#todateid').addClass('is-invalid');
                $('#dateRangeError').show();
                hasError = true;
            }
        }

        if (!$('#nodaysid').val()) {
            $('#nodaysid').addClass('is-invalid');
            $('#daysError').text('Please calculate number of days').show();
            hasError = true;
        }

        if (!reason) {
            $('#resonid').addClass('is-invalid');
            $('#reasonError').show();
            hasError = true;
        }

        if (!responsible) {
            $('#responsibleid').addClass('is-invalid');
            $('#responsibleError').show();
            hasError = true;
        }

        // Half day validation
        if (leaveTypeName === 'Half Leave' || $('#halfDayCheckbox').is(':checked')) {
            if (leaveTypeName === 'LWP') {
                if (!halfDayType) {
                    $('#halfDayType').addClass('is-invalid');
                    $('#halfDayTypeError').show();
                    hasError = true;
                }
            } else if (leaveTypeName === 'Half Leave') {
                if (noOfDays !== 0.5) {
                    $('#nodaysid').addClass('is-invalid');
                    $('#halfDayValidationError').show();
                    hasError = true;
                }
                if (!halfDayType) {
                    $('#halfDayType').addClass('is-invalid');
                    $('#halfDayTypeError').show();
                    hasError = true;
                }
            } else {
                if (noOfDays !== 0.5) {
                    $('#nodaysid').addClass('is-invalid');
                    $('#halfDayValidationError').show();
                    hasError = true;
                }
                if (!halfDayType) {
                    $('#halfDayType').addClass('is-invalid');
                    $('#halfDayTypeError').show();
                    hasError = true;
                }
            }
        }

        if (leaveType !== "0" && !isNaN(noOfDays) && noOfDays > 0) {
            const balanceValidation = validateLeaveBalance(leaveType, noOfDays);
            if (!balanceValidation.isValid) {
                $('#nodaysid').addClass('is-invalid');
                $('#insufficientBalanceError').text(balanceValidation.message).show();
                hasError = true;
            }
        }

        if (hasError) {
            return;
        }

        try {
            const duplicateResult = await checkDuplicateLeaveApplication(fromDate, toDate);
            if (duplicateResult.hasDuplicate) {
                const duplicate = duplicateResult.duplicateLeaves[0];
                const statusText = duplicate.status === 'Pending' ? 'Pending' : 'Approved';
                Swal.fire({
                    title: "Leave Already Applied",
                    text: `You have already applied for leave on these dates. Status: ${statusText}`,
                    icon: "warning",
                    confirmButtonText: "OK"
                });
                return;
            }

            if (isPastMonth(fromDate)) {
                if (!isWithin30Days(fromDate)) {
                    $('#formdateid').addClass('is-invalid');
                    $('#pastDateError').show();
                    return;
                }

                const attendanceResult = await checkAttendanceForPastMonth(fromDate, toDate, Empid);
                if (attendanceResult.isPresent) {
                    $('#formdateid').addClass('is-invalid');
                    $('#attendanceError').show();
                    return;
                }

                const salaryResult = await checkSalaryProcessed(fromDate, Empid);
                if (salaryResult.isProcessed) {
                    $('#formdateid').addClass('is-invalid');
                    $('#salaryError').text(`Cannot apply leave for ${salaryResult.month}/${salaryResult.year} as salary has already been processed`).show();
                    return;
                }
            }

            const payload = {
                EmplooyeId: Empid,
                CompId: Compid,
                ReportingManagerId: parseInt($('#reportingManagerId').val()),
                LeaveType: parseInt(leaveType),
                ApplicationType: applicationType,
                ApplicationDate: new Date(),
                FromDate: fromDate,
                Todate: toDate,
                No_Of_Date: noOfDays,
                Reason: reason,
                Responsibleperson: parseInt(responsible),
                Day: halfDayType || null,
                Cancel_Weekoff: false,
                Send_Intimate: "false",
                LeaveStatus: "Pending"
            };

            $.ajax({
                url: apiBase + '/LeaveApplication/AddLeaveapplication',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (response) {
                    if (response.isSuccess) {
                        Swal.fire({
                            title: "Success",
                            text: response.responseMessage,
                            icon: "success",
                            customClass: { popup: 'swal2-small' }
                        });
                        clearForm();
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: response.responseMessage,
                            icon: "error",
                            customClass: { popup: 'swal2-small' }
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        title: "Error",
                        text: "An error occurred while submitting",
                        icon: "error",
                        customClass: { popup: 'swal2-small' }
                    });
                }
            });

        } catch (err) {
            Swal.fire({
                title: "Error",
                text: "Unexpected error occurred while submitting",
                icon: "error",
                customClass: { popup: 'swal2-small' }
            });
        }
    }

      function clearForm() {
        $('#Leavetypeid').val('0');
        $('input[name="leaveStatus"]').prop('checked', false);
        $('#formdateid').val('').prop('readonly', true);
        $('#todateid').val('').prop('readonly', true);
        $('#nodaysid').val('').prop('readonly', true);
        $('#resonid').val('');
        $('#responsibleid').val('');
        $('#halfDayType').val('');
        $('#halfDayTypeRow').hide();
        $('.form-control, .form-select').removeClass('is-invalid');
        $('.error-message').hide();
        $('#halfDayCheckbox').prop('checked', false);
        $('#halfDayCheckboxRow').hide();
        $('#halfDayInfo').hide();
        $('#halfDayValidationMessage').remove();
    $('#lwpInfoMessage').remove()

        $('.form-section:has(#LeaveDetailsid)').hide();
         $('#Leavetypeid').trigger('change');
    }
    </script>