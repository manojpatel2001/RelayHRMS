@{
    ViewData["Title"] = "Employee Panel";
    Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
    string baseUrl = ViewBag.BaseUrl;
    string apiBase = ViewBag.BaseUrlAPI;
}
<title>Leave Application Form</title>
<!-- Bootstrap CSS -->
<!-- jQuery + Bootstrap + SweetAlert -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #ffffff;
    }

    .form-section {
        padding: 15px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
    }

    .btn-custom {
        background-color: #3e4b6d;
        color: white;
        font-weight: 600;
        padding: 4px 12px;
        border: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-custom:hover {
            background-color: #2c3a57;
        }

        .btn-custom:active,
        .btn-custom:focus {
            background-color: #3e4b6d !important;
            box-shadow: none !important;
            outline: none !important;
        }

    .search-panel-container {
        background-color: #3e4b6d;
        padding: 6px 15px;
        border-radius: 6px;
        margin-bottom: 15px;
    }

    .search-panel-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-heading {
        font-size: 15px;
        color: white;
        margin: 0;
    }

    .form-label {
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 4px;
    }

        .form-label.required::after {
            content: " *";
            color: #dc3545;
            font-weight: bold;
        }

    .form-control-sm, .form-select-sm {
        height: calc(1.5em + .5rem + 2px);
        font-size: 0.875rem;
        padding: .25rem .5rem;
    }

    .text-center-cell {
        text-align: center !important;
    }

        .text-center-cell > div {
            text-align: center !important;
        }

    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: none;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }

    .half-day-dropdown {
        display: none;
    }

    .short-leave-section {
        display: none;
    }

    .leave-balance-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

        .leave-balance-table th,
        .leave-balance-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        .leave-balance-table th {
            background-color: #3e4b6d;
            color: white;
            font-size: 13px;
        }

    .badge {
        display: inline-block;
        padding: 0.25em 0.4em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .badge-success {
        color: #fff;
        background-color: #28a745;
    }

    .badge-warning {
        color: #212529;
        background-color: #ffc107;
    }

    .badge-danger {
        color: #fff;
        background-color: #dc3545;
    }

    .badge-secondary {
        color: #fff;
        background-color: #6c757d;
    }

    .badge-info {
        color: #fff;
        background-color: #17a2b8;
    }

    .half-day-checkbox {
        display: none;
    }

    .half-day-info {
        background-color: #e3f2fd;
        border: 1px solid #90caf9;
        padding: 8px;
        border-radius: 4px;
        font-size: 12px;
        color: #1976d2;
        margin-top: 5px;
        display: none;
    }

    .time-picker {
        width: 100%;
    }

    .short-leave-info {
        background-color: #fff3cd;
        border: 1px solid #ffeaa7;
        padding: 8px;
        border-radius: 4px;
        font-size: 12px;
        color: #856404;
        margin-top: 5px;
    }

    .dx-datagrid {
        font-size: 11px !important;
        width: 100% !important;
        max-width: 100% !important;
        overflow-x: auto !important;
    }

    .dx-datagrid-headers {
        width: 100% !important;
    }

    .dx-datagrid-rowsview {
        overflow-x: auto !important;
    }

    .dx-datagrid-content {
        width: 100% !important;
    }

    /* Ensure parent container is properly sized */
    #LeaveDetailsid {
        width: 100% !important;
        max-width: 100% !important;
        overflow: hidden !important;
    }

    .dx-datagrid .dx-row > td {
        font-size: 10px !important;
        padding: 2px 4px !important;
        white-space: nowrap !important;
        text-overflow: ellipsis !important;
        min-width: auto !important;
        max-width: none !important;
    }

    .dx-datagrid-headers .dx-header-row .dx-datagrid-table .dx-row > td {
        font-size: 10px !important;
        padding: 4px 2px !important;
        font-weight: 600;
        white-space: nowrap !important;
        min-width: auto !important;
        max-width: none !important;
    }

    .btn-custom {
        background-color: #3e4b6d !important;
        color: white !important;
        font-weight: 600;
        padding: 4px 12px;
        border: none;
        border-radius: 4px;
        transition: background-color 0.3s ease;
    }

        .btn-custom:hover {
            background-color: #2c3a57 !important;
        }

        .btn-custom:active,
        .btn-custom:focus {
            background-color: #3e4b6d !important;
            box-shadow: none !important;
            outline: none !important;
        }

        .btn-custom:disabled {
            background-color: #3e4b6d !important;
            color: white !important;
            opacity: 0.7;
            cursor: not-allowed;
        }

    #submitid {
        background-color: #3e4b6d !important;
    }

        #submitid:hover {
            background-color: #2c3a57 !important;
        }

        #submitid:focus,
        #submitid:active {
            background-color: #3e4b6d !important;
        }

</style>
<div class="container-fluid">
    <div class="search-panel-wrapper">
        <div class="search-panel-container">
            <div class="search-panel-row">
                <div class="search-heading">Search Panel</div>
                <div class="col-auto">
                    <a href="@Url.Action("LeaveApplication", "Leave", new { area = "EmployeePanel" })" class="btn btn-primary btn-sm">Back</a>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="search-panel-wrapper">
            <div class="search-panel-container">
                <div class="search-panel-row">
                    <div class="search-heading">Leave Application:</div>
                </div>
            </div>
        </div>

        <div class="col-md-7">
            <div class="form-section">
                <!-- Row 1 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Application Date:</label>
                        <input type="text" class="form-control" id="applicationDate" readonly>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Employee:</label>
                        <input type="text" class="form-control" id="employedid" readonly>
                    </div>
                </div>

                <!-- Row 2 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Reporting Person:</label>
                        <input type="text" class="form-control" id="repoid" readonly>
                        <input type="hidden" id="reportingManagerId" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Leave:</label>
                        <select class="form-control form-control-sm" id="Leavetypeid">
                            <option value="0">-- Select --</option>
                        </select>
                        <span class="error-message" id="leaveTypeError">Please select leave type</span>
                    </div>
                </div>

                <!-- Row 3 - Hidden Application Type -->
                <input type="hidden" id="applicationType" value="Regular" />

                <!-- Row 4 - Date Fields -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required">From Date:</label>
                        <input type="date" class="form-control" id="formdateid">
                        <span class="error-message" id="fromDateError">Please select from date</span>
                        <span class="error-message" id="pastDateError">Cannot apply leave more than 30 days in the past</span>
                        <span class="error-message" id="attendanceError">You were present on this date. Cannot apply leave.</span>
                        <span class="error-message" id="salaryError">Cannot apply leave as salary has been processed</span>
                        <span class="error-message" id="halfDayCurrentDateError">Half day leave can only be applied for current date</span>
                        <span class="error-message" id="shortLeaveDateError">Short leave can only be applied for past or current date</span>
                        <span class="error-message" id="futureDateError">Cannot apply leave for future dates with this leave type</span>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">To Date:</label>
                        <input type="date" class="form-control" id="todateid">
                        <span class="error-message" id="toDateError">Please select to date</span>
                        <span class="error-message" id="dateRangeError">To date cannot be earlier than from date</span>
                    </div>
                </div>

                <!-- Short Leave Section (New) -->
                <div class="short-leave-section" id="shortLeaveSection">
                    <div class="row mb-3">
                        <div class="col-md-6">
                            <label class="form-label required">From Hour:</label>
                            <input type="time" class="form-control time-picker" id="fromHour">
                            <span class="error-message" id="fromHourError">Please select from hour</span>
                        </div>
                        <div class="col-md-6">
                            <label class="form-label required">To Hour:</label>
                            <input type="time" class="form-control time-picker" id="toHour" desabled>
                            <span class="error-message" id="toHourError">Please select to hour</span>
                            <span class="error-message" id="timeRangeError">To hour cannot be earlier than from hour</span>
                        </div>
                    </div>
                </div>

                <!-- Half Day Checkbox Row -->
                <div class="row mb-3 half-day-checkbox" id="halfDayCheckboxRow">
                    <div class="col-md-12">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="halfDayCheckbox">
                            <label class="form-check-label" for="halfDayCheckbox">
                                Half day
                            </label>
                        </div>
                    </div>
                </div>

                <!-- Half Day Type Dropdown (Hidden by default) -->
                <div class="row mb-3 half-day-dropdown" id="halfDayTypeRow">
                    <div class="col-md-6">
                        <label class="form-label required">Half Day Type:</label>
                        <select class="form-control form-control-sm" id="halfDayType">
                            <option value="">-- Select Half Day --</option>
                            <option value="first">First Half</option>
                            <option value="second">Second Half</option>
                        </select>
                        <span class="error-message" id="halfDayTypeError">Please select half day type</span>
                    </div>
                </div>

                <!-- Row 5 - Days/Hours Field -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label required" id="daysHoursLabel">No. of Days:</label>
                        <input type="number" class="form-control" id="nodaysid" min="0.5" step="0.5" readonly>
                        <span class="error-message" id="daysError">Invalid period!</span>
                        <span class="error-message" id="hoursError">Invalid hours!</span>
                        <span class="error-message" id="workingHourError">Cannot take during working hours</span>
                        <span class="error-message" id="daysError">Invalid period! Please enter valid days</span>
                        <span class="error-message" id="insufficientBalanceError">Insufficient leave balance</span>
                        <span class="error-message" id="halfDayValidationError">For half day leave, only 0.5 days allowed</span>
                        <span class="error-message" id="lwpMaxLimitError">LWP cannot exceed 30 days</span>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label required">Responsible:</label>
                        <select class="form-control" id="responsibleid">
                            <option value="">-- Select Employee --</option>
                        </select>
                        <span class="error-message" id="responsibleError">Please select responsible person</span>
                    </div>
                </div>

                <!-- Row 6 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label required">Reason:</label>
                        <textarea class="form-control" id="resonid" rows="3"></textarea>
                        <span class="error-message" id="reasonError">Please enter reason for leave</span>
                    </div>
                </div>

                <!-- Buttons -->
                <div class="d-flex justify-content-end flex-wrap gap-2 mt-2">
                    <button type="button" class="btn btn-custom" id="submitid">Submit</button>
                    <button type="button" class="btn btn-custom" id="clearbuttonid">Clear</button>
                </div>
            </div>
        </div>

        <div class="col-md-5">
            <div class="form-section">
                <div class="card-header">
                    <h6 class="mb-0 form-label">Leave Balance</h6>
                </div>
                <div id="Leavebalanceid" style="margin-top: 10px; max-height: 300px; overflow: auto;">Loading...</div>
                <div id="recordSummary" class="text-center mt-2 text-muted"></div>
            </div>

            <!-- Leave Details Section -->
            <div class="form-section">
                <div class="card-header">
                    <h6 class="mb-0 form-label">Attendance Details</h6>
                </div>
                <div id="LeaveDetailsid" style="margin-top: 10px; max-height: 400px; overflow-x: auto; overflow-y: auto; width: 100%;">Select date range to view leave details</div>
            </div>
        </div>
    </div>
</div>
<script>
    const apiBase = '@apiBase';
    const Empid = parseInt(localStorage.getItem("EmployeeId"));
    const EmployeeName = localStorage.getItem("EmployeeName");
    const savedCompany = localStorage.getItem('selectedCompany');
    const companyDetails = JSON.parse(savedCompany || '{}');
    const Compid = parseInt(companyDetails.CompanyId);
    let leaveBalanceData = [];
    let gridCallInProgress = false;
    let isGridLoading = false;
    let refreshTimeout;
    const today = new Date();

    let leaveTypesData = [];
    let leaveTypeMapping = {};

    // Cache for attendance data to avoid multiple API calls
    let attendanceCache = {};
    let cacheTimeout = 5 * 60 * 1000; // 5 minutes cache

    $(document).ready(function () {
        const day = String(today.getDate()).padStart(2, '0');
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const year = today.getFullYear();
        const formattedDate = `${day}-${month}-${year}`;

        $('#applicationDate').val(formattedDate);
        $('#employedid').val(EmployeeName);
        $('#formdateid').prop('readonly', true);
        $('#todateid').prop('readonly', true);
        $('.form-section:has(#LeaveDetailsid)').hide();

        loadReportingPerson();
        loadLeaveBalance();
        loadResponsibleDropdown();
        GetAllLeave(Compid);

        // Event handlers
        $('#Leavetypeid').on('change', function () {
            handleLeaveTypeChange();
        });

        $('#formdateid').on('change', function () {
            handleFromDateChange();
        });

        $('#todateid').on('change', function () {
            handleToDateChange();
        });

        $('#halfDayCheckbox').on('change', function () {
            handleHalfDayCheckboxChange();
            refreshLeaveDetailsGrid();
        });

        $('#halfDayType').on('change', function () {
            handleHalfDayTypeChange();
            refreshLeaveDetailsGrid();
        });

        // Enhanced Short Leave event handlers
        $('#fromHour').on('change blur', function () {
            handleFromHourChange();
        });

        $('#toHour').on('change blur', function () {
            handleToHourChange();
        });

        // Real-time calculation for time inputs
        $('#fromHour').on('input', function () {
            if ($(this).val()) {
                setTimeout(() => {
                    // calculateHoursFromTime();
                }, 100);
            }
        });

        $('#toHour').on('input', function () {
            if ($(this).val()) {
                setTimeout(() => {
                    // calculateHoursFromTime();
                }, 100);
            }
        });

        $('#submitid').on('click', async function () {
            $(this).prop('disabled', true);
            try {
                await handleSubmit();
            } finally {
                setTimeout(() => {
                    $(this).prop('disabled', false);
                }, 500);
            }
        });

        $('#clearbuttonid').on('click', function () {
            clearForm();
        });
    });

    function GetAllLeave(Compid) {
        $.ajax({
            url: `${apiBase}/LeaveMasterAPI/GetAllLeave`,
            type: 'GET',
            data: { CompId: Compid },
            success: function (response) {
                var data = response.data || [];

                if (data.length > 0) {
                    leaveTypesData = data;
                    leaveTypeMapping = {};
                    data.forEach(function (item) {
                        leaveTypeMapping[item.leave_TypeId] = item.leave_Name;
                        $('#Leavetypeid').append(`<option value="${item.leave_TypeId}">${item.leave_Name}</option>`);
                    });
                }
            },
            error: function () {
                console.log("Error loading leave types");
            }
        });
    }

    function handleLeaveTypeChange() {
        const leaveTypeId = $('#Leavetypeid').val();
        const leaveTypeName = leaveTypeMapping[leaveTypeId];

        clearValidationErrors();
        resetFormFields();

        if (leaveTypeId === "0") {
            $('#formdateid').prop('readonly', true);
            $('#todateid').prop('readonly', true);
            return;
        }

        switch (leaveTypeName) {
            case 'Half Day':
                setupHalfDayLeave();
                break;
            case 'Short Leave':
                setupShortLeave();
                break;
            case 'Comp-Off Leave':
                setupCompOffLeave();
                break;
            case 'LWP':
                setupLWPLeave();
                break;
            default:
                setupRegularLeave();
                break;
        }
    }

    function setupHalfDayLeave() {
        $('#formdateid').prop('readonly', false);
        $('#todateid').prop('readonly', true);
        $('#halfDayTypeRow').show();
        $('#daysHoursLabel').text('No. of Days:');
        $('#nodaysid').removeAttr('oninput');
       
        $('#nodaysid').removeAttr('title');
        updateHalfDayOptions([], "Select a date to see available half-day options");
    }

       function setupShortLeave() {
           debugger;
        $('#formdateid').prop('readonly', false);
        $('#todateid').prop('readonly', true);
        $('#shortLeaveSection').show();
        $('#daysHoursLabel').text('No. of Hours:');
        $('#nodaysid').attr('title', 'Only 1 and 2 are allowed');

       $('#nodaysid').attr('oninput', "this.value = this.value.replace(/[^1-9]/g, '').slice(0, 1)");

        $('#nodaysid').prop('readonly', false); // Make readonly for short leave
        $('#shortLeaveInfo').show();
        $('#shortLeaveMessage, #compOffInfoMessage, #lwpInfoMessage').remove();
        $('#nodaysid').after('<div id="shortLeaveMessage" style="color: #17a2b8; font-size: 12px; margin-top: 5px;">Short Leave: Can only be applied for past or current date</div>');
    }

    function setupCompOffLeave() {
        $('#formdateid').prop('readonly', false);
        $('#todateid').prop('readonly', false);
        $('#halfDayCheckboxRow').show();
        $('#daysHoursLabel').text('No. of Days:');
        $('#nodaysid').after('<div id="compOffInfoMessage" style="color: #17a2b8; font-size: 12px; margin-top: 5px;">Comp Off: Based on overtime work in last 30 days</div>');
    }

    function setupLWPLeave() {
        $('#formdateid').prop('readonly', false);
        $('#todateid').prop('readonly', false);
        $('#halfDayCheckboxRow').show();
        $('#daysHoursLabel').text('No. of Days:');
        $('#nodaysid').after('<div id="lwpInfoMessage" style="color: #17a2b8; font-size: 12px; margin-top: 5px;">LWP: Maximum 30 days allowed</div>');
    }

    function setupRegularLeave() {
        $('#formdateid').prop('readonly', false);
        $('#todateid').prop('readonly', false);
        $('#halfDayCheckboxRow').show();
        $('#daysHoursLabel').text('No. of Days:');
    }


        function resetFormFields() {
        $('#formdateid').val('');
        $('#todateid').val('');
        $('#nodaysid').val('').prop('readonly', false); // Reset to editable by default
        $('#fromHour').val('');
        $('#toHour').val('');
        $('#halfDayTypeRow').hide();
        $('#halfDayCheckboxRow').hide();
        $('#shortLeaveSection').hide();
        $('#halfDayCheckbox').prop('checked', false);
        $('#halfDayType').val('');
        $('.form-section:has(#LeaveDetailsid)').hide();
        $('#halfDayValidationMessage, #lwpInfoMessage, #compOffInfoMessage, #shortLeaveMessage').remove();

        $('#daysHoursLabel').text('No. of Days:');
    }


    function clearValidationErrors() {
        $('.error-message').hide();
        $('.form-control, .form-select').removeClass('is-invalid');
    }

    function handleFromDateChange() {
        const leaveTypeId = $('#Leavetypeid').val();
        const leaveTypeName = leaveTypeMapping[leaveTypeId];
        const fromDate = $('#formdateid').val();

        if (leaveTypeId === "0") {
            $('#formdateid').val('');
            return;
        }

        clearValidationErrors();

        if (!fromDate) return;

        if (!validateDateRestrictions(fromDate, leaveTypeName)) {
            return;
        }

        switch (leaveTypeName) {
            case 'Half Day':
                handleHalfDayFromDate(fromDate);
                break;
            case 'Short Leave':
                handleShortLeaveFromDate(fromDate);
                break;
            case 'Comp-Off Leave':
                handleCompOffFromDate(fromDate);
                break;
            default:
                handleRegularFromDate(fromDate, leaveTypeName);
                break;
        }
    }

    function validateDateRestrictions(selectedDate, leaveTypeName) {
        const selectedDateTime = new Date(selectedDate);
        const currentDateTime = new Date();
        currentDateTime.setHours(0, 0, 0, 0);
        selectedDateTime.setHours(0, 0, 0, 0);

        if (leaveTypeName === 'Short Leave' && selectedDateTime > currentDateTime) {
            $('#formdateid').addClass('is-invalid');
            $('#futureDateError').show();
            return false;
        }

        const daysDifference = Math.ceil((currentDateTime.getTime() - selectedDateTime.getTime()) / (1000 * 3600 * 24));
        if (daysDifference > 30) {
            $('#formdateid').addClass('is-invalid');
            $('#pastDateError').show();
            return false;
        }

        return true;
    }

    function handleHalfDayFromDate(fromDate) {
        $('#todateid').val(fromDate);
        $('#nodaysid').val('0.5').prop('readonly', false); // Make editable
        validateHalfLeave(fromDate);
        refreshLeaveDetailsGrid();
    }
    function handleShortLeaveFromDate(fromDate) {
        $('#todateid').val(fromDate);
        $('#nodaysid').prop('readonly', false); // Make readonly for short leave
        validateShortLeaveDate(fromDate);
        refreshLeaveDetailsGrid();
    }

    function handleCompOffFromDate(fromDate) {
        validateCompOffLeave(fromDate);
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');
        if (isHalfDayChecked) {
            $('#todateid').val(fromDate).prop('readonly', true);
            validateHalfDayForDate(fromDate, 'Comp-Off Leave');
        } else {
            $('#todateid').prop('readonly', false);
            validateFullDayLeave(fromDate, 'Comp-Off Leave');
        }
        calculateDaysFromDates();
    }

    function handleRegularFromDate(fromDate, leaveTypeName) {
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');
        if (isHalfDayChecked) {
            $('#todateid').val(fromDate).prop('readonly', true);
            validateHalfDayForDate(fromDate, leaveTypeName);
        } else {
            $('#todateid').prop('readonly', false);
            validateFullDayLeave(fromDate, leaveTypeName);
        }
        calculateDaysFromDates();
    }

    function handleToDateChange() {
        const leaveTypeId = $('#Leavetypeid').val();
        if (leaveTypeId === "0") {
            $('#todateid').val('');
            return;
        }
        calculateDaysFromDates();
    }


    function handleFromHourChange() {
        const fromHour = $('#fromHour').val();
        $('#fromHour').removeClass('is-invalid');
        $('#fromHourError').hide();

        if (fromHour) {  
            // calculateHoursFromTime();
            validateShortLeaveHours();
        } else {
     
            clearShortLeaveCalculations();
        }
    }

    // function handleToHourChange() {
    //     const toHour = $('#toHour').val();

     
    //     // $('#toHour').removeClass('is-invalid');
    //     $('#toHourError').hide();

    //     if (toHour) {
    //         calculateHoursFromTime();
    //         validateShortLeaveHours();
    //     } else {

    //         clearShortLeaveCalculations();
    //     }
    // }

       function calculateHoursFromTime() {
           debugger;
         const fromHour = $('#fromHour').val(); 
             const noOfHours = $('#nodaysid').val();

             if (!fromHour || !noOfHours) {
     
                 return;
             }
  

        try {
            
            const [hourStrt, minuteStr] = fromHour.split(':');
            let hours = parseInt(hourStrt);
            let minutes = parseInt(minuteStr);

            // Add the hours
            hours +=  parseInt(noOfHours);

            // Wrap around if hours exceed 23
            if (hours >= 24) {
              hours = hours % 24;
            }

            // Format back to HH:mm
            const formattedHour = hours.toString().padStart(2, '0');
            const formattedMinute = minutes.toString().padStart(2, '0');
            const toHour = `${formattedHour}:${formattedMinute}`;

            // Set the result in the time input
            $('#toHour').val(toHour);
            // Clear any previous errors
            $('#timeRangeError').hide();

        } catch (error) {
            console.error('Error calculating hours:', error);
            $('#nodaysid').val('').prop('readonly', true);
        }
    }

    $('#nodaysid').blur(()=>{
        calculateHoursFromTime();
    });

    function clearShortLeaveCalculations() {
        $('#nodaysid').val('').prop('readonly', true); // Keep readonly when clearing
    }

    function validateShortLeaveDate(selectedDate) {
   
        getAttendanceData(selectedDate, selectedDate).then(attendanceData => {
            if (attendanceData && attendanceData.length > 0) {
                const dayAttendance = attendanceData[0];
                validateShortLeaveAvailability(dayAttendance);
            } else {
                showShortLeaveSuccess("No attendance record found. You can apply for short leave.");
            }
        }).catch(error => {
            console.error("Error validating short leave:", error);
            showShortLeaveSuccess("Error checking attendance. You can apply for short leave.");
        });
    }

    function validateShortLeaveAvailability(attendanceRecord) {
        const workingHours = attendanceRecord.workingHours || 0;
        const attendanceStatus = attendanceRecord.attendanceStatus?.trim();
        const inTime = attendanceRecord.inTime && attendanceRecord.inTime !== '-' ? new Date(attendanceRecord.inTime) : null;
        const outTime = attendanceRecord.outTime && attendanceRecord.outTime !== '-' ? new Date(attendanceRecord.outTime) : null;

    
        if (workingHours >= 9) {
            showShortLeaveError(`Cannot apply short leave. You have already completed ${workingHours} working hours.`);
            return;
        }

        if (attendanceStatus === 'A' && workingHours === 0) {
            showShortLeaveSuccess("You can apply for short leave as you were absent.");
            return;
        }

     
        const remainingHours = 9 - workingHours;
        if (remainingHours > 0) {
            showShortLeaveSuccess(`You can apply for up to ${remainingHours.toFixed(1)} hours of short leave.`);
        } else {
            showShortLeaveError("Cannot apply short leave. Working hours requirement already fulfilled.");
        }
    }

    function showShortLeaveError(message) {
        $('#shortLeaveInfo').removeClass('short-leave-info').addClass('error-message').text(message).show();
        $('#fromHour, #toHour').prop('disabled', true);
    }

    function showShortLeaveSuccess(message) {
        $('#shortLeaveInfo').removeClass('error-message').addClass('short-leave-info').text(message).show();
        $('#fromHour, #toHour').prop('disabled', false);
    }

        function validateShortLeaveHours() {
        const fromDate = $('#formdateid').val();
        const fromHour = $('#fromHour').val();
        const toHour = $('#toHour').val();

        if (!fromDate || !fromHour || !toHour) return;

        clearShortLeaveErrors();

        // Use selected date for validation
        const startTime = new Date(`${fromDate}T${fromHour}:00`);
        const endTime = new Date(`${fromDate}T${toHour}:00`);

        if (endTime <= startTime) {
            $('#toHour').addClass('is-invalid');
            $('#timeRangeError').show();
            $('#nodaysid').val('').prop('readonly', true);
            return;
        }

        const leaveHours = (endTime - startTime) / (1000 * 3600);

        // Update the hours in the input field
        $('#nodaysid').val(leaveHours.toFixed(2)).prop('readonly', true);

        if (leaveHours > 8) {
            showShortLeaveTimeError("Short leave cannot exceed 8 hours");
            return;
        }

        if (leaveHours < 0.5) {
            showShortLeaveTimeError("Short leave must be at least 30 minutes");
            return;
        }

        // Get attendance data for validation
        getAttendanceData(fromDate, fromDate).then(attendanceData => {
            if (attendanceData && attendanceData.length > 0) {
                const dayAttendance = attendanceData[0];
                validateShortLeaveAgainstAttendance(dayAttendance, fromHour, toHour, leaveHours);
            } else {
                showShortLeaveSuccess(`You can apply for ${leaveHours.toFixed(2)} hours short leave.`);
            }
        }).catch(error => {
            console.error("Error validating short leave hours:", error);
            showShortLeaveTimeError("Error checking attendance. Please try again.");
        });
    }



        function validateShortLeaveAgainstAttendance(attendanceRecord, fromHour, toHour, requestedHours) {
        const workingHours = attendanceRecord.workingHours || 0;
        const attendanceStatus = attendanceRecord.attendanceStatus?.trim();
        const inTime = attendanceRecord.inTime && attendanceRecord.inTime !== '-' ? new Date(attendanceRecord.inTime) : null;
        const outTime = attendanceRecord.outTime && attendanceRecord.outTime !== '-' ? new Date(attendanceRecord.outTime) : null;

        // Get the actual hours from the form (not converted to days)
        const actualRequestedHours = parseFloat($('#nodaysid').val()) || 0;

        if (workingHours >= 9) {
            showShortLeaveTimeError(`Cannot apply short leave. You have already completed ${workingHours} working hours (full day).`);
            return;
        }

        // If absent with no working hours, allow short leave
        if (attendanceStatus === 'A' && workingHours === 0) {
            showShortLeaveSuccess(`You were absent. You can apply for ${actualRequestedHours} hours short leave.`);
            return;
        }

        // Check if total hours would exceed 9
        const totalHours = workingHours + actualRequestedHours;
        if (totalHours > 9) {
            showShortLeaveTimeError(`Cannot apply ${actualRequestedHours} hours short leave. Total would be ${totalHours.toFixed(1)} hours (maximum 9 allowed).`);
            return;
        }

        // If employee has worked, check for time conflicts using selected date
        if (inTime && outTime && workingHours > 0) {
            const conflictResult = checkTimeConflict(inTime, outTime, fromHour, toHour);
            if (conflictResult.hasConflict) {
                showShortLeaveTimeError(conflictResult.message);
                return;
            }
        }

        const remainingHours = Math.max(0, 9 - workingHours);
        showShortLeaveSuccess(`Short leave approved. You can take up to ${remainingHours.toFixed(1)} more hours today.`);
    }


     function checkTimeConflict(inTime, outTime, fromHour, toHour) {
        try {
            // Get working hours in minutes
            const workStartMinutes = inTime.getHours() * 60 + inTime.getMinutes();
            const workEndMinutes = outTime.getHours() * 60 + outTime.getMinutes();

            // Use the selected date for leave time calculation
            const selectedDate = $('#formdateid').val();
            const leaveStartTime = new Date(`${selectedDate}T${fromHour}:00`);
            const leaveEndTime = new Date(`${selectedDate}T${toHour}:00`);

            const leaveStartMinutes = leaveStartTime.getHours() * 60 + leaveStartTime.getMinutes();
            const leaveEndMinutes = leaveEndTime.getHours() * 60 + leaveEndTime.getMinutes();

            // Check for overlap
            const hasOverlap = (leaveStartMinutes < workEndMinutes && leaveEndMinutes > workStartMinutes);

            if (hasOverlap) {
                const workStartTime = inTime.toLocaleTimeString('en-IN', {hour: '2-digit', minute: '2-digit'});
                const workEndTime = outTime.toLocaleTimeString('en-IN', {hour: '2-digit', minute: '2-digit'});

                return {
                    hasConflict: true,
                    message: `Time conflict detected. You worked from ${workStartTime} to ${workEndTime}. Cannot apply leave during working hours.`
                };
            }

            return { hasConflict: false, message: '' };

        } catch (error) {
            console.error('Error checking time conflict:', error);
            return {
                hasConflict: true,
                message: 'Error validating time range. Please check your selected times.'
            };
        }
    }



    function showShortLeaveTimeError(message) {
        $('#workingHourError').text(message).show();
        $('#fromHour, #toHour').addClass('is-invalid');
    }

    function clearShortLeaveErrors() {
        $('#workingHourError, #hoursError, #timeRangeError').hide();
        $('#fromHour, #toHour, #nodaysid').removeClass('is-invalid');
    }


    // function validateShortLeaveFields() {
    //     let isValid = true;
    //     const fromHour = $('#fromHour').val();
    //     const toHour = $('#toHour').val();

    //     $('#fromHourError, #toHourError, #timeRangeError, #hoursError, #workingHourError').hide();
    //     $('#fromHour, #toHour, #nodaysid').removeClass('is-invalid');

    //     if (!fromHour) {
    //         $('#fromHour').addClass('is-invalid');
    //         $('#fromHourError').show();
    //         isValid = false;
    //     }

    //     if (!toHour) {
    //         $('#toHour').addClass('is-invalid');
    //         $('#toHourError').show();
    //         isValid = false;
    //     }

    //     if (fromHour && toHour) {
    //         const startTime = new Date(`1970-01-01T${fromHour}:00`);
    //         const endTime = new Date(`1970-01-01T${toHour}:00`);

    //         if (endTime <= startTime) {
    //             $('#toHour').addClass('is-invalid');
    //             $('#timeRangeError').show();
    //             isValid = false;
    //         } else {
    //             const timeDiff = endTime.getTime() - startTime.getTime();
    //             const hours = timeDiff / (1000 * 3600);

    //             if (hours < 0.5) {
    //                 $('#toHour').addClass('is-invalid');
    //                 $('#hoursError').text('Minimum 0.5 hours required').show();
    //                 isValid = false;
    //             } else if (hours > 8) {
    //                 $('#toHour').addClass('is-invalid');
    //                 $('#hoursError').text('Maximum 8 hours allowed').show();
    //                 isValid = false;
    //             }
    //         }
    //     }

    //     const calculatedDays = $('#nodaysid').val();
    //     if (!calculatedDays || parseFloat(calculatedDays) <= 0) {
    //         $('#nodaysid').addClass('is-invalid');
    //         $('#hoursError').text('Please select valid time range').show();
    //         isValid = false;
    //     }

    //     return isValid;
    // }

    function clearShortLeaveFields() {
        $('#fromHour').val('');
        $('#toHour').val('');
        $('#nodaysid').val('');
        $('#fromHour, #toHour, #nodaysid').removeClass('is-invalid');
        $('#fromHourError, #toHourError, #timeRangeError, #hoursError').hide();
    }


    function getAttendanceData(startDate, endDate) {
        const cacheKey = `${startDate}_${endDate}`;
        const now = Date.now();


        if (attendanceCache[cacheKey] &&
            attendanceCache[cacheKey].timestamp &&
            (now - attendanceCache[cacheKey].timestamp) < cacheTimeout) {    
            return Promise.resolve(attendanceCache[cacheKey].data);
        }

        const formData = new FormData();
        formData.append("EmpId", Empid);
        formData.append("StartDate", startDate);
        formData.append("EndDate", endDate);
        formData.append("RecordType", "All");

        return new Promise((resolve, reject) => {
            $.ajax({
                url: apiBase + '/EmployeeInOut/GetEmployeeInOutReport',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    let data = null;
                    if (response?.isSuccess && response.data && response.data.length > 0) {
                        data = response.data;
                    }

                    // Cache the result
                    attendanceCache[cacheKey] = {
                        data: data,
                        timestamp: now
                    };

                    resolve(data);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching attendance data:', error);
                    reject(error);
                }
            });
        });
    }

    function validateHalfLeave(selectedDate) {
        getAttendanceData(selectedDate, selectedDate).then(attendanceData => {
            if (attendanceData && attendanceData.length > 0) {
                const attendanceRecord = attendanceData[0];
                validateHalfDayByAttendanceData(attendanceRecord, selectedDate, 'Half Day');
            } else {
                updateHalfDayOptions(['first', 'second'], "No attendance record found. You can apply for either half.");
            }
        }).catch(error => {
            console.error('Error validating half day leave:', error);
            updateHalfDayOptions(['first', 'second'], "Error checking attendance. You can apply for either half.");
        });
    }

    function validateCompOffLeave(selectedDate) {
        const thirtyDaysAgo = new Date();
        thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);
        const startDate = thirtyDaysAgo.toISOString().split('T')[0];
        const endDate = new Date().toISOString().split('T')[0];

        getAttendanceData(startDate, endDate).then(attendanceData => {
            if (attendanceData && attendanceData.length > 0) {
                checkCompOffEligibility(attendanceData, selectedDate);
            } else {
                showCompOffError("No attendance records found for last 30 days. Comp Off not applicable.");
            }
        }).catch(error => {
            console.error('Error checking comp off eligibility:', error);
            showCompOffError("Error checking comp off eligibility.");
        });
    }

    function checkCompOffEligibility(attendanceData, selectedDate) {
        const eligibleDays = attendanceData.filter(record => {
            const statusReason = record.statusReason || '';
            const hasWorked = record.workingHours > 0;
            const isWeekoffOrHoliday = statusReason.includes('Sunday') ||
                                     statusReason.includes('Saturday') ||
                                     statusReason.includes('Holiday') ||
                                     record.attendanceStatus === 'W';
            return hasWorked && isWeekoffOrHoliday;
        });

        if (eligibleDays.length === 0) {
            showCompOffError("No overtime work found on weekoffs/holidays in last 30 days. Comp Off not applicable.");
            return;
        }

        let availableCompOffDays = 0;
        eligibleDays.forEach(day => {
            if (day.workingHours >= 9) {
                availableCompOffDays += 1;
            } else if (day.workingHours >= 4.5) {
                availableCompOffDays += 0.5;
            }
        });

        if (availableCompOffDays === 0) {
            showCompOffError("No eligible comp off days available. Minimum 4.5 hours work required.");
            return;
        }

        $('#compOffInfoMessage').remove();
        $('#nodaysid').after(`<div id="compOffInfoMessage" style="color: #28a745; font-size: 12px; margin-top: 5px;">Comp Off Available: ${availableCompOffDays} days based on overtime work</div>`);

        validateFullDayLeave(selectedDate, 'Comp-Off Leave');
    }

    function showCompOffError(message) {
        $('#formdateid').addClass('is-invalid');
        $('#compOffInfoMessage').remove();
        $('#formdateid').after(`<div id="compOffInfoMessage" class="error-message" style="display: block; color: #dc3545; font-size: 12px; margin-top: 5px;">${message}</div>`);
    }

    function validateHalfDayForDate(selectedDate, leaveTypeName) {
        getAttendanceData(selectedDate, selectedDate).then(attendanceData => {
            if (attendanceData && attendanceData.length > 0) {
                const attendanceRecord = attendanceData[0];
                validateHalfDayByAttendanceData(attendanceRecord, selectedDate, leaveTypeName);
            } else {
                updateHalfDayOptions(['first', 'second'], "No attendance record found. You can apply for either half.");
            }
        }).catch(error => {
            console.error('Error checking attendance:', error);
            updateHalfDayOptions(['first', 'second'], "Error checking attendance. You can apply for either half.");
        });
    }

    function handleHalfDayCheckboxChange() {
        const isChecked = $('#halfDayCheckbox').is(':checked');
        const fromDate = $('#formdateid').val();
        const leaveTypeId = $('#Leavetypeid').val();
        const leaveTypeName = leaveTypeMapping[leaveTypeId];

        if (isChecked) {
            $('#halfDayTypeRow').show();
            if (fromDate) {
                $('#todateid').val(fromDate).prop('readonly', true);
                validateHalfDayForDate(fromDate, leaveTypeName);
            } else {
                $('#todateid').prop('readonly', true);
            }
        } else {
            $('#halfDayTypeRow').hide();
            $('#todateid').prop('readonly', false);
            $('#halfDayType').val('');
            $('#halfDayValidationMessage').remove();
            if (fromDate) {
                validateFullDayLeave(fromDate, leaveTypeName);
            }
        }

        calculateDaysFromDates();
    }

    function handleHalfDayTypeChange() {
        $('#halfDayTypeError').hide();
        $('#halfDayType').removeClass('is-invalid');
    }

    function validateHalfDayByAttendanceData(attendanceData, selectedDate, leaveTypeName) {
        const workingHours = attendanceData.workingHours || 0;
        const attendanceStatus = attendanceData.attendanceStatus?.trim();
        const inTime = attendanceData.inTime && attendanceData.inTime !== '-' ? new Date(attendanceData.inTime) : null;
        const outTime = attendanceData.outTime && attendanceData.outTime !== '-' ? new Date(attendanceData.outTime) : null;

        let allowedHalves = [];
        let validationMessage = "";

        if (attendanceStatus === 'A' && workingHours === 0) {
            allowedHalves = ['first', 'second'];
            validationMessage = "You were absent. You can apply for either half day leave.";
            updateHalfDayOptions(allowedHalves, validationMessage);
            return;
        }

        if (workingHours >= 9) {
            allowedHalves = [];
            validationMessage = `You worked ${workingHours} hours (full day). Half day leave cannot be applied.`;
            updateHalfDayOptions(allowedHalves, validationMessage);
            return;
        }

        if (workingHours >= 4.5 && workingHours < 9) {
            if (inTime && outTime) {
                const shiftMidHour = 13;
                const inHour = inTime.getHours();
                const outHour = outTime.getHours();

                if (inHour < shiftMidHour && outHour <= shiftMidHour) {
                    allowedHalves = ['second'];
                    validationMessage = `You worked ${workingHours} hours in first half. You can apply for second half leave.`;
                } else if (inHour >= shiftMidHour && outHour > shiftMidHour) {
                    allowedHalves = ['first'];
                    validationMessage = `You worked ${workingHours} hours in second half. You can apply for first half leave.`;
                } else {
                    allowedHalves = [];
                    validationMessage = `You worked ${workingHours} hours across both halves. Half day leave cannot be applied.`;
                }
            } else {
                allowedHalves = [];
                validationMessage = `You worked ${workingHours} hours. Half day leave cannot be applied.`;
            }
        } else if (workingHours > 0 && workingHours < 4.5) {
            if (inTime) {
                const inHour = inTime.getHours();
                if (inHour < 13) {
                    allowedHalves = ['second'];
                    validationMessage = `You worked ${workingHours} hours in first half. You can apply for second half leave.`;
                } else {
                    allowedHalves = ['first'];
                    validationMessage = `You worked ${workingHours} hours in second half. You can apply for first half leave.`;
                }
            } else {
                allowedHalves = ['first', 'second'];
                validationMessage = `You worked ${workingHours} hours. You can apply for either half day leave.`;
            }
        } else {
            allowedHalves = ['first', 'second'];
            validationMessage = "No working hours recorded. You can apply for either half day leave.";
        }

        updateHalfDayOptions(allowedHalves, validationMessage);
    }

    function updateHalfDayOptions(allowedHalves, validationMessage = "") {
        const halfDayDropdown = $('#halfDayType');

        halfDayDropdown.empty().append('<option value="">-- Select Half Day --</option>');
        halfDayDropdown.removeClass('is-invalid');
        $('#halfDayTypeError').hide();
        $('#halfDayValidationMessage').remove();

        if (allowedHalves.length === 0) {
            halfDayDropdown.prop('disabled', true);
            if (validationMessage) {
                halfDayDropdown.after(`<div id="halfDayValidationMessage" class="error-message" style="display: block; color: #dc3545; font-size: 12px; margin-top: 5px;">${validationMessage}</div>`);
            }
        } else {
            halfDayDropdown.prop('disabled', false);
            if (allowedHalves.includes('first')) {
                halfDayDropdown.append('<option value="first">First Half</option>');
            }
            if (allowedHalves.includes('second')) {
                halfDayDropdown.append('<option value="second">Second Half</option>');
            }
            if (validationMessage) {
                halfDayDropdown.after(`<div id="halfDayValidationMessage" style="color: #28a745; font-size: 12px; margin-top: 5px;">${validationMessage}</div>`);
            }
        }
    }

    function loadLeaveDetailsGrid() {
        const leaveTypeId = $('#Leavetypeid').val();
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const shouldShowGrid = leaveTypeId !== "0" && fromDate && toDate;

        if (!shouldShowGrid) {
            $('.form-section:has(#LeaveDetailsid)').hide();
            $('#LeaveDetailsid').html('Select date range to view leave details');
            return;
        }

        if (isGridLoading) {
    
            return;
        }

        isGridLoading = true;
        $('.form-section:has(#LeaveDetailsid)').show();
        $('#LeaveDetailsid').html('<div class="text-center">Loading attendance details...</div>');

        try {
            const gridInstance = $("#LeaveDetailsid").dxDataGrid("instance");
            if (gridInstance) {
                gridInstance.dispose();
                $('#LeaveDetailsid').empty();
            }
        } catch (e) {
    
            $('#LeaveDetailsid').empty();
        }


        getAttendanceData(fromDate, toDate).then(data => {
            if (data && data.length > 0) {

                $('#LeaveDetailsid').empty();
                $("#LeaveDetailsid").dxDataGrid({
                    dataSource: data,
                    showBorders: true,
                    columnAutoWidth: true,
                    wordWrapEnabled: false,
                    width: '100%',
                    height: 'auto',
                    allowColumnResizing: true,
                    columnResizingMode: 'widget',
                    scrolling: { mode: 'standard' },
                    columns: [
                        {
                            dataField: "shiftDate",
                            caption: "Date",
                            cssClass: "text-center-cell",
                            width: 80,
                            customizeText: function (cellInfo) {
                                if (!cellInfo.value) return "-";
                                try {
                                    const date = new Date(cellInfo.value);
                                    if (isNaN(date.getTime())) return "-";
                                    return date.toLocaleDateString("en-IN", {
                                        day: "2-digit",
                                        month: "2-digit",
                                        year: "numeric"
                                    });
                                } catch (e) {
                                    return "-";
                                }
                            }
                        },
                        {
                            dataField: "monthDay",
                            caption: "Day",
                            cssClass: "text-center-cell",
                            width: 50
                        },
                        {
                            caption: "Status",
                            cssClass: "text-center-cell",
                            width: 100,
                            calculateCellValue: function (data) {
                                const leaveTypeId = $("#Leavetypeid").val();
                                const leaveType = leaveTypeMapping[leaveTypeId] || 'Leave';
                                const isHalfDay = $('#halfDayCheckbox').is(':checked') || leaveType === 'Half Day';
                                const halfDayType = $('#halfDayType').val();

                                if (!leaveType) return "-";

                                if (leaveType === 'Short Leave') {
                                    const fromHour = $('#fromHour').val();
                                    const toHour = $('#toHour').val();
                                    if (fromHour && toHour) {
                                        return `${leaveType} (${fromHour} - ${toHour})`;
                                    }
                                    return leaveType;
                                }

                                if (isHalfDay && halfDayType) {
                                    return `${leaveType} (${halfDayType === 'first' ? 'First Half' : 'Second Half'})`;
                                }
                                return leaveType;
                            }
                        },
                        {
                            dataField: "inTime",
                            caption: "In Time",
                            cssClass: "text-center-cell",
                            width: 70,
                            customizeText: function (cellInfo) {
                                if (!cellInfo.value || cellInfo.value === '-' || cellInfo.value === null) return "-";
                                try {
                                    const date = new Date(cellInfo.value);
                                    if (isNaN(date.getTime())) return "-";
                                    return date.toLocaleTimeString("en-IN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: true
                                    });
                                } catch (e) {
                                    return "-";
                                }
                            }
                        },
                        {
                            dataField: "outTime",
                            caption: "Out Time",
                            cssClass: "text-center-cell",
                            width: 70,
                            customizeText: function (cellInfo) {
                                if (!cellInfo.value || cellInfo.value === '-' || cellInfo.value === null) return "-";
                                try {
                                    const date = new Date(cellInfo.value);
                                    if (isNaN(date.getTime())) return "-";
                                    return date.toLocaleTimeString("en-IN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: true
                                    });
                                } catch (e) {
                                    return "-";
                                }
                            }
                        },
                        {
                            dataField: "workingHours",
                            caption: "Working H",
                            cssClass: "text-center-cell",
                            width: 50,
                            customizeText: function (cellInfo) {
                                return cellInfo.value ? cellInfo.value.toString() : '0';
                            }
                        },
                        {
                            dataField: "attendanceStatus",
                            caption: "Current Status",
                            cssClass: "text-center-cell",
                            width: 80,
                            customizeText: function (cellInfo) {
                                const status = cellInfo.value;
                                if (!status) return '-';
                                switch(status) {
                                    case 'P': return 'Present';
                                    case 'A': return 'Absent';
                                    case 'W': return 'Week Off';
                                    case 'H': return 'Holiday';
                                    case 'L': return 'Leave';
                                    default: return '-';
                                }
                            }
                        }
                    ],
                    paging: { enabled: true, pageSize: 10 },
                    onInitialized: function(e) {

                    },
                    onContentReady: function(e) {
            
                        isGridLoading = false;
                    },
                    onDisposing: function(e) {
                    
                        isGridLoading = false;
                    }
                });
            } else {
         
                $("#LeaveDetailsid").html('<div class="text-muted text-center p-3">No attendance records found for selected date range</div>');
                isGridLoading = false;
            }
        }).catch(error => {
            console.error('Error loading attendance details for grid:', error);
            $("#LeaveDetailsid").html('<div class="text-danger text-center p-3">Error loading attendance details. Please try again.</div>');
            isGridLoading = false;
        });
    }


    function refreshLeaveDetailsGrid() {
        const leaveTypeId = $('#Leavetypeid').val();
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();

        if (refreshTimeout) {
            clearTimeout(refreshTimeout);
        }

        if (leaveTypeId !== "0" && fromDate && toDate) {
            refreshTimeout = setTimeout(() => {
                loadLeaveDetailsGrid();
            }, 300);
        }
    }

    function calculateDaysFromDates() {
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const leaveTypeId = $('#Leavetypeid').val();
        const leaveTypeName = leaveTypeMapping[leaveTypeId];
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');

        $('#dateRangeError').hide();
        $('#todateid').removeClass('is-invalid');

        if (fromDate && toDate) {
            const startDate = new Date(fromDate);
            const endDate = new Date(toDate);

            if (endDate >= startDate) {
                const timeDiff = endDate.getTime() - startDate.getTime();
                const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;

                if (leaveTypeName === 'Half Day') {
                    $('#nodaysid').val('0.5').prop('readonly', false); // Make it editable
                } else if (leaveTypeName === 'Short Leave') {
       
                    if (!$('#nodaysid').val()) {
                        $('#nodaysid').prop('readonly', false);
                    }
                } else if (isHalfDayChecked) {
                    const halfDays = daysDiff * 0.5;
                    $('#nodaysid').val(halfDays).prop('readonly', false); // Make it editable
                } else {
                    $('#nodaysid').val(daysDiff).prop('readonly', false); // Make it editable
                }

  
                refreshLeaveDetailsGrid();
            } else {
                $('#todateid').addClass('is-invalid');
                $('#dateRangeError').show();
                $('#nodaysid').val('').prop('readonly', true);
                $('.form-section:has(#LeaveDetailsid)').hide();
            }
        }
    }


    function getLeaveBalance(leaveTypeId) {
        const leaveTypeName = leaveTypeMapping[leaveTypeId];
        if (!leaveTypeName) return 0;

        const balance = leaveBalanceData.find(item => item.leave === leaveTypeName);
        return balance ? parseFloat(balance.balance || 0) : 0;
    }

    function validateLeaveBalance(leaveTypeId, requestedDays) {
        const leaveTypeName = leaveTypeMapping[leaveTypeId];

        if (leaveTypeName === "LWP") {
            if (requestedDays > 30) {
                return {
                    isValid: false,
                    message: `LWP cannot exceed 30 days! Requested: ${requestedDays} days`
                };
            }
            return { isValid: true, message: "" };
        }

        // if (leaveTypeName === "Comp-Off Leave") {
        //     return { isValid: true, message: "" };
        // }

        // if (leaveTypeName === "Short Leave") {
       
        //     return { isValid: true, message: "" };
        // }

        const availableBalance = getLeaveBalance(leaveTypeId);
        if (requestedDays > availableBalance) {
            return {
                isValid: false,
                message: `Insufficient balance! Available: ${availableBalance}, Requested: ${requestedDays}`
            };
        }

        return { isValid: true, message: "" };
    }

    function checkDuplicateLeaveApplication(fromDate, toDate) {
        return new Promise((resolve, reject) => {
            let filter = {
                LeaveType: 0,
                Status: null,
                SearchFor: "",
                Emplooyeid: Empid,
                CompId: Compid
            };

            $.ajax({
                url: apiBase + '/LeaveApplication/GetLeaveApplications',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(filter),
                success: function (data) {
                    if (data.isSuccess && data.data && data.data.length > 0) {
                        const selectedFromDate = new Date(fromDate);
                        const selectedToDate = new Date(toDate);

                        const duplicateLeaves = data.data.filter(leave => {
                            const leaveFromDate = new Date(leave.fromDate);
                            const leaveToDate = new Date(leave.todate);
                            const isOverlapping = (selectedFromDate <= leaveToDate && selectedToDate >= leaveFromDate);
                            const isActiveStatus = leave.status === 'Pending' || leave.status === 'Approved';
                            return isOverlapping && isActiveStatus;
                        });

                        resolve({
                            hasDuplicate: duplicateLeaves.length > 0,
                            duplicateLeaves: duplicateLeaves
                        });
                    } else {
                        resolve({
                            hasDuplicate: false,
                            duplicateLeaves: []
                        });
                    }
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function checkSalaryProcessed(fromDate) {
        return new Promise((resolve, reject) => {
            const leaveDate = new Date(fromDate);
            const month = leaveDate.getMonth() + 1;
            const year = leaveDate.getFullYear();
            const requestData = {
                Month: parseInt(month),
                Year: parseInt(year),
                EmployeeCodes: 0,
                BranchId: 0
            };

            $.ajax({
                url: apiBase + '/MonthlySalaryDetailsAPI/GetAll',
                type: "POST",
                data: JSON.stringify(requestData),
                contentType: "application/json",
                success: function (response) {
                    resolve({
                        isProcessed: response.isSuccess && response.data && response.data.length > 0,
                        month: month,
                        year: year
                    });
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function loadReportingPerson() {
        $.ajax({
            url: `${apiBase}/LeaveApplication/GetReportingperson?Empid=${Empid}`,
            method: 'POST',
            dataType: 'json',
            success: function (response) {
                if (response.isSuccess && response.data) {
                    $('#repoid').val(response.data.fullName);
                    $('#reportingManagerId').val(response.data.id);
                }
            },
            error: function() {
                console.error('Error loading reporting person');
            }
        });
    }

    function loadLeaveBalance() {
        $.ajax({
            url: `${apiBase}/LeaveApplication/GetLeaveType`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ Compid: Compid, Empid: Empid }),
            success: function (response) {
                if (response.isSuccess && response.data && response.data.length > 0) {
                    leaveBalanceData = response.data;
                    $("#Leavebalanceid").dxDataGrid({
                        dataSource: response.data,
                        keyExpr: "leave",
                        showBorders: true,
                        columnAutoWidth: true,
                        columns: [
                            { dataField: "leave", caption: "Leave Type", cssClass: "text-center-cell" },
                            { dataField: "opening", caption: "Opening", cssClass: "text-center-cell" },
                            { dataField: "credit", caption: "Credit", cssClass: "text-center-cell" },
                            { dataField: "used", caption: "Used", cssClass: "text-center-cell" },
                           { dataField: "pendingLeaves", caption: "PendingLeaves", cssClass: "text-center-cell" },
                            { dataField: "balance", caption: "Balance", cssClass: "text-center-cell" }
                      
                        ]
                    });
                } else {
                    $("#Leavebalanceid").html('<div class="text-muted text-center">No leave balance found</div>');
                }
            },
            error: function () {
                Swal.fire("Error", "Could not load leave balance", "error");
            }
        });
    }

    function loadResponsibleDropdown() {
        $.ajax({
            url: `${apiBase}/CompOffAPI/ReportingPersonEmpVise?Compid=${Compid}&Empid=${Empid}`,
            method: 'POST',
            success: function (res) {
                const dropdown = $('#responsibleid');
                dropdown.empty().append('<option value="">-- Select Employee --</option>');
                if (res.isSuccess && res.data?.length > 0) {
                    res.data.forEach(item => {
                        dropdown.append(`<option value="${item.reportingPersonId}">${item.reportingPersonName}</option>`);
                    });
                }
            },
            error: function () {
                console.error('Error loading responsible dropdown');
            }
        });
    }

    function validateFullDayLeave(selectedDate, leaveTypeName) {
           getAttendanceData(selectedDate, selectedDate).then(attendanceData => {
               if (attendanceData && attendanceData.length > 0) {
                   const record = attendanceData[0];
                   const workingHours = record.workingHours || 0;
                   const status = record.attendanceStatus?.trim();

                   if (status === 'H' || status === 'W') {
                       $('#formdateid').addClass('is-invalid');
                       $('#attendanceError').text(`Cannot apply leave. ${selectedDate} is Holiday/Week Off`).show();
                   } else if (workingHours >= 9) {
                       $('#formdateid').addClass('is-invalid');
                       $('#attendanceError').text(`Cannot apply full day leave. You worked ${workingHours} hours`).show();
                   } else if (workingHours >= 4.5) {
                       $('#attendanceError').text(`You worked ${workingHours} hours. Consider half day leave`).show();
                   }
               }
           });
       }

    function validateAttendanceForDateRange(fromDate, toDate, leaveTypeName, halfDayType, fromHour = null, toHour = null) {
        return new Promise((resolve, reject) => {
            getAttendanceData(fromDate, toDate).then(attendanceData => {
                if (attendanceData && attendanceData.length > 0) {
                    // Check each date in the range
                    for (let record of attendanceData) {
                        const validation = validateSingleDateAttendance(record, leaveTypeName, halfDayType, fromHour, toHour);
                        if (!validation.isValid) {
                            resolve(validation);
                            return;
                        }
                    }

                    // All dates are valid
                    resolve({ isValid: true, message: "" });
                } else {
                    const today = new Date().toISOString().split('T')[0];
                    const fromDateTime = new Date(fromDate);
                    const currentDateTime = new Date();

                    if (fromDateTime <= currentDateTime && leaveTypeName !== 'LWP') {
                        console.log("No attendance records found for past/current dates");
                    }

                    resolve({ isValid: true, message: "" });
                }
            }).catch(error => {
                console.error('Error validating attendance:', error);
                reject(error);
            });
        });
    }

    function validateSingleDateAttendance(attendanceRecord, leaveTypeName, halfDayType, fromHour = null, toHour = null) {
        const workingHours = attendanceRecord.workingHours || 0;
        const attendanceStatus = attendanceRecord.attendanceStatus?.trim();
        const statusReason = attendanceRecord.statusReason || '';
        const shiftDate = attendanceRecord.shiftDate;
        const dateStr = new Date(shiftDate).toLocaleDateString('en-IN');
        const inTime = attendanceRecord.inTime && attendanceRecord.inTime !== '-' ? new Date(attendanceRecord.inTime) : null;
        const outTime = attendanceRecord.outTime && attendanceRecord.outTime !== '-' ? new Date(attendanceRecord.outTime) : null;

        if (attendanceStatus === 'H' || attendanceStatus === 'W' ||
            statusReason.includes('Holiday') || statusReason.includes('Sunday') || statusReason.includes('Saturday')) {
            return {
                isValid: false,
                message: `Cannot apply leave on ${dateStr} as it's already a Holiday/Week Off`,
                errorField: '#formdateid'
            };
        }

        if (attendanceStatus === 'L') {
            return {
                isValid: false,
                message: `Cannot apply leave on ${dateStr} as you're already on leave`,
                errorField: '#formdateid'
            };
        }


        if (leaveTypeName === 'Short Leave' && fromHour && toHour) {
            return validateShortLeaveAttendance(attendanceRecord, fromHour, toHour, dateStr);
        }

        if (workingHours >= 9) {
            return {
                isValid: false,
                message: `Cannot apply ${leaveTypeName} on ${dateStr}. You worked ${workingHours} hours (full day)`,
                errorField: '#formdateid'
            };
        }


        if (leaveTypeName === 'Half Day') {
            if (workingHours >= 4.5 && workingHours < 9) {
                if (inTime && outTime) {
                    const inHour = inTime.getHours();
                    const outHour = outTime.getHours();

                    if (halfDayType === 'first' && inHour < 13 && outHour <= 13) {
                        return {
                            isValid: false,
                            message: `Cannot apply first half leave on ${dateStr}. You already worked in first half`,
                            errorField: '#halfDayType'
                        };
                    }

                    if (halfDayType === 'second' && inHour >= 13 && outHour > 13) {
                        return {
                            isValid: false,
                            message: `Cannot apply second half leave on ${dateStr}. You already worked in second half`,
                            errorField: '#halfDayType'
                        };
                    }
                }
            }

            return { isValid: true, message: "" };
        }

     
        if (halfDayType) {
            if (workingHours >= 4.5 && workingHours < 9) {
                if (inTime) {
                    const inHour = inTime.getHours();

                    if (halfDayType === 'first' && inHour < 13) {
                        return {
                            isValid: false,
                            message: `Cannot apply first half ${leaveTypeName} on ${dateStr}. You already worked in first half`,
                            errorField: '#halfDayType'
                        };
                    }

                    if (halfDayType === 'second' && inHour >= 13) {
                        return {
                            isValid: false,
                            message: `Cannot apply second half ${leaveTypeName} on ${dateStr}. You already worked in second half`,
                            errorField: '#halfDayType'
                        };
                    }
                }
            }

            return { isValid: true, message: "" };
        }

    
        if (attendanceStatus === 'P' || workingHours > 0) {
            if (workingHours >= 4.5) {
                return {
                    isValid: false,
                    message: `Cannot apply full day ${leaveTypeName} on ${dateStr}. You worked ${workingHours} hours. Consider applying half day leave instead`,
                    errorField: '#formdateid'
                };
            }

            else if (workingHours > 0) {
                return {
                    isValid: false,
                    message: `Cannot apply full day ${leaveTypeName} on ${dateStr}. You worked ${workingHours} hours`,
                    errorField: '#formdateid'
                };
            }
        }

        return { isValid: true, message: "" };
    }

  
    function validateShortLeaveAttendance(attendanceRecord, fromHour, toHour, dateStr) {
        const workingHours = attendanceRecord.workingHours || 0;
        const attendanceStatus = attendanceRecord.attendanceStatus?.trim();
        const inTime = attendanceRecord.inTime && attendanceRecord.inTime !== '-' ? new Date(attendanceRecord.inTime) : null;
        const outTime = attendanceRecord.outTime && attendanceRecord.outTime !== '-' ? new Date(attendanceRecord.outTime) : null;

        const leaveStartTime = new Date(`1970-01-01T${fromHour}:00`);
        const leaveEndTime = new Date(`1970-01-01T${toHour}:00`);
        const leaveHours = (leaveEndTime - leaveStartTime) / (1000 * 3600);
 
        if (workingHours >= 9) {
            return {
                isValid: false,
                message: `Cannot apply short leave on ${dateStr}. You have already completed ${workingHours} working hours (full day).`,
                errorField: '#fromHour'
            };
        }


        if ((workingHours + leaveHours) > 9) {
            return {
                isValid: false,
                message: `Cannot apply ${leaveHours} hours short leave on ${dateStr}. Total would be ${(workingHours + leaveHours).toFixed(1)} hours (max 9 allowed).`,
                errorField: '#fromHour'
            };
        }

  
        if (inTime && outTime && workingHours > 0) {
            const conflictCheck = checkTimeConflict(inTime, outTime, fromHour, toHour);
            if (conflictCheck.hasConflict) {
                return {
                    isValid: false,
                    message: `${conflictCheck.message} on ${dateStr}`,
                    errorField: '#fromHour'
                };
            }
        }

        return { isValid: true, message: "" };
    }


    async function handleSubmit() {
        $('.error-message').hide();
        $('.form-control, .form-select').removeClass('is-invalid');

        let hasError = false;

        const leaveType = $('#Leavetypeid').val();
        const leaveTypeName = leaveTypeMapping[leaveType];
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const reason = $('#resonid').val().trim();
        const responsible = $('#responsibleid').val();
        const halfDayType = $('#halfDayType').val();

        const daysHoursValue = $('#nodaysid').val();
        let noOfDaysOrHours = parseFloat(daysHoursValue);

        let fromHour = null, toHour = null;
        if (leaveTypeName === 'Short Leave') {
            fromHour = $('#fromHour').val();
            toHour = $('#toHour').val();
            // Keep the actual hours for validation, don't convert to days yet
        }

        // Basic field validations
        if (leaveType === "0") {
            $('#Leavetypeid').addClass('is-invalid');
            $('#leaveTypeError').show();
            hasError = true;
        }

        if (!fromDate) {
            $('#formdateid').addClass('is-invalid');
            $('#fromDateError').show();
            hasError = true;
        }

        if (!toDate) {
            $('#todateid').addClass('is-invalid');
            $('#toDateError').show();
            hasError = true;
        }

        if (fromDate && toDate) {
            const startDate = new Date(fromDate);
            const endDate = new Date(toDate);

            if (endDate < startDate) {
                $('#todateid').addClass('is-invalid');
                $('#dateRangeError').show();
                hasError = true;
            }
        }

        // // Short Leave specific validations
        // if (leaveTypeName === 'Short Leave') {
        //     if (!validateShortLeaveFields()) {
        //         hasError = true;
        //     }

        //     if (!fromHour) {
        //         $('#fromHour').addClass('is-invalid');
        //         $('#fromHourError').show();
        //         hasError = true;
        //     }

        //     if (!toHour) {
        //         $('#toHour').addClass('is-invalid');
        //         $('#toHourError').show();
        //         hasError = true;
        //     }
        // }

        // Days/Hours validation - Fixed Logic
        if (!daysHoursValue || daysHoursValue.trim() === '' || isNaN(noOfDaysOrHours) || noOfDaysOrHours <= 0) {
            $('#nodaysid').addClass('is-invalid');
            if (leaveTypeName === 'Short Leave') {
                $('#hoursError').text('Please select valid time range').show();
            } else {
                $('#daysError').text('Please calculate number of days').show();
            }
            hasError = true;
        }

        if (!reason) {
            $('#resonid').addClass('is-invalid');
            $('#reasonError').show();
            hasError = true;
        }

        if (!responsible) {
            $('#responsibleid').addClass('is-invalid');
            $('#responsibleError').show();
            hasError = true;
        }

        // Half day validations
        if (leaveTypeName === 'Half Day' || $('#halfDayCheckbox').is(':checked')) {
            if (!halfDayType) {
                $('#halfDayType').addClass('is-invalid');
                $('#halfDayTypeError').show();
                hasError = true;
            }

            if (leaveTypeName === 'Half Day' && parseFloat(daysHoursValue) !== 0.5) {
                $('#nodaysid').addClass('is-invalid');
                $('#halfDayValidationError').show();
                hasError = true;
            }
        }

        // Leave balance validation
        if (leaveType !== "0" && !isNaN(noOfDaysOrHours) && noOfDaysOrHours > 0) {
            const balanceValidation = validateLeaveBalance(leaveType, noOfDaysOrHours);
            if (!balanceValidation.isValid) {
                $('#nodaysid').addClass('is-invalid');
                $('#insufficientBalanceError').text(balanceValidation.message).show();
                hasError = true;
            }
        }

        // Date validations
        const inputDate = new Date(fromDate);
        const currentDate = new Date();
        currentDate.setHours(0, 0, 0, 0);
        inputDate.setHours(0, 0, 0, 0);

        const daysDifference = Math.ceil((currentDate.getTime() - inputDate.getTime()) / (1000 * 3600 * 24));

        if (daysDifference > 30) {
            $('#formdateid').addClass('is-invalid');
            $('#pastDateError').text('Cannot apply leave more than 30 days in the past').show();
            hasError = true;
        }

        if (hasError) {
            return;
        }

        try {
            // Enhanced attendance validation including short leave
            const attendanceValidation = await validateAttendanceForDateRange(
                fromDate,
                toDate,
                leaveTypeName,
                halfDayType,
                fromHour,
                toHour
            );

            if (!attendanceValidation.isValid) {
                // Show the validation error
                if (attendanceValidation.errorField) {
                    $(attendanceValidation.errorField).addClass('is-invalid');
                }

                Swal.fire({
                    title: "Cannot Apply Leave",
                    text: attendanceValidation.message,
                    icon: "error",
                    confirmButtonText: "OK"
                });
                return;
            }

            // Check for duplicate applications
            const duplicateResult = await checkDuplicateLeaveApplication(fromDate, toDate);
            if (duplicateResult.hasDuplicate) {
                const duplicate = duplicateResult.duplicateLeaves[0];
                const statusText = duplicate.status === 'Pending' ? 'Pending' : 'Approved';
                Swal.fire({
                    title: "Leave Already Applied",
                    text: `You have already applied for leave on these dates. Status: ${statusText}`,
                    icon: "warning",
                    confirmButtonText: "OK"
                });
                return;
            }

            // Check salary processing for past months
            if (inputDate < currentDate) {
                const inputMonth = inputDate.getMonth();
                const currentMonth = currentDate.getMonth();
                const inputYear = inputDate.getFullYear();
                const currentYear = currentDate.getFullYear();

                if (inputYear < currentYear || (inputYear === currentYear && inputMonth < currentMonth)) {
                    const salaryResult = await checkSalaryProcessed(fromDate);
                    if (salaryResult.isProcessed) {
                        $('#formdateid').addClass('is-invalid');
                        $('#salaryError').text(`Cannot apply leave for ${salaryResult.month}/${salaryResult.year} as salary has already been processed`).show();
                        return;
                    }
                }
            }
            debugger;

            // Prepare and submit data
            const payload = {
                EmplooyeId: Empid,
                CompId: Compid,
                ReportingManagerId: parseInt($('#reportingManagerId').val()),
                LeaveType: parseInt(leaveType),
                ApplicationType: 'Regular',
                ApplicationDate: new Date(),
                FromDate: fromDate,
                Todate: toDate,
                No_Of_Date: noOfDaysOrHours,
                Reason: reason,
                Responsibleperson: parseInt(responsible),
                Day: halfDayType || null,
                Cancel_Weekoff: false,
                Send_Intimate: "false",
                LeaveStatus: "Pending"
     
    };

    if (leaveTypeName === 'Short Leave') {
        const hoursValue = parseFloat($('#nodaysid').val());
        payload.No_Of_Date = hoursValue / 8; // Store as days equivalent

        // Add time fields only for short leave
        payload.FromHour = fromHour ? fromHour + ":00" : null;
        payload.ToHour = toHour ? toHour + ":00" : null;
    }
            $.ajax({
                url: apiBase + '/LeaveApplication/AddLeaveapplication',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (response) {
                    if (response.isSuccess) {
                        Swal.fire({
                            title: "Success",
                            text: response.responseMessage,
                            icon: "success",
                            customClass: { popup: 'swal2-small' }
                        });
                        clearForm();
                        loadLeaveBalance(); 
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: response.responseMessage || "Failed to submit leave application",
                            icon: "error",
                            customClass: { popup: 'swal2-small' }
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Submit error:', xhr, status, error);
                    let errorMessage = "An error occurred while submitting";

                    if (xhr.responseJSON && xhr.responseJSON.responseMessage) {
                        errorMessage = xhr.responseJSON.responseMessage;
                    } else if (xhr.responseText) {
                        try {
                            const errorResponse = JSON.parse(xhr.responseText);
                            errorMessage = errorResponse.message || errorResponse.responseMessage || errorMessage;
                        } catch (e) {
                            // If parsing fails, use default message
                        }
                    }

                    Swal.fire({
                        title: "Error",
                        text: errorMessage,
                        icon: "error",
                        customClass: { popup: 'swal2-small' }
                    });
                }
            });

        } catch (err) {
            console.error('Submission error:', err);
            Swal.fire({
                title: "Error",
                text: "Unexpected error occurred while submitting",
                icon: "error",
                customClass: { popup: 'swal2-small' }
            });
        }
    }



    function clearForm() {
        // Reset all form fields
        $('#Leavetypeid').val('0');
        $('#formdateid').val('').prop('readonly', true);
        $('#todateid').val('').prop('readonly', true);
        $('#nodaysid').val('').prop('readonly', true);
        $('#resonid').val('');
        $('#responsibleid').val('');
        $('#halfDayType').val('');
        $('#halfDayCheckbox').prop('checked', false);

        // Clear short leave fields
        clearShortLeaveFields();

        // Hide conditional elements
        $('#halfDayTypeRow').hide();
        $('#halfDayCheckboxRow').hide();
        $('#shortLeaveSection').hide();
        $('.form-section:has(#LeaveDetailsid)').hide();

        // Remove validation messages and classes
        $('.form-control, .form-select').removeClass('is-invalid');
        $('.error-message').hide();
        $('#halfDayValidationMessage, #lwpInfoMessage, #compOffInfoMessage, #shortLeaveMessage').remove();

        // Reset labels
        $('#daysHoursLabel').text('No. of Days:');

        // Reset grid properly
        try {
            const gridInstance = $("#LeaveDetailsid").dxDataGrid("instance");
            if (gridInstance) {
                gridInstance.dispose();
            }
        } catch (e) {
            console.log("No grid to dispose in clearForm");
        }

        $("#LeaveDetailsid").empty().html('Select date range to view leave details');

        // Reset flags and clear cache
        isGridLoading = false;
        gridCallInProgress = false;
        attendanceCache = {}; // Clear attendance cache

        // Clear any pending timeouts
        if (refreshTimeout) {
            clearTimeout(refreshTimeout);
            refreshTimeout = null;
        }
    }
</script>