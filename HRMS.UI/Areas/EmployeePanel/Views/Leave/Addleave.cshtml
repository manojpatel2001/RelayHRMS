@{
    ViewData["Title"] = "Employee Panel";
    Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
    string baseUrl = ViewBag.BaseUrl;
    string apiBase = ViewBag.BaseUrlAPI;
}
    <title>Leave Application Form</title>
    <!-- Bootstrap CSS -->
    <!-- jQuery + Bootstrap + SweetAlert -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #ffffff;
    }

    .form-section {
        padding: 15px;
        margin-bottom: 15px;
        border: 1px solid #ccc;
    }

    .btn-custom {
        background-color: #3e4b6d;
        color: white;
        font-weight: 600;
        padding: 4px 12px;
        border: none;
        border-radius: 4px;
    }

        .btn-custom:hover {
            background-color: #2c3a57;
        }

    .search-panel-container {
        background-color: #3e4b6d;
        padding: 6px 15px;
        border-radius: 6px;
        margin-bottom: 15px;
    }

    .search-panel-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-heading {
        font-size: 15px;
        color: white;
        margin: 0;
    }

    .form-label {
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 4px;
    }

    .form-control-sm, .form-select-sm {
        height: calc(1.5em + .5rem + 2px);
        font-size: 0.875rem;
        padding: .25rem .5rem;
    }

    .text-center-cell {
        text-align: center !important;
    }

        .text-center-cell > div {
            text-align: center !important;
        }

    .error-message {
        color: #dc3545;
        font-size: 12px;
        margin-top: 5px;
        display: none;
    }

    .is-invalid {
        border-color: #dc3545 !important;
    }

    .half-day-dropdown {
        display: none;
    }

    .leave-balance-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 10px;
    }

        .leave-balance-table th,
        .leave-balance-table td {
            border: 1px solid #ddd;
            padding: 8px;
            text-align: center;
        }

        .leave-balance-table th {
            background-color: #3e4b6d;
            color: white;
            font-size: 13px;
        }

    .badge {
        display: inline-block;
        padding: 0.25em 0.4em;
        font-size: 75%;
        font-weight: 700;
        line-height: 1;
        text-align: center;
        white-space: nowrap;
        vertical-align: baseline;
        border-radius: 0.25rem;
    }

    .badge-success {
        color: #fff;
        background-color: #28a745;
    }

    .badge-warning {
        color: #212529;
        background-color: #ffc107;
    }

    .badge-danger {
        color: #fff;
        background-color: #dc3545;
    }

    .badge-secondary {
        color: #fff;
        background-color: #6c757d;
    }

    .badge-info {
        color: #fff;
        background-color: #17a2b8;
    }

    .half-day-checkbox {
        display: none;
    }

    .half-day-info {
        background-color: #e3f2fd;
        border: 1px solid #90caf9;
        padding: 8px;
        border-radius: 4px;
        font-size: 12px;
        color: #1976d2;
        margin-top: 5px;
        display: none;
    }
</style>
<div class="container-fluid">
    <div class="search-panel-wrapper">
        <div class="search-panel-container">
            <div class="search-panel-row">
                <div class="search-heading">Search Panel</div>
                <div class="col-auto">
                    <button class="btn btn-primary">Back</button>
                </div>
            </div>
        </div>
    </div>

    <div class="row">
        <div class="search-panel-wrapper">
            <div class="search-panel-container">
                <div class="search-panel-row">
                    <div class="search-heading">Leave Application:</div>
                </div>
            </div>
        </div>

        <div class="col-md-7">
            <div class="form-section">
                <!-- Row 1 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Application Date:</label>
                        <input type="text" class="form-control" id="applicationDate" readonly>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Employee:</label>
                        <input type="text" class="form-control" id="employedid" readonly>
                    </div>
                </div>

                <!-- Row 2 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">Reporting Person:</label>
                        <input type="text" class="form-control" id="repoid" readonly>
                        <input type="hidden" id="reportingManagerId" />
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Leave:</label>
                        <select class="form-control form-control-sm" id="Leavetypeid">
                            <option value="0">-- Select --</option>
                            <option value="1">Comp Off Leave</option>
                            <option value="2">Half Leave</option>
                            <option value="3">LWP</option>
                            <option value="4">Privilege Leave</option>
                        </select>
                        <span class="error-message" id="leaveTypeError">Please select leave type</span>
                    </div>
                </div>

                <!-- Row 3 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label">Application Type:</label><br />
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="leaveStatus" id="regularid" value="Regular">
                            <label class="form-check-label" for="regularid">Regular</label>
                        </div>
                        <div class="form-check form-check-inline">
                            <input class="form-check-input" type="radio" name="leaveStatus" id="Previousmonthid" value="Previous">
                            <label class="form-check-label" for="Previousmonthid">Previous Month</label>
                        </div>
                        <span class="error-message" id="applicationTypeError">Please select application type</span>
                    </div>
                </div>

                <!-- Row 4 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">From Date:</label>
                        <input type="date" class="form-control" id="formdateid">
                        <span class="error-message" id="fromDateError">Please select from date</span>
                        <span class="error-message" id="pastDateError">Cannot apply leave more than 30 days in the past</span>
                        <span class="error-message" id="attendanceError">You were present on this date. Cannot apply leave.</span>
                        <span class="error-message" id="salaryError">Cannot apply leave as salary has been processed</span>
                        <span class="error-message" id="halfDayCurrentDateError">Half day leave can only be applied for current date</span>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">To Date:</label>
                        <input type="date" class="form-control" id="todateid">
                        <span class="error-message" id="toDateError">Please select to date</span>
                        <span class="error-message" id="dateRangeError">To date cannot be earlier than from date</span>
                    </div>
                </div>
                <!-- Half Day Checkbox Row (New addition) -->
                <div class="row mb-3 half-day-checkbox" id="halfDayCheckboxRow">
                    <div class="col-md-12">
                        <div class="form-check">
                            <input class="form-check-input" type="checkbox" id="halfDayCheckbox">
                            <label class="form-check-label" for="halfDayCheckbox">
                            Half day
                            </label>
                        </div>
             
                    </div>
                </div>

                <!-- Half Day Type Dropdown (Hidden by default) -->
                <div class="row mb-3 half-day-dropdown" id="halfDayTypeRow">
                    <div class="col-md-6">
                        <label class="form-label">Half Day Type:</label>
                        <select class="form-control form-control-sm" id="halfDayType">
                            <option value="">-- Select Half Day --</option>
                            <option value="first">First Half</option>
                            <option value="second">Second Half</option>
                        </select>
                        <span class="error-message" id="halfDayTypeError">Please select half day type</span>
                    </div>
                </div>

                <!-- Row 5 -->
                <div class="row mb-3">
                    <div class="col-md-6">
                        <label class="form-label">No. of Days:</label>
                        <input type="number" class="form-control" id="nodaysid" min="0.5" step="0.5" readonly>
                        <span class="error-message" id="daysError">Invalid period! Please enter valid days</span>
                        <span class="error-message" id="insufficientBalanceError">Insufficient leave balance</span>
                        <span class="error-message" id="halfDayValidationError">For half day leave, only 0.5 days allowed</span>
                    </div>
                    <div class="col-md-6">
                        <label class="form-label">Responsible:</label>
                        <select class="form-control" id="responsibleid">
                            <option value="">-- Select Employee --</option>
                        </select>
                        <span class="error-message" id="responsibleError">Please select responsible person</span>
                    </div>
                </div>

                <!-- Row 6 -->
                <div class="row mb-3">
                    <div class="col-md-12">
                        <label class="form-label">Reason:</label>
                        <textarea class="form-control" id="resonid" rows="3"></textarea>
                        <span class="error-message" id="reasonError">Please enter reason for leave</span>
                    </div>
                </div>

                <!-- Buttons -->
                <div class="d-flex justify-content-end flex-wrap gap-2 mt-2">
                    <button type="button" class="btn btn-custom" id="submitid">Submit</button>
                    <button type="button" class="btn btn-custom" id="clearbuttonid">Clear</button>
                </div>
            </div>
        </div>

        <div class="col-md-5">
            <div class="form-section">
                <div class="card-header">
                    <h6 class="mb-0 form-label">Leave Balance</h6>
                </div>
                <div id="Leavebalanceid" style="margin-top: 10px; max-height: 300px; overflow: auto;">Loading...</div>
                <div id="recordSummary" class="text-center mt-2 text-muted"></div>
            </div>

            <!-- Leave Details Section -->
            <div class="form-section">
                <div class="card-header">
                    <h6 class="mb-0 form-label">Leave Details</h6>
                </div>
                <div id="LeaveDetailsid" style="margin-top: 10px; max-height: 400px; overflow: auto;">Select date range to view leave details</div>
            </div>
        </div>
    </div>
</div>

<script>
    const apiBase = '@apiBase';
    const Empid = parseInt(localStorage.getItem("EmployeeId"));
    const EmployeeName = localStorage.getItem("EmployeeName");
    const savedCompany = localStorage.getItem('selectedCompany');
    const companyDetails = JSON.parse(savedCompany || '{}');
    const Compid = parseInt(companyDetails.CompanyId);
    let leaveBalanceData = [];
    const today = new Date();

    $(document).ready(function () {
        // Set current date
        const day = String(today.getDate()).padStart(2, '0');
        const month = String(today.getMonth() + 1).padStart(2, '0');
        const year = today.getFullYear();
        const formattedDate = `${day}-${month}-${year}`;

        $('#applicationDate').val(formattedDate);
        $('#employedid').val(EmployeeName);

        loadReportingPerson();
        loadLeaveBalance();
        loadResponsibleDropdown();


    // Leave type change handler
    $('#Leavetypeid').on('change', function () {
        const leaveTypeId = $(this).val();
        const leaveTypeName = $(this).find('option:selected').text();

        // Clear previous errors
        $('.error-message').hide();
        $('.form-control, .form-select').removeClass('is-invalid');

        // Reset form
        $('#formdateid').val('').prop('readonly', leaveTypeId === "0");
        $('#todateid').val('').prop('readonly', leaveTypeId === "0");
        $('#nodaysid').val('').prop('readonly', true);
        $('#halfDayTypeRow').hide();
        $('#halfDayCheckboxRow').hide();
        $('#halfDayCheckbox').prop('checked', false);
        $('#halfDayInfo').hide();

        if (leaveTypeName === 'Half Leave') {
            // For half day leave - current date only
            $('#formdateid').val(today.toISOString().split('T')[0]).prop('readonly', true);
            $('#todateid').val(today.toISOString().split('T')[0]).prop('readonly', true);
            $('#nodaysid').val('0.5').prop('readonly', true);
            $('#halfDayTypeRow').show();
        } else if (leaveTypeId !== "0") {
            // For other leave types - enable date selection and show half day checkbox
            $('#formdateid').prop('readonly', false);
            $('#todateid').prop('readonly', false);
            $('#nodaysid').val('').prop('readonly', true);
            $('#halfDayCheckboxRow').show();
        }
    });


      // From date change handler - half day checkbox ke liye
    $('#formdateid').on('change', function () {
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');
        var fromDate = $(this).val();
        var toDate = $('#todateid').val();
        if(!toDate){
            toDate=fromDate;
        }
        if (isHalfDayChecked && fromDate) {
            // Agar half day checked hai to to date ko from date ke equal kar do
            $('#todateid').val(fromDate);
        }

        calculateDaysFromDates();
        loadLeaveDetails(fromDate,toDate);
    });

    // To date change handler - separate kar diye
    $('#todateid').on('change', function () {
        calculateDaysFromDates();
            var fromDate = $('#formdateid').val();
           var toDate = $('#todateid').val();

        loadLeaveDetails(fromDate,toDate);
    });

                // Half day checkbox handler
    // Half day checkbox handler
    $('#halfDayCheckbox').on('change', function () {
        const isChecked = $(this).is(':checked');
        const fromDate = $('#formdateid').val();

        if (isChecked) {
            // Half day checked - set to date same as from date and make it readonly
            if (fromDate) {
                $('#todateid').val(fromDate).prop('readonly', true);
            }
            $('#halfDayInfo').show();
            calculateDaysFromDates();
        } else {
            // Half day unchecked - enable to date selection
            $('#todateid').prop('readonly', false);
            $('#halfDayInfo').hide();
            calculateDaysFromDates();
        }
    });
        // Half day type change
        $('#halfDayType').on('change', function () {
            $('#halfDayTypeError').hide();
            $(this).removeClass('is-invalid');
        });

        // Submit button handler
        $('#submitid').on('click', async function () {
            await handleSubmit();
        });

        // Clear button handler
        $('#clearbuttonid').on('click', function () {
            clearForm();
        });
    });


    function loadLeaveDetails(fromDate,toDate) {
        
        const payload = {
            BranchId: null,
            EmpId: Empid,
            StartDate: fromDate,
            EndDate: toDate,
            RecordType: null
        };

        $.ajax({
            url: apiBase + '/AttendanceRegularizationAPI/GetAttendanceDetails',
            type: 'POST',
            data: JSON.stringify(payload),
            contentType: "application/json; charset=utf-8",
            success: function (response) {
                if (response?.isSuccess && response.data && response.data.length > 0) {
                    const data = response.data;

                    $("#LeaveDetailsid").dxDataGrid({
                        dataSource: data,
                        showBorders: true,
                        columnAutoWidth: true,
                        wordWrapEnabled: true,
                        columns: [
                            {
                                dataField: "shiftDate",
                                caption: "Date",
                                width: 120,
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value) return "";
                                    return new Date(cellInfo.value).toLocaleDateString("en-IN", {
                                        day: "2-digit",
                                        month: "2-digit",
                                        year: "numeric"
                                    });
                                }
                            },
                            {
                                dataField: "dayName", 
                                caption: "Week Day",
                                width: 150,
                                cssClass: "text-center-cell"
                            },
                            {
            caption: "Status",
            calculateCellValue: function () {  
                return $("#Leavetypeid option:selected").text();
            }
        },
                            {
                                dataField: "inTime",
                                caption: "In Time",
                                width: 100,
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value) return "";
                                    return new Date(cellInfo.value).toLocaleTimeString("en-IN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: true
                                    });
                                }
                            },
                            {
                                dataField: "outTime",
                                caption: "Out Time",
                                width: 100,
                                cssClass: "text-center-cell",
                                customizeText: function (cellInfo) {
                                    if (!cellInfo.value) return "";
                                    return new Date(cellInfo.value).toLocaleTimeString("en-IN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                        hour12: true
                                    });
                                }
                            }
                        ],
                        paging: {
                            enabled: true,
                            pageSize: 7
                        },
                        scrolling: {
                            mode: "standard"
                        }
                    });
                } else {
                    $("#LeaveDetailsid").html('<div class="text-muted text-center">No attendance records found for selected date range</div>');
                }
            },
            error: function (xhr, status, error) {
                $("#LeaveDetailsid").html('<div class="text-danger text-center">Error loading attendance details</div>');
                console.error('Error loading attendance details:', error);
            }
        });
    }


    // Helper function to format dates
    function formatDate(dateString) {
        if (!dateString) return 'N/A';
        const date = new Date(dateString);
        const day = String(date.getDate()).padStart(2, '0');
        const month = String(date.getMonth() + 1).padStart(2, '0');
        const year = date.getFullYear();
        return `${day}-${month}-${year}`;
    }


    function calculateDaysFromDates() {
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
        const isHalfDayChecked = $('#halfDayCheckbox').is(':checked');

        // Clear previous date errors
        $('#dateRangeError').hide();
        $('#todateid').removeClass('is-invalid');

        if (fromDate && toDate) {
            const startDate = new Date(fromDate);
            const endDate = new Date(toDate);

            if (endDate >= startDate) {
                const timeDiff = endDate.getTime() - startDate.getTime();
                const daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24)) + 1;

                if (leaveTypeName === 'Half Leave') {
                    $('#nodaysid').val('0.5');
                } else if (isHalfDayChecked) {
                    const halfDays = daysDiff * 0.5;
                    $('#nodaysid').val(halfDays);
                } else {
                    $('#nodaysid').val(daysDiff);
                }
            } else {
                $('#todateid').addClass('is-invalid');
                $('#dateRangeError').show();
                $('#nodaysid').val('');
            }
        }
    }

    // Function to check if date is in the past
    function isPastDate(dateString) {
        const inputDate = new Date(dateString);
        const today = new Date();
        today.setHours(0, 0, 0, 0);
        inputDate.setHours(0, 0, 0, 0);
        return inputDate < today;
    }

    // Function to check if date is past month
    function isPastMonth(dateString) {
        const inputDate = new Date(dateString);
        const today = new Date();
        return inputDate.getMonth() < today.getMonth() || inputDate.getFullYear() < today.getFullYear();
    }

    // Function to check if date is within 30 days
    function isWithin30Days(dateString) {
        const inputDate = new Date(dateString);
        const currentDate = new Date();
        const timeDifference = currentDate.getTime() - inputDate.getTime();
        const daysDifference = Math.ceil(timeDifference / (1000 * 3600 * 24));
        return daysDifference <= 30;
    }

    const leaveTypeMapping = {
        1: "Comp Off Leave",
        2: "Half Leave",
        3: "LWP",
        4: "Privilege Leave"
    };

    // Function to get leave balance for specific leave type
    function getLeaveBalance(leaveTypeId) {
        const leaveTypeName = leaveTypeMapping[leaveTypeId];
        if (!leaveTypeName) {
            return 0;
        }

        const balance = leaveBalanceData.find(item => item.leaveType === leaveTypeName);
        return balance ? parseFloat(balance.leaveValue || 0) : 0;
    }

    function validateLeaveBalance(leaveTypeId, requestedDays) {
        const availableBalance = getLeaveBalance(leaveTypeId);

        if (requestedDays > availableBalance) {
            return {
                isValid: false,
                message: `Insufficient balance! Available: ${availableBalance}, Requested: ${requestedDays}`
            };
        }

        return { isValid: true, message: "" };
    }

    // Function to check duplicate leave application
    function checkDuplicateLeaveApplication(fromDate, toDate) {
        return new Promise((resolve, reject) => {
            let filter = {
                LeaveType: 0,
                Status: null,
                SearchFor: "",
                Emplooyeid: Empid,
                CompId: Compid
            };
            $.ajax({
                url: apiBase + '/LeaveApplication/GetLeaveApplications',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(filter),
                success: function (data) {
                    if (data.isSuccess && data.data && data.data.length > 0) {
                        const selectedFromDate = new Date(fromDate);
                        const selectedToDate = new Date(toDate);

                        const duplicateLeaves = data.data.filter(leave => {
                            const leaveFromDate = new Date(leave.fromDate);
                            const leaveToDate = new Date(leave.todate);
                            const isOverlapping = (selectedFromDate <= leaveToDate && selectedToDate >= leaveFromDate);
                            const isActiveStatus = leave.status === 'Pending' || leave.status === 'Approved';
                            return isOverlapping && isActiveStatus;
                        });

                        if (duplicateLeaves.length > 0) {
                            resolve({
                                hasDuplicate: true,
                                duplicateLeaves: duplicateLeaves
                            });
                        } else {
                            resolve({
                                hasDuplicate: false,
                                duplicateLeaves: []
                            });
                        }
                    } else {
                        resolve({
                            hasDuplicate: false,
                            duplicateLeaves: []
                        });
                    }
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    // Function to check attendance for past month dates
    function checkAttendanceForPastMonth(fromDate, toDate, empId) {
        return new Promise((resolve, reject) => {
            const formData = new FormData();
            formData.append("BranchId", "0");
            formData.append("EmpId", empId);
            formData.append("StartDate", fromDate);
            formData.append("EndDate", toDate);
            formData.append("RecordType", "All");

            $.ajax({
                url: apiBase + '/EmployeeInOut/GetEmployeeInOutReport',
                type: 'POST',
                data: formData,
                contentType: false,
                processData: false,
                success: function (response) {
                    if (response?.isSuccess && response.data && response.data.length > 0) {
                        const presentDates = response.data.filter(record =>
                            record.status === 'Present' || record.status === 'P' ||
                            record.inTime != null || record.outTime != null
                        );
                        if (presentDates.length > 0) {
                            resolve({ isPresent: true, presentDates: presentDates });
                        } else {
                            resolve({ isPresent: false, presentDates: [] });
                        }
                    } else {
                        resolve({ isPresent: false, presentDates: [] });
                    }
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    // Function to check if salary is processed
    function checkSalaryProcessed(fromDate, empCode) {
        return new Promise((resolve, reject) => {
            const leaveDate = new Date(fromDate);
            const month = leaveDate.getMonth() + 1;
            const year = leaveDate.getFullYear();
            const requestData = {
                Month: parseInt(month),
                Year: parseInt(year),
                EmployeeCodes: 0,
                BranchId: 0
            };

            $.ajax({
                url: apiBase + '/MonthlySalaryDetailsAPI/GetAll',
                type: "POST",
                data: JSON.stringify(requestData),
                contentType: "application/json",
                success: function (response) {
                    if (response.isSuccess && response.data && response.data.length > 0) {
                        resolve({ isProcessed: true, salaryData: response.data, month: month, year: year });
                    } else {
                        resolve({ isProcessed: false, salaryData: [], month: month, year: year });
                    }
                },
                error: function (xhr, status, error) {
                    reject(error);
                }
            });
        });
    }

    function loadReportingPerson() {
        $.ajax({
            url: `${apiBase}/LeaveApplication/GetReportingperson?Empid=${Empid}`,
            method: 'POST',
            dataType: 'json',
            success: function (response) {
                if (response.isSuccess && response.data) {
                    $('#repoid').val(response.data.fullName);
                    $('#reportingManagerId').val(response.data.id);
                }
            }
        });
    }

    function loadLeaveBalance() {
        $.ajax({
            url: `${apiBase}/LeaveApplication/GetLeaveType`,
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify({ Compid: Compid, Empid: Empid }),
            success: function (response) {
                if (response.isSuccess && response.data && response.data.length > 0) {
                    leaveBalanceData = response.data;

                    $("#Leavebalanceid").dxDataGrid({
                        dataSource: response.data,
                        keyExpr: "leaveType",
                        showBorders: true,
                        columnAutoWidth: true,
                        columns: [
                            { dataField: "leaveType", caption: "Leave Type", cssClass: "text-center-cell" },
                            { dataField: "leaveValue", caption: "Balance", cssClass: "text-center-cell" }
                        ]
                    });
                } else {
                    $("#Leavebalanceid").html('<div class="text-muted text-center">No leave balance found</div>');
                }
            },
            error: function () {
                Swal.fire("Error", "Could not load leave balance", "error");
            }
        });
    }

    function loadResponsibleDropdown() {
        $.ajax({
            url: `${apiBase}/CompOffAPI/ReportingPersonEmpVise?Compid=${Compid}&Empid=${Empid}`,
            method: 'POST',
            success: function (res) {
                const dropdown = $('#responsibleid');
                dropdown.empty().append('<option value="">-- Select Employee --</option>');
                if (res.isSuccess && res.data?.length > 0) {
                    res.data.forEach(item => {
                        dropdown.append(`<option value="${item.reportingPersonId}">${item.reportingPersonName}</option>`);
                    });
                }
            },
            error: function () {
                Swal.fire("Error", "Could not load responsible list", "error");
            }
        });
    }

    // Main submit handler with all validations
    async function handleSubmit() {
        // Clear all previous errors
        $('.error-message').hide();
        $('.form-control, .form-select').removeClass('is-invalid');

        let hasError = false;

        const leaveType = $('#Leavetypeid').val();
        const leaveTypeName = $('#Leavetypeid').find('option:selected').text();
        const applicationType = $('input[name="leaveStatus"]:checked').val();
        const noOfDays = parseFloat($('#nodaysid').val());
        const fromDate = $('#formdateid').val();
        const toDate = $('#todateid').val();
        const reason = $('#resonid').val().trim();
        const responsible = $('#responsibleid').val();
        const halfDayType = $('#halfDayType').val();

        // Basic validations
        if (leaveType === "0") {
            $('#Leavetypeid').addClass('is-invalid');
            $('#leaveTypeError').show();
            hasError = true;
        }

        if (!applicationType) {
            $('#applicationTypeError').show();
            hasError = true;
        }

        if (!fromDate) {
            $('#formdateid').addClass('is-invalid');
            $('#fromDateError').show();
            hasError = true;
        }

        if (!toDate) {
            $('#todateid').addClass('is-invalid');
            $('#toDateError').show();
            hasError = true;
        }

        // Date range validation - FIXED
        if (fromDate && toDate) {
            const startDate = new Date(fromDate);
            const endDate = new Date(toDate);

            if (endDate < startDate) {
                $('#todateid').addClass('is-invalid');
                $('#dateRangeError').show();
                hasError = true;
            }
        }

        if (!$('#nodaysid').val()) {
            $('#nodaysid').addClass('is-invalid');
            $('#daysError').text('Please calculate number of days').show();
            hasError = true;
        }

        if (!reason) {
            $('#resonid').addClass('is-invalid');
            $('#reasonError').show();
            hasError = true;
        }

        if (!responsible) {
            $('#responsibleid').addClass('is-invalid');
            $('#responsibleError').show();
            hasError = true;
        }

        // Half day specific validations - FIXED
        if (leaveTypeName === 'Half Leave') {
            const today = new Date().toISOString().split('T')[0];
            if (fromDate !== today) {
                $('#formdateid').addClass('is-invalid');
                $('#halfDayCurrentDateError').show();
                hasError = true;
            }
            if (noOfDays !== 0.5) {
                $('#nodaysid').addClass('is-invalid');
                $('#halfDayValidationError').show();
                hasError = true;
            }
            // FIXED: Half day type validation
            if (!halfDayType) {
                $('#halfDayType').addClass('is-invalid');
                $('#halfDayTypeError').show();
                hasError = true;
            }
        }

        // Leave balance validation - FIXED
        if (leaveType !== "0" && !isNaN(noOfDays) && noOfDays > 0) {
            const balanceValidation = validateLeaveBalance(leaveType, noOfDays);
            if (!balanceValidation.isValid) {
                $('#nodaysid').addClass('is-invalid');
                $('#insufficientBalanceError').text(balanceValidation.message).show();
                hasError = true;
            }
        }

        if (hasError) {
            return;
        }

        try {
            // Check for duplicate leave application
            const duplicateResult = await checkDuplicateLeaveApplication(fromDate, toDate);
            if (duplicateResult.hasDuplicate) {
                const duplicate = duplicateResult.duplicateLeaves[0];
                const statusText = duplicate.status === 'Pending' ? 'Pending' : 'Approved';
                Swal.fire({
                    title: "Leave Already Applied",
                    text: `You have already applied for leave on these dates. Status: ${statusText}`,
                    icon: "warning",
                    confirmButtonText: "OK"
                });
                return;
            }

            // Past date validations
            if (isPastMonth(fromDate)) {
                if (!isWithin30Days(fromDate)) {
                    $('#formdateid').addClass('is-invalid');
                    $('#pastDateError').show();
                    return;
                }

                // Check attendance for past month
                const attendanceResult = await checkAttendanceForPastMonth(fromDate, toDate, Empid);
                if (attendanceResult.isPresent) {
                    $('#formdateid').addClass('is-invalid');
                    $('#attendanceError').show();
                    return;
                }

                // Check if salary is processed
                const salaryResult = await checkSalaryProcessed(fromDate, Empid);
                if (salaryResult.isProcessed) {
                    $('#formdateid').addClass('is-invalid');
                    $('#salaryError').text(`Cannot apply leave for ${salaryResult.month}/${salaryResult.year} as salary has already been processed`).show();
                    return;
                }
            }

            // FIXED: API payload with correct property name
            const payload = {
                EmplooyeId: Empid,  // FIXED: Was EmplooyeId
                CompId: Compid,
                ReportingManagerId: parseInt($('#reportingManagerId').val()),
                LeaveType: parseInt(leaveType),
                ApplicationType: applicationType,
                ApplicationDate: new Date(),
                FromDate: fromDate,
                Todate: toDate,
                No_Of_Date: noOfDays,
                Reason: reason,
                Responsibleperson: parseInt(responsible),
                Day: halfDayType || null,
                Cancel_Weekoff: false,
                Send_Intimate: "false",
                LeaveStatus: "Pending"
            };

            // API call
            $.ajax({
                url: apiBase + '/LeaveApplication/AddLeaveapplication',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(payload),
                success: function (response) {
                    if (response.isSuccess) {
                        Swal.fire({
                            title: "Success",
                            text: response.responseMessage,
                            icon: "success",
                            customClass: { popup: 'swal2-small' }
                        });
                        clearForm();
                    } else {
                        Swal.fire({
                            title: "Error",
                            text: response.responseMessage,
                            icon: "error",
                            customClass: { popup: 'swal2-small' }
                        });
                    }
                },
                error: function (xhr, status, error) {
                    Swal.fire({
                        title: "Error",
                        text: "An error occurred while submitting",
                        icon: "error",
                        customClass: { popup: 'swal2-small' }
                    });
                }
            });

        } catch (err) {
            Swal.fire({
                title: "Error",
                text: "Unexpected error occurred while submitting",
                icon: "error",
                customClass: { popup: 'swal2-small' }
            });
        }
    }

    // Function to clear form
    function clearForm() {
        $('#Leavetypeid').val('0');
        $('input[name="leaveStatus"]').prop('checked', false);
        $('#formdateid').val('').prop('readonly', false);
        $('#todateid').val('').prop('readonly', false);
        $('#nodaysid').val('').prop('readonly', true);
        $('#resonid').val('');
        $('#responsibleid').val('');
        $('#halfDayType').val('');
        $('#halfDayTypeRow').hide();
        $('.form-control, .form-select').removeClass('is-invalid');
        $('.error-message').hide();
            $('#halfDayCheckbox').prop('checked', false);
    $('#halfDayCheckboxRow').hide();
    $('#halfDayInfo').hide();
    }
</script>
