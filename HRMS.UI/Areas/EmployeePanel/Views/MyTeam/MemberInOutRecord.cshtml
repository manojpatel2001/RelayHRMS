@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Inout record";
    Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
    string UIBaseUrlLayout = Configuration["UIBaseUrlSettings:baseUrl"];
    var uriAPI = new Uri(baseUrl);
    string baseAPIDomainUrl = $"{uriAPI.Scheme}://{uriAPI.Host}:{uriAPI.Port}";
}


<div class="card ">
    <div class="card-header bg-transparent ml-0 py-0">
        <div class="row my-2">
                <h6 class=" mb-0">
                    Employee IN-OUT Record
                </h6>
            
        </div>
    </div>
    <div class="card-body">
        <div class="row">
           <div class="col-md-12 my-2">
                <h6 >Search Panel</h6>
           </div>
           <div class="col-md-12 ">
            
               <div class="row ">
                   <div class="col-sm-3 mb-2">
                        <label for="fromDate" class="fixed-label">From<span class="text-danger">*</span>:</label>
                        <input type="date" class="form-control form-control-sm" id="fromDate" />
                   </div>

                    <div class="col-sm-3 mb-2">
                        <label for="toDate" class="fixed-label">From<span class="text-danger">*</span>:</label>
                        <input type="date" class="form-control form-control-sm" id="toDate" />
                   </div>

                    <div class="col-sm-3 mb-2">
                        <label for="ddlMember" class="fixed-label">Employee Code:</label>
                        
                        <select id="ddlMember" class="form-select form-control-sm">
                                
                             <option value="">Select</option>
                        </select>
                   </div>

                   <div class="col-sm-3 mt-3">
                        <div class="d-flex btn-group-custom action-buttons" id="actionButtons">
                            <button type="button" id="btnGo" class="btn btn-primary"  style="background-color:#2395c6; color:white;"> Go</button>
                            
                            <button type="button" class="btn btn-secondary" onclick="resetDetails()">
                                Clear
                            </button>
                        </div>

                   </div>
               </div>
              

           </div>
        </div>
        


        <div class="row pt-1">
            <div class="col-md-12 ">
                <div class="form-group " id="gridTag">
                    <div class="grid-wrapper " style="position: relative; ">
                        <div id="grid-loader" class="grid-loader justify-content-center align-items-center flex-column "
                             style="display: none;  inset: 0; background: rgba(255,255,255,0.6); z-index: 10; ">
                            <img src="@baseAPIDomainUrl/loders/loder.png" class="grid-logo-spinner" style="width: 30px; height: 30px; animation: spin 1s linear infinite;" />
                            <div class="grid-loading-text text-dark" style="font-size: 16px;">Loading...</div>

                        </div>
                        <div id="rowCountInout"></div>
                        <div id="gridInout"></div>
                    </div>

                </div>
                <div id="spnNoRecord" style="display:none;">No Record Found!</div>
            </div>
        </div>
    </div>

</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>

     const userId = parseInt(localStorage.getItem("EmployeeId"));
     const savedCompany = localStorage.getItem('selectedCompany');
    const companyDetails = JSON.parse(savedCompany);
    const companyId = parseInt(companyDetails.CompanyId);
    const Token=localStorage.getItem("authToken");

    var now = new Date();
    var firstDayOfMonth = new Date(now.getFullYear(), now.getMonth(), 1);

    // Format dates as YYYY-MM-DD for the date input
    var formatDate = function(date) {
        var d = new Date(date),
            month = '' + (d.getMonth() + 1),
            day = '' + d.getDate(),
            year = d.getFullYear();

        if (month.length < 2) month = '0' + month;
        if (day.length < 2) day = '0' + day;

        return [year, month, day].join('-');
    };

    function resetDetails()
    {
        $('#btnGo').prop("disabled",false);
         $('#fromDate').val(formatDate(firstDayOfMonth));
        $('#toDate').val(formatDate(now));
         $('#ddlMember').val('');
        const fromDate = $('#fromDate').val();
            const toDate = $('#toDate').val();
            const memberId = $('#ddlMember').val();
            if (!fromDate || !toDate) return  round_error_noti("Please select from date and to date");
          loadPunchDetails(userId, companyId, memberId, fromDate,toDate);
    }

     $(document).ready(function() {
         bindMember();
        resetDetails();

    });

    $('#fromDate,#ddlMember,#toDate').focus(function(){
        $('#btnGo').prop("disabled",false);
    });

     $('#btnGo').click(function () {
             $('#btnGo').prop("disabled",true);
            const fromDate = $('#fromDate').val();
            const toDate = $('#toDate').val();
            const memberId = $('#ddlMember').val();
            if (!fromDate || !toDate) return  round_error_noti("Please select from date and to date");
           
                loadPunchDetails(userId, companyId, memberId, fromDate,toDate);
        });

     async function loadPunchDetails(userId, companyId, memberId, fromDate,toDate) {
         var drpMemberId=memberId?memberId:0;
         $('#grid-loader').addClass('d-flex').show();
        try {
            const response = await fetch('@baseUrl/EmployeeInOut/GetDateWiseAttendanceDetails', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${Token}` // optional, if needed
                },
                body: JSON.stringify({
                    employeeId: userId,
                    companyId: companyId,
                    memberId:drpMemberId,
                    fromDate: fromDate,
                    toDate: toDate
                })
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            if (data.isSuccess && Array.isArray(data.data)) {
                $('#gridTag').show();
                $('#spnNoRecord').hide();
                $('#gridInout').dxDataGrid({
                    dataSource: data.data,
                    rowHeight: 40,
                    width: '100%',
                       columns: [
                            { dataField: 'employeeCode', caption: 'Employee Code' },
                            { dataField: 'fullName', caption: 'Full Name' },
                            { dataField: 'branchName', caption: 'Branch' },
                            { dataField: 'companyName', caption: 'Company Name' },
                            {
                                dataField: 'shiftDate',
                                caption: 'Shift Date',
                                dataType: 'date',
                                format: 'dd-MM-yyyy'
                            },
                            {
                                dataField: 'inTime',
                                caption: 'In Time'

                            },
                            {
                                dataField: 'outTime',
                                caption: 'Out Time'

                            },
                            {
                                dataField: 'workingHours',
                                caption: 'Working Hours',
                                dataType: 'number',
                                format: '#0.00',
                                alignment: 'left'
                            },
                            { dataField: 'attendanceStatus', caption: 'Attendance Status' },
                            {
                                dataField: 'salaryDay',
                                caption: 'Salary Day',
                                dataType: 'number',
                                format: '#0.0',
                                alignment: 'left'

                            }

                        ],
                    columnsAutoWidth: false,
                    wordWrapEnabled: false,
                    showBorders: true,
                    rowAlternationEnabled: false,
                    grouping: { autoExpandAll: false },
                    // paging: { pageSize: 10 },
                    // pager: { showPageSizeSelector: false, allowedPageSizes: [10, 25, 50, 100] },
                    headerFilter: { visible: false },
                    filterRow: { visible: false, applyFilter: "auto" },
                    allowColumnResizing: true,
                    groupPanel: { visible: false },
                    searchPanel: { visible: true, width: 240, placeholder: "Search..." },
                    columnFixing: { enabled: false },
                    scrolling: {
                        mode: "standard",
                        useNative: false,
                        scrollByContent: true,
                        scrollByThumb: true
                    },
                    onContentReady(e) {
                            $('#rowCountInout').html('Total Records: ' + e.component.totalCount());
                    }
                });
            } else {
                 $('#gridTag').hide();
                $('#spnNoRecord').show();
            }
            $('#grid-loader').removeClass('d-flex').hide();
        } catch (error) {

            $('#grid-loader').removeClass('d-flex').hide();
            console.error('Failed to load  In/Out records:', error);
            round_error_noti("Failed to load  In/Out records.");
        }
    }
    async function bindMember(){
        debugger;
       $.ajax({
                url: '@baseUrl/EmployeeInOut/GetEmployeesByReportingManager/'+userId,
                method: 'GET',
                headers: {
                    'Authorization': `Bearer ${Token}` 
                },
                success: function(data) {
                    if(data.isSuccess){
                        var dropdown = $('#ddlMember');
                        dropdown.empty();
                        dropdown.append('<option disabled selected value="">Select</option>');
                        $.each(data.data, function(index, member) {
                            dropdown.append($('<option>', {
                                value: member.employeeId,
                                text:  member.employeeCode+" - "+member.fullName
                            }));
                        });


                    }
                },
                error: function(error) {
                    console.error('Error fetching grade data:', error);
                }
            });

     }

</script>

