@inject IConfiguration Configuration
@{
	ViewData["Title"] = "Ticket Request";
	Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
	string UIBaseUrlLayout = Configuration["UIBaseUrlSettings:baseUrl"];
	var uriAPI = new Uri(baseUrl);
	string baseAPIDomainUrl = $"{uriAPI.Scheme}://{uriAPI.Host}:{uriAPI.Port}";
}

<div class="card ">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row">
			<div class="col-6">
				<h6 class="pt-2 mb-0">
					Ticket Request
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">

					<button id="sendRequestBtn"
							type="button"
							class="btn mr-1 rounded-1"
							style="background-color:#2395c6; color:white;">
						Send Request 
					</button>

				</div>
			</div>
		</div>
	</div>


	<div class="card-body">
		<div class="row">
			<div class="col-md-12">

				<div class="grid-wrapper " style="position: relative; " id="gridTag">
					<div id="grid-loader" class="grid-loader justify-content-center align-items-center flex-column "
						 style="display: none;  inset: 0; background: rgba(255,255,255,0.6); z-index: 10; ">
						<img src="@baseAPIDomainUrl/loders/loder.png" class="grid-logo-spinner" style="width: 30px; height: 30px; animation: spin 1s linear infinite;" />
						<div class="grid-loading-text text-dark" style="font-size: 16px;">Loading...</div>

					</div>
					<div  id="rowCount2"></div>
					<div id="GridContainer"></div>
				</div>
				<div id="divNoRecord" class="text-center text-muted" style="display:none;">No Record Found!</div>

			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="sendTicketRequestModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel"><span class="formType">Send</span> Ticket Request</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row  ">
					<!-- Ticket Generate Date -->
					<div class="col-sm-4 mt-3">
						<div class="form-group position-relative">
							<input type="date"
								   class="form-control floating-input"
								   
								   id="ticketDate"
								   readonly />
							<label class="floating-label" for="ticketDate">Ticket Generate Date<span class="text-danger">*</span></label>
						</div>
						<span id="spnTicketDate" style="color:red; display:none; ">Please select Ticket Generate Date</span>
					</div>

					@* <!-- Employee -->
					<div class="col-sm-4">
						<div class="form-group position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder=" "
								   data-trim-input
								   id="Employeeid" />
							<label class="floating-label" for="Employeeid">Employee<span class="text-danger">*</span></label>
						</div>
						<span id="spnEmployee" style="color:red; display:none; font-size: 0.875em;">Please enter Employee</span>
					</div> *@

					<!-- Ticket Assign -->
					<div class="col-sm-4 mt-3">
						<div class="form-group position-relative">
							<select class="form-select floating-input"
									id="drpDepartment">
								<option value="" selected disabled>Select</option>
								
							</select>
							<label class="floating-label" for="drpDepartment">Department<span class="text-danger">*</span></label>
						</div>
						<span id="spnDepartment" style="color:red; display:none; ">Please select Department</span>
					</div>
				
					<div class="col-sm-4 mt-3">
						<div class="form-group position-relative">
							<select class="form-select floating-input"
									id="drpAssign">
								<option value="" selected disabled>Select</option>
								
							</select>
							<label class="floating-label" for="drpAssign">Ticket Assign<span class="text-danger">*</span></label>
						</div>
						<span id="spnAssign" style="color:red; display:none; ">Please select Ticket Assign</span>
					</div>
				
				
					<!-- Ticket Type -->
					<div class="col-sm-4 mt-3">
						<div class="form-group position-relative">
							<select class="form-select floating-input"
									id="drpTiketType">
								<option value="" selected disabled>Select</option>
							</select>
							<label class="floating-label" for="drpTiketType">Ticket Type<span class="text-danger">*</span></label>
						</div>
						<span id="spnTicketType" style="color:red; display:none; ">Please select Ticket Type</span>
					</div>

					
					<!-- Ticket Priority -->
					<div class="col-sm-4 mt-3">
						<div class="form-group position-relative">
							<select class="form-select floating-input"
									id="drpTicketPriority">
								<option value="" selected disabled>Select</option>
							</select>
							<label class="floating-label" for="priorityid">Ticket Priority<span class="text-danger">*</span></label>
						</div>
						<span id="spnTicketPriority" style="color:red; display:none; ">Please select Ticket Priority</span>
					</div>
				

				
					<!-- Attach Document -->
					<div class="col-sm-4 mt-3">
						<div class="form-group">
							<div class="input-group">
								<input type="file" class="form-control" id="attatchFile" />
								<a href="#" style="display:none;" id="fileLink" target="_blank">
									<span class="input-group-text " style="border-radius:0px; cursor:pointer;">
										<i class="bx bx-file text-danger"></i>
									</span>
								</a>
							</div>

						</div>
					</div>
					
					<!-- Ticket Description -->
					<div class="col-sm-12 mt-3">
						<div class="form-group position-relative">
							<textarea class="form-control floating-input"
									  id="txtDescription"
									  data-trim-input
									  style="height:30px;"
									  placeholder=" "></textarea>
							<label class="floating-label" for="txtDescription">Ticket Description<span class="text-danger">*</span></label>
						</div>
						<span id="spnDescription" style="color:red; display:none;">Please Enter Description</span>

					</div>

				
				</div>
				



			</div>
			<div class="modal-footer btn-heading-title">

				<button type="button" class="btn btn-primary" id="btnSendRequest" style="background-color:#2395c6; color:white;">Send</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>



<div class="modal fade" id="followUpModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel"><span class="formType">Add</span> Ticket Follow Up</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row  ">
					<div class="col-sm-4 mt-3">
						<div class="form-group position-relative">
							<input type="date"
								   class="form-control floating-input"
								   id="folloUpDate"
								   readonly />
							<label class="floating-label" for="folloUpDate">Ticket Follow Up Date<span class="text-danger">*</span></label>
						</div>
						<span id="spnFolloUpDate" style="color:red; display:none; ">Please select Ticket FollowUp Date</span>
					</div>

					<div class="col-sm-4 mt-3">
						<div class="form-group position-relative">
							<input type="date"
								   class="form-control floating-input"
								   id="nextFolloUpDate"
								   readonly />
							<label class="floating-label" for="nextFolloUpDate">Next Follou Up Date<span class="text-danger">*</span></label>
						</div>
						<span id="spnNextFolloUpDate" style="color:red; display:none; ">Please select Next FollowUp Date</span>

					</div>


					<div class="col-sm-4 mt-3">
						<div class="form-group position-relative">
							<select class="form-select floating-input"
									id="drpTicketStatus">
								<option value="" selected disabled>Select</option>
							</select>
							<label class="floating-label" for="drpTicketStatus">Ticket Status<span class="text-danger">*</span></label>
						</div>
						<span id="spnTicketStatus" style="color:red; display:none; ">Please select Ticket Status.</span>
					</div>



					<!-- Attach Document -->
					<div class="col-sm-4 mt-3">
						<div class="form-group">
							<div class="input-group">
								<input type="file" class="form-control" id="attatchFollowUpFile" />
								<a href="#" style="display:none;" id="followUpFileLink" target="_blank">
									<span class="input-group-text " style="border-radius:0px; cursor:pointer;">
										<i class="bx bx-file text-danger"></i>
									</span>
								</a>
							</div>

						</div>
					</div>

					<div class="col-sm-12 mt-3">
						<div class="form-group position-relative">
							<textarea class="form-control floating-input"
									  id="txtFolloUpDescription"
									  data-trim-input
									  style="height:30px;"
									  placeholder=" "></textarea>
							<label class="floating-label" for="txtFolloUpDescription"> Description<span class="text-danger">*</span></label>
						</div>
						<span id="spnFolloUpDescription" style="color:red; display:none;">Please Enter Description</span>

					</div>


				</div>

			</div>
			<div class="modal-footer btn-heading-title">

				<button type="button" class="btn btn-primary" id="btnAddFollowUp" style="background-color:#2395c6; color:white;">Add</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
			const EmployeeId = localStorage.getItem("EmployeeId");
			  var Token=localStorage.getItem("authToken");
			  const savedCompany = localStorage.getItem('selectedCompany');
	   const companyDetails = JSON.parse(savedCompany || '{}');
	   const companyId = parseInt(companyDetails.CompanyId);
		let TicketStatusId=0;


		$("#sendRequestBtn").click( () => {
			 clearTicketStatusForm();
		  $("#sendTicketRequestModel").modal('show');

		})


		function showNoRecord()
		{
		   $("#divNoRecord").show();
			$("#gridTag").hide();
		}

		function hideNoRecord()
		{
		   $("#divNoRecord").hide();
			$("#gridTag").show();
		}

	  function bindDepartment(){

	   $.ajax({
				url: '@baseUrl/DepartmentAPI/GetAllDepartments',
				method: 'GET',
					headers: {
						'Authorization': 'Bearer ' + Token
					},
				success: function(data) {
					if(data.isSuccess){
						var dropdown = $('#drpDepartment');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select </option>');
						$.each(data.data, function(index, company) {
							dropdown.append($('<option>', {
								value: company.departmentId,
								text: company.departmentName
							}));
						});


					}
				},
				error: function(error) {
					console.error('Error fetching department data:', error);
				}
			});

	 }
	  function bindTicketPriority(){

	   $.ajax({
				url: '@baseUrl/TicketPriorityAPI/GetAllTicketPriority/'+companyId,
				method: 'GET',
					headers: {
						'Authorization': 'Bearer ' + Token
					},
				success: function(data) {
					if(data.isSuccess){
						var dropdown = $('#drpTicketPriority');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select </option>');
						$.each(data.data, function(index, priority) {
							dropdown.append($('<option>', {
								value: priority.ticketPriorityId,
								text: priority.ticketPriorityName
							}));
						});


					}
				},
				error: function(error) {
					console.error('Error fetching ticket priority data:', error);
				}
			});

	 }

	 $("#drpDepartment").change(function (){
		 bindAssigEmployeeAndTicketType();
	 });
	
	 
	 function bindAssigEmployeeAndTicketType() {
		var department = $("#drpDepartment").val();
		if (!department) {
			return Promise.resolve(); // Return a resolved Promise if department is not available
		}

		// Return a Promise that wraps the AJAX call
		return new Promise((resolve, reject) => {
			$.ajax({
				type: "POST",
				url: "@baseUrl/TicketApplicationAPI/GetEmployeeAndTicketTypeByDepartmentId",
				contentType: 'application/json',
				headers: {
					'Authorization': 'Bearer ' + Token
				},
				data: JSON.stringify({ CompanyId: companyId, DepartmentId: department }),
				success: function(data) {
					if (data.isSuccess) {
						console.log("data", data);
						var dropdown = $('#drpAssign');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select</option>');
						$.each(data.data.assignList, function(index, assign) {
							dropdown.append($('<option>', {
								value: assign.id,
								text: assign.employeeCode + " - " + assign.fullName
							}));
						});

						var dropdown = $('#drpTiketType');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select</option>');
						$.each(data.data.ticketTypes, function(index, ticket) {
							dropdown.append($('<option>', {
								value: ticket.ticketTypeId,
								text: ticket.ticketTypeName
							}));
						});
						resolve(); // Resolve the promise if success
					} else {
						reject("Failed: Data indicates failure");
					}
				},
				error: function(xhr, status, error) {
					console.error("AJAX Error: " + status + " - " + error);
					reject(error); // Reject the promise if there's an error
				}
			});
		});
	}

     $('#attatchFile').on('change', function () {
	  const file = this.files[0];
	  if (file) {
		const fileURL = URL.createObjectURL(file);
		$(this).siblings('a').show();
		$(this).siblings('a').attr('href', fileURL).attr('target', '_blank');
		
	  }
	  else{
		  $(this).siblings('a').hide();
	  }
	});



		$(() => {
			
			setTicketDate();
			localStorage.removeItem('ticketApplicationLocalstorage');
			
			TicketApplicationDataTable();
			bindDepartment();
			bindTicketPriority();
		});

		function setTicketDate(){
			const today = new Date();
			// Format the date as YYYY-MM-DD for the date input field
			const formattedDate = today.toISOString().substring(0, 10);

			// Set the value of the date input field to the current date
			$('#ticketDate,#folloUpDate').val(formattedDate);
		}
		
		function TicketApplicationDataTable() {
		 try {
			$('#grid-loader').addClass('d-flex').show();
			 $.ajax({
				type: "POST",
				 url: '@baseUrl/TicketApplicationAPI/GetAllTicketApplications',  // Update the URL based on the API you're using
				contentType: 'application/json',
				 headers: {
						'Authorization': 'Bearer ' + Token
					},
				data: JSON.stringify({CompanyId:companyId,EmployeeId}),
				 success: function (data) {
					// Check if the API call was successful
					if (data.isSuccess) {
						
						   hideNoRecord();
						$("#GridContainer").dxDataGrid({
							dataSource: data.data,  // Use the 'data' field from the API response
							stateStoring: { enabled: true, type: 'localStorage', storageKey: 'ticketApplicationLocalstorage' },

							columns: [
								{ dataField: 'employeeName', caption: 'Employee Name' ,
								   cellTemplate: function(container, options) {
									const data = options.data;
									if (data) {
										// Combine code and name into a single string
										const formattedText = `${data.employeeCode} - ${data.employeeName}`;
										container.text(formattedText);
									}
								   }
								},
								{ dataField: 'departmentName', caption: 'Department Name'  },
								{ dataField: 'ticketTypeName', caption: 'Ticket Type Name' },
								{ dataField: 'ticketDescription', caption: 'Ticket Description',  },
								  { dataField: 'ticketStatusName', caption: 'Ticket Status Name'  },
								{ dataField: 'ticketPriorityName', caption: 'Ticket Priority Name'  },
								{ dataField: 'escalationHours', caption: 'Escalation Hours'},
								{ dataField: 'assignTo', caption: 'AssignTo',
								  cellTemplate: function(container, options) {
									const data = options.data;
									if (data) {
										// Combine code and name into a single string
										const formattedText = `${data.assignToCode} - ${data.assignTo}`;
										container.text(formattedText);
									}
								  }
								},
								
								{ dataField: 'ticketDate', caption: 'Ticket Date',dataType: 'date',format:'dd-MM-yyyy'},
								{
									caption: 'Attachment',
									dataField: 'attachDocumentUrl',
									alignment: 'center',
									cellTemplate: function(container, options) {
										const value = options.value;
										if (value) {
											const link = document.createElement('a');
											link.href = value;
											link.target = '_blank'; // Open in a new tab
											link.innerHTML = '<i class="bx bx-file"></i>'; // Icon for the attachment
											link.title = 'Open Document'; // Optional tooltip
											 // Inline styles to adjust appearance
											link.style.cssText = `
												color: inherit; 
												text-decoration: none; 
												font-size: 20px; 
											`;
											container.append(link);
										} else {
											container.text('No Document');
										}
									}
								},

								
									  {
											dataField: '',
											caption: '',
											alignment: 'center',
											dataType: 'string',
											format: '',
											type: 'buttons',
											width: '50px',
											cellTemplate: function (container, options) {
											const buttonElement = $(`
												<div class="d-flex order-actions">
												<a href="javascript:;" class="edit-action" title="Follow Up Ticket Request">
													<i class="bx bx-plus text-primary" style="font-size: 18px;"></i>
												</a>
												</div>
											`)
											.on('dxclick', function () {
												followUpTicketApplication(options.data);
											})
											.appendTo(container);
											}
										},

									   {
									   dataField: '',
									   caption: '',
									   alignment: 'center',
									   dataType: 'string',
									   format: '',
									   type: 'buttons',
									   width: '50px',
									   cellTemplate: function (container, options) {

													   var buttonElement = $('<div class="d-flex order-actions">' +
															  '<a href="javascript:;" class="edit-action" title="Update Ticket Request">' +
														   '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
														   '<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
														   '</svg>' +
														   '</a>' +
														   '</div>')
														   .on('dxclick', function () {
																  updateTicketApplication(options.data);
														   }).appendTo(container);

													   // Optional: update title attribute on SVG as well (for tooltip consistency)
														  buttonElement.find('svg').attr('title', 'Update Ticket Rquest');
									   }
								   },


								   {
									   dataField: '',
									   caption: '',
									   alignment: 'center',
									   dataType: 'string',
									   format: '',
									   type: 'buttons',
									   width: '50px',
									   cellTemplate: function (container, options) {
										   var buttonElement = $('<div class="d-flex order-actions">' +
											   '<a href="javascript:;" class="delete-action" title="Delete Ticket Request">' +
											   '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
											   '<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
											   '</svg>' +
											   '</a>' +
											   '</div>')
											   .on('dxclick', function () {
												   deleteTicketApplication(options.data);
											   }).appendTo(container);

										   var svgElement = buttonElement.find('svg');  // Accessing the svg element directly
										   svgElement.attr('title', 'Delete Ticket Request');
									   }
								   }

							],
							columnsAutoWidth: true,
							wordWrapEnabled: false,
							rowAlternationEnabled: false,
							showBorders: true,
							grouping: { autoExpandAll: false },
							paging: { pageSize: 10 },
							pager: { showPageSizeSelector: true, allowedPageSizes: [10, 25, 50, 100] },
							headerFilter: { visible: false },
							filterRow: { visible: false, applyFilter: "auto" },
							allowColumnResizing: true,
							groupPanel: { visible: true },
							searchPanel: { visible: true, width: 240, placeholder: "Search..." },
							allowColumnReordering: true,
							columnFixing: { enabled: false },

							onContentReady(e) {
								   $('#rowCount1').html('Total Records: ' + $("#GridContainer").dxDataGrid('instance').totalCount());
							}
						}).dxDataGrid('instance');
					} else {
						   showNoRecord();
						// Handle failure case

					}
						  $('#grid-loader').removeClass('d-flex').hide();

				},
				error: function (xhr, status, error) {
					  $('#grid-loader').removeClass('d-flex').hide();

					// Handle any errors that occurred during the AJAX request
					console.error("AJAX Error: " + status + " - " + error);

				}
			});

		  } catch (e)
		  {
			   console.error("Error in fetching ticket application:", e);
			   $('#grid-loader').removeClass('d-flex').hide();
			   hideStatusNoRecord();
		  }
	}

		function clearTicketStatusForm()
		{
				TicketApplicationId=0
			setTicketDate();// Set date in YYYY-MM-DD format
				$('#drpDepartment').val('');
				$('#drpAssign').val('');
				$('#drpTiketType').val('');
				$('#drpTicketPriority').val('');
				$('#txtDescription').val('');
				$('#attatchFile').val('');
			$("#btnSendRequest").prop("disabled", false);
			$('.formType').text('Send');
			$('#btnSendRequest').text('Send');
			   $('#spnTicketDate').hide();
			   $('#spnDepartment').hide();
			   $('#spnAssign').hide();
			   $('#spnTicketType').hide();
			   $('#spnTicketPriority').hide();
			   $('#spnDescription').hide();
			   $('#fileLink').hide();
				$('#fileLink').attr('href', '#');

		}


	$('#btnSendRequest').click(function () {
		$("#btnSendRequest").prop("disabled", true);
		let isValid = true;

		// Get form values
		const ticketDate = $('#ticketDate').val();
		const departmentId = $('#drpDepartment').val();
		const ticketAssignId = $('#drpAssign').val();
		const ticketTypeId = $('#drpTiketType').val();
		const ticketPriorityId = $('#drpTicketPriority').val();
		const ticketDescription = $('#txtDescription').val();
		const attachFile = $('#attatchFile')[0].files[0];
		
		// Validation
		if (ticketDate === '') {
			$('#spnTicketDate').show();
			isValid = false;
		} else {
			$('#spnTicketDate').hide();
		}

		if (departmentId === '' || departmentId === null) {
			$('#spnDepartment').show();
			isValid = false;
		} else {
			$('#spnDepartment').hide();
		}
		if (ticketAssignId === '' || ticketAssignId === null) {
			$('#spnAssign').show();
			isValid = false;
		} else {
			$('#spnAssign').hide();
		}

		if (ticketTypeId === '' || ticketTypeId === null) {
			$('#spnTicketType').show();
			isValid = false;
		} else {
			$('#spnTicketType').hide();
		}

		if (ticketPriorityId === '' || ticketPriorityId === null) {
			$('#spnTicketPriority').show();
			isValid = false;
		} else {
			$('#spnTicketPriority').hide();
		}

		if (ticketDescription === '') {
			$('#spnDescription').show();
			isValid = false;
		} else {
			$('#spnDescription').hide();
		}

		if (!isValid) {
			$("#btnSendRequest").prop("disabled", false);
			return;
		}

		// Create FormData object
		const formData = new FormData();

		// Append all form data
		formData.append('TicketApplicationId', TicketApplicationId || 0);
		formData.append('TicketDate', ticketDate);
		formData.append('DepartmentId', departmentId);
		formData.append('TicketAssignId', ticketAssignId);
		formData.append('TicketTypeId', ticketTypeId);
		formData.append('TicketPriorityId', ticketPriorityId);
		formData.append('TicketDescription', ticketDescription);
		formData.append('EmployeeId', EmployeeId);
		formData.append('CompanyId', companyId);
		if(TicketApplicationId==0)
		{
		  formData.append('CreatedBy',EmployeeId);
		}
		else
		{
			formData.append('UpdatedBy',EmployeeId);
		}
		// Append file if exists
		if (attachFile) {
			formData.append('AttachDocumentFile', attachFile);
		}
			// After populating formData
	
		const ApplicationUrl = TicketApplicationId == 0 ?
			'@baseUrl/TicketApplicationAPI/CreateTicketApplication' :
			'@baseUrl/TicketApplicationAPI/UpdateTicketApplication';
		const TypeMethod = TicketApplicationId == 0 ? "POST" : "PUT";

		// AJAX call
		$.ajax({
			url: ApplicationUrl,
			type: TypeMethod,
			contentType: false,  // Required for FormData
			processData: false,  // Required for FormData
			headers: {
				'Authorization': 'Bearer ' + Token
			},
			data: formData,
			success: function (response) {
				if (response.isSuccess) {
					round_success_noti(response.responseMessage);
				} else {
					round_error_noti(response.responseMessage);
				}
				$('#sendTicketRequestModel').modal('hide');
				TicketApplicationDataTable(); // optional: reload list
			},
			error: function (xhr, status, error) {
		
				round_error_noti("Error while creating ticket application");
				$("#btnSendRequest").prop("disabled", false);
			}

		});
	});



		async function updateTicketApplication(data) {
				clearTicketStatusForm();
				
				// Set the values of the form fields based on the data provided
				$('#ticketDate').val(data.ticketDate.split('T')[0]); // Set date in YYYY-MM-DD format
				$('#drpDepartment').val(data.departmentId||'');
				await bindAssigEmployeeAndTicketType();
				$('#drpAssign').val(data.ticketAssignId||'');
				$('#drpTiketType').val(data.ticketTypeId||'');
				$('#drpTicketPriority').val(data.ticketPriorityId||'');
				$('#txtDescription').val(data.ticketDescription||'');
					$('.formType').text('Update');
					$('#btnSendRequest').text('Update');
					$('#btnSendRequest').text('Update');
					 $('#fileLink').show();
					 $('#fileLink').attr('href', data.attachDocumentUrl);
			TicketApplicationId = data.ticketApplicationId;

			// Show the modal
			$('#sendTicketRequestModel').modal('show');
		}

		   function deleteTicketApplication(data)
		   {
			  if (!confirm("Are you sure you want to delete this ticket request?"))
			  {
				   return; // Cancel the delete operation
			   }

			   var deleteObj = {
				   id: data.ticketApplicationId,
				   deletedBy: EmployeeId // Set this if you have a logged-in user ID
			   };

			   $.ajax({
				  url: '@baseUrl/TicketApplicationAPI/DeleteTicketApplication',
				   type: 'DELETE',
				   contentType: 'application/json',
				   headers: {
					   'Authorization': 'Bearer ' + Token
				   },
				   data: JSON.stringify(deleteObj),
				   success: function (response) {
					   if(response.isSuccess)
					   {
						 round_success_noti(response.responseMessage);
					   }
					   else
					   {
						   round_error_noti(response.responseMessage)
					   }
					TicketApplicationDataTable();
				   },
				   error: function (error) {
						  console.log(error);
				   }
			   });
		   }

		   $(document).ready(function () {
			   // Optional: Clear form on modal close
			  $('#addTicketStatusModel').on('hidden.bs.modal', function () {
				 clearTicketStatusForm();
			  });
		   });


		   async function followUpTicketApplication()
		   {
			   setTicketDate();
			   await bindTicketStatus();
			   $('#followUpModal').modal('show');
		   }

		 async function bindTicketStatus() {
			  return new Promise((resolve, reject) => {
				$.ajax({
				  url: '@baseUrl/TicketStatusAPI/GetAllTicketStatus',
				  method: 'GET',
				  headers: {
					'Authorization': 'Bearer ' + Token
				  },
				  success: function (data) {
					if (data.isSuccess) {
					  const dropdown = $('#drpTicketStatus');
					  dropdown.empty();
					  dropdown.append('<option disabled selected value="">Select</option>');
					  $.each(data.data, function (index, status) {
						dropdown.append($('<option>', {
						  value: status.ticketStatusId,
						  text: status.ticketStatusName
						}));
					  });
					  resolve(data); 
					} else {
					  reject(new Error('API returned unsuccessful response'));
					}
				  },
				  error: function (error) {
					console.error('Error fetching ticket status:', error);
					reject(error); // ❌ Reject the promise on error
				  }
				});
			  });
	   }

</script>