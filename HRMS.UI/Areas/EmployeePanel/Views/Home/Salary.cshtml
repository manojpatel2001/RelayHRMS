@{
    ViewData["Title"] = "Employee Panel";
    Layout = "~/Areas/EmployeePanel/Views/Shared/_EmployeeLayout.cshtml";
    string baseUrl = ViewBag.BaseUrl;
    string apiBase = ViewBag.BaseUrlAPI;
}  

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
@* 
    <title>Salary Dashboard</title> 
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/3.9.1/chart.min.js"></script> 
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8fafc;
            color: #334155;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        /* Header */
        .header {
            background: white;
            border-bottom: 1px solid #e2e8f0;
            margin-bottom: 20px;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        }

        .header-content {
            padding: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .header h1 {
            color: #1e293b;
            font-size: 24px;
            font-weight: 600;
        }

        .breadcrumb {
            color: #64748b;
            font-size: 14px;
        }

        /* Dashboard Grid */
        .dashboard-grid {
            display: grid;
            grid-template-columns: 300px 1fr 280px;
            gap: 20px;
            margin-bottom: 20px;
        }

     
        /* Cards */
        .card {
            background: white;
            border-radius: 8px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            border: 1px solid #e2e8f0;
        }

        .card-header {
            padding: 20px;
            border-bottom: 1px solid #e2e8f0;
            display: flex;
            justify-content: between;
            align-items: center;
        }

            .card-header h2 {
                font-size: 18px;
                font-weight: 600;
                color: #1e293b;
            }

        .card-content {
            padding: 20px;
        }

        /* Calculated Days */
        .days-legend {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
            font-size: 12px;
        }

        .legend-item {
            display: flex;
            align-items: center;
            gap: 5px;
        }

        .legend-color {
            width: 8px;
            height: 8px;
            border-radius: 50%;
        }

        .present-days-info {
            display: flex;
            align-items: center;
            gap: 8px;
            margin-bottom: 20px;
            font-weight: 600;
        }

        .present-indicator {
            width: 12px;
            height: 12px;
            background: #3b82f6;
            border-radius: 50%;
        }

        .days-bar {
            margin-bottom: 15px;
        }

        .days-bar-header {
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
            font-size: 14px;
        }

        .bar-container {
            height: 24px;
            background: #f1f5f9;
            border-radius: 4px;
            display: flex;
            overflow: hidden;
        }

        .bar-segment {
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 11px;
            font-weight: 600;
            color: white;
        }

        .bar-present {
            background: #3b82f6;
        }

        .bar-holiday {
            background: #10b981;
        }

        .bar-leave {
            background: #ef4444;
        }

        /* Chart */
        .chart-container {
            position: relative;
            height: 300px;
            margin-top: 10px;
        }

        .chart-legend {
            display: flex;
            gap: 20px;
            margin-top: 10px;
            font-size: 14px;
        }

        /* Quick Access */
        .quick-access-list {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        .quick-access-item {
            padding: 12px 16px;
            border: 1px solid #e2e8f0;
            border-radius: 6px;
            background: white;
            cursor: pointer;
            transition: all 0.2s;
            font-size: 14px;
            text-align: left;
            width: 100%;
        }

            .quick-access-item:hover {
                background: #f8fafc;
                border-color: #cbd5e1;
            }

        /* Yearly Table */
        .yearly-card {
            grid-column: 1 / -1;
        }

        .year-selector {
            padding: 6px 12px;
            border: 1px solid #d1d5db;
            border-radius: 4px;
            background: white;
            font-size: 14px;
        }

        .salary-table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 10px;
        }

            .salary-table th,
            .salary-table td {
                padding: 12px;
                text-align: left;
                border-bottom: 1px solid #e2e8f0;
                font-size: 14px;
            }

            .salary-table th {
                background: #f8fafc;
                font-weight: 600;
                color: #374151;
            }

            .salary-table td {
                color: #6b7280;
            }

            .salary-table tr:hover {
                background: #f8fafc;
            }

        .net-amount-row {
            background: #eff6ff !important;
            font-weight: 600;
        }

            .net-amount-row td {
                color: #1e293b;
            }

        /* Loading */
        .loading {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 200px;
        }

        .spinner {
            width: 40px;
            height: 40px;
            border: 4px solid #e2e8f0;
            border-top: 4px solid #3b82f6;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }



        .hidden {
            display: none;
        }

        .text-center {
            text-align: center;
        }

        .overflow-x-auto {
            overflow-x: auto;
        }
    </style>

    <div class="container">
        <!-- Header -->
        <div class="header">
            <div class="header-content">
                <h1>Salary Dashboard</h1>
                <div class="breadcrumb">
                    🏠 Home > Salary
                </div>
            </div>
        </div>

        <!-- Loading State -->
        <div id="loading" class="loading">
            <div class="spinner"></div>
        </div>

        <!-- Dashboard Content -->
        <div id="dashboard" class="hidden">
            <!-- Main Grid -->
            <div class="dashboard-grid">
                <!-- Calculated Days -->
                <div class="card">
                    <div class="card-header">
                        <h2>Calculated Salary Days</h2>
                    </div>
                    <div class="card-content">
                        <div class="present-days-info">
                            <div class="present-indicator"></div>
                            <span>Present Days: <span id="currentPresentDays">23.5</span></span>
                        </div>

                        <div class="days-legend">
                            <div class="legend-item">
                                <div class="legend-color" style="background: #fbbf24;"></div>
                                <span>Holiday Days</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="background: #ef4444;"></div>
                                <span>Total Leave Days</span>
                            </div>
                        </div>

                        <div id="daysContainer">
                            <!-- Days bars will be populated here -->
                        </div>
                    </div>
                </div>

                <!-- Salary Chart -->
                <div class="card">
                    <div class="card-header">
                        <h2>Salary Summary of Last 6 Months</h2>
                    </div>
                    <div class="card-content">
                        <div class="chart-legend">
                            <div class="legend-item">
                                <div class="legend-color" style="background: #3b82f6;"></div>
                                <span>Net Salary</span>
                            </div>
                            <div class="legend-item">
                                <div class="legend-color" style="background: #10b981;"></div>
                                <span>Gross Salary</span>
                            </div>
                        </div>
                        <div class="chart-container">
                            <canvas id="salaryChart"></canvas>
                        </div>
                    </div>
                </div>

                <!-- Quick Access -->
                <div class="card">
                    <div class="card-header">
                        <h2>Quick Access</h2>
                    </div>
                    <div class="card-content">
                        <div class="quick-access-list">
                            <button class="quick-access-item" onclick="handleQuickAccess('ctc')">CTC Letter (Annexure)</button>
                            <button class="quick-access-item" onclick="handleQuickAccess('form11')">FORM 11 (PF)</button>
                            <button class="quick-access-item" onclick="handleQuickAccess('form16')">Form-16(IT)</button>
                            <button class="quick-access-item" onclick="handleQuickAccess('tax-declaration')">Income Tax Declaration</button>
                            <button class="quick-access-item" onclick="handleQuickAccess('pf-statement')">PF Statement</button>
                            <button class="quick-access-item" onclick="handleQuickAccess('salary-slip')">Salary Slip</button>
                            <button class="quick-access-item" onclick="handleQuickAccess('tax-prep')">Tax Preparation</button>
                            <button class="quick-access-item" onclick="handleQuickAccess('yearly-salary')">Yearly Salary</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Yearly Salary Table -->
            <div class="card yearly-card">
                <div class="card-header">
                    <h2>Yearly Salary</h2>
                    <select id="yearSelector" class="year-selector" onchange="handleYearChange()">
                        <option value="2025">2025</option>
                        <option value="2024">2024</option>
                    </select>
                </div>
                <div class="card-content">
                    <div class="overflow-x-auto">
                        <table class="salary-table">
                            <thead>
                                <tr>
                                    <th>Salary Heads</th>
                                    <th class="text-center">Jan</th>
                                    <th class="text-center">Feb</th>
                                    <th class="text-center">Mar</th>
                                    <th class="text-center">Apr</th>
                                    <th class="text-center">May</th>
                                    <th class="text-center">Jun</th>
                                    <th class="text-center">Jul</th>
                                    <th class="text-center">Aug</th>
                                    <th class="text-center">Sep</th>
                                    <th class="text-center">Oct</th>
                                    <th class="text-center">Nov</th>
                                    <th class="text-center">Dec</th>
                                </tr>
                            </thead>
                            <tbody id="salaryTableBody">
                                <!-- Table rows will be populated here -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables
        let salaryChart;
        let dashboardData = {};

        // Mock API data - Replace with your .NET API calls
        const mockApiData = {
            calculatedDays: [
                { month: 'Nov-2024', presentDays: 23.5, holidayDays: 4, leaveDays: 2.5 },
                { month: 'Dec-2024', presentDays: 24, holidayDays: 5, leaveDays: 2 },
                { month: 'Feb-2025', presentDays: 21, holidayDays: 4, leaveDays: 3 },
                { month: 'Apr-2025', presentDays: 26, holidayDays: 4, leaveDays: 0 },
                { month: 'May-2025', presentDays: 23.5, holidayDays: 4, leaveDays: 3.5 },
                { month: 'Jun-2025', presentDays: 23, holidayDays: 5, leaveDays: 2 }
            ],
            salaryChart: [
                { month: 'Nov-2024', netSalary: 75610, grossSalary: 76176 },
                { month: 'Dec-2024', netSalary: 60610, grossSalary: 76176 },
                { month: 'Feb-2025', netSalary: 75610, grossSalary: 76176 },
                { month: 'Apr-2025', netSalary: 60610, grossSalary: 76176 },
                { month: 'May-2025', netSalary: 87037, grossSalary: 87603 },
                { month: 'Jun-2025', netSalary: 52037, grossSalary: 87603 }
            ],
            yearlyBreakdown: {
                2025: {
                    Jan: { gross: 0, deduction: 0, net: 0 },
                    Feb: { gross: 76176, deduction: 366, net: 75610 },
                    Mar: { gross: 0, deduction: 0, net: 0 },
                    Apr: { gross: 76176, deduction: 366, net: 60610 },
                    May: { gross: 87603, deduction: 0, net: 87037 },
                    Jun: { gross: 87603, deduction: 15000, net: 52037 },
                    Jul: { gross: 0, deduction: 0, net: 0 },
                    Aug: { gross: 0, deduction: 0, net: 0 },
                    Sep: { gross: 0, deduction: 0, net: 0 },
                    Oct: { gross: 0, deduction: 0, net: 0 },
                    Nov: { gross: 0, deduction: 0, net: 0 },
                    Dec: { gross: 0, deduction: 0, net: 0 }
                }
            }
        };

        // Initialize dashboard
        document.addEventListener('DOMContentLoaded', function() {
            loadDashboardData();
        });

        // Load data function - Replace with your API call
        async function loadDashboardData() {
            try {
                // Show loading
                document.getElementById('loading').classList.remove('hidden');
                document.getElementById('dashboard').classList.add('hidden');

                // Simulate API call delay
                await new Promise(resolve => setTimeout(resolve, 1000));

                // In real implementation, replace with:
                // const response = await fetch('/api/salary-dashboard');
                // dashboardData = await response.json();

                dashboardData = mockApiData;

                // Hide loading and show dashboard
                document.getElementById('loading').classList.add('hidden');
                document.getElementById('dashboard').classList.remove('hidden');

                // Render all components
                renderCalculatedDays();
                renderSalaryChart();
                renderYearlyTable('2025');

            } catch (error) {
                console.error('Error loading dashboard data:', error);
                alert('Error loading dashboard data. Please try again.');
            }
        }

        // Render calculated days bars
        function renderCalculatedDays() {
            const container = document.getElementById('daysContainer');
            const currentDays = dashboardData.calculatedDays[dashboardData.calculatedDays.length - 1];

            document.getElementById('currentPresentDays').textContent = currentDays.presentDays;

            container.innerHTML = dashboardData.calculatedDays.map(item => {
                const total = 30; // Assuming 30 days max
                const presentWidth = (item.presentDays / total) * 100;
                const holidayWidth = (item.holidayDays / total) * 100;
                const leaveWidth = (item.leaveDays / total) * 100;

                return `
                    <div class="days-bar">
                        <div class="days-bar-header">
                            <span>${item.month}</span>
                            <span>${item.presentDays}</span>
                        </div>
                        <div class="bar-container">
                            <div class="bar-segment bar-present" style="width: ${presentWidth}%">
                                ${item.presentDays}
                            </div>
                            <div class="bar-segment bar-holiday" style="width: ${holidayWidth}%">
                                ${item.holidayDays}
                            </div>
                            <div class="bar-segment bar-leave" style="width: ${leaveWidth}%">
                                ${item.leaveDays > 0 ? item.leaveDays : ''}
                            </div>
                        </div>
                    </div>
                `;
            }).join('');
        }

        // Render salary chart
        function renderSalaryChart() {
            const ctx = document.getElementById('salaryChart').getContext('2d');

            if (salaryChart) {
                salaryChart.destroy();
            }

            salaryChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: dashboardData.salaryChart.map(item => item.month),
                    datasets: [{
                        label: 'Net Salary',
                        data: dashboardData.salaryChart.map(item => item.netSalary),
                        borderColor: '#3b82f6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderWidth: 3,
                        pointRadius: 6,
                        pointHoverRadius: 8,
                        tension: 0.1
                    }, {
                        label: 'Gross Salary',
                        data: dashboardData.salaryChart.map(item => item.grossSalary),
                        borderColor: '#10b981',
                        backgroundColor: 'rgba(16, 185, 129, 0.1)',
                        borderWidth: 3,
                        pointRadius: 6,
                        pointHoverRadius: 8,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            display: false
                        },
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    return context.dataset.label + ': ₹' + formatCurrency(context.raw);
                                }
                            }
                        }
                    },
                    scales: {
                        y: {
                            beginAtZero: false,
                            grid: {
                                color: '#f0f0f0'
                            },
                            ticks: {
                                callback: function(value) {
                                    return '₹' + (value / 1000) + 'K';
                                }
                            }
                        },
                        x: {
                            grid: {
                                color: '#f0f0f0'
                            }
                        }
                    }
                }
            });
        }

        // Render yearly salary table
        function renderYearlyTable(year) {
            const tbody = document.getElementById('salaryTableBody');
            const yearData = dashboardData.yearlyBreakdown[year];

            if (!yearData) return;

            const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

            tbody.innerHTML = `
                <tr>
                    <td><strong>Gross Salary</strong></td>
                    ${months.map(month => `<td class="text-center">${formatCurrency(yearData[month].gross)}</td>`).join('')}
                </tr>
                <tr>
                    <td><strong>Deduction Amount</strong></td>
                    ${months.map(month => `<td class="text-center">${formatCurrency(yearData[month].deduction)}</td>`).join('')}
                </tr>
                <tr class="net-amount-row">
                    <td><strong>Net Amount</strong></td>
                    ${months.map(month => `<td class="text-center">${formatCurrency(yearData[month].net)}</td>`).join('')}
                </tr>
            `;
        }

        // Format currency
        function formatCurrency(amount) {
            if (amount === 0) return '0.00';
            return new Intl.NumberFormat('en-IN', {
                minimumFractionDigits: 2,
                maximumFractionDigits: 2
            }).format(amount);
        }

        // Handle year change
        function handleYearChange() {
            const selectedYear = document.getElementById('yearSelector').value;
            renderYearlyTable(selectedYear);
        }

        // Handle quick access clicks
        function handleQuickAccess(type) {
            // Replace with your .NET controller action URLs
            const urls = {
                'ctc': '/Salary/CTCLetter',
                'form11': '/Salary/Form11',
                'form16': '/Salary/Form16',
                'tax-declaration': '/Salary/TaxDeclaration',
                'pf-statement': '/Salary/PFStatement',
                'salary-slip': '/Salary/SalarySlip',
                'tax-prep': '/Salary/TaxPreparation',
                'yearly-salary': '/Salary/YearlySalary'
            };

            if (urls[type]) {
                window.location.href = urls[type];
            }
        }

        // Example API integration functions for your .NET backend

        // Function to call your .NET API
        async function fetchSalaryData() {
            try {
                const response = await fetch('/api/Salary/GetDashboardData', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }

                return await response.json();
            } catch (error) {
                console.error('Error fetching salary data:', error);
                throw error;
            }
        }

        // Function to get yearly data
        async function fetchYearlyData(year) {
            try {
                const response = await fetch(`/api/Salary/GetYearlyData?year=${year}`, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                return await response.json();
            } catch (error) {
                console.error('Error fetching yearly data:', error);
                throw error;
            }
        }
    </script>
 *@