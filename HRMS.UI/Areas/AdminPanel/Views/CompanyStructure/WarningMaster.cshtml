@inject IConfiguration Configuration
@{
	ViewData["Title"] = "Warning Master";
	Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
}
<style>
	.nav-tabs {
		border-bottom: none !important;
	}

		.nav-tabs .nav-link {
			color: #333;
			background-color: #f1f1f1;
			border: 1px solid transparent;
		}

			.nav-tabs .nav-link.active {
				color: white !important;
				background-color: #2395c6 !important;
				border-color: #2395c6 #2395c6 #fff;
			}
</style>

<div class="card">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row">
			<div class="col-6">
				<h6 class="pt-2 mb-0">
					Warning Master
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">
					<i class="fadeIn animated bx bx-refresh" id="refreshData" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Refresh Data"></i>
				</div>
			</div>
		</div>
	</div>

	<ul class="nav nav-tabs mb-3 mt-3 ms-3" id="MappingTabs" role="tablist">
		<li class="nav-item me-2" role="presentation">
			<button class="nav-link active open-modal" data-bs-toggle="tab" data-bs-target="#typeTab" type="button" role="tab" data-tabname="Warning">
				Warning
			</button>
		</li>
		<li class="nav-item" role="presentation">
			<button class="nav-link open-modal" data-bs-toggle="tab" data-bs-target="#priorityTab" type="button" role="tab" data-tabname="Level Wise Card Mapping">
				Level Wise Card Mapping
			</button>
		</li>
	</ul>

	<div class="card-body">
		<div class="row me-3">
			<div class="col-md-12 btn-heading-title">
				<div class="input-group mb-2">
					<button id="addWarningBtn"
							type="button"
							class="btn mr-1 rounded-1"
							style="background-color:#2395c6; color:white;">
						Add Warning
					</button>

					<button id="addMapCardBtn"
							type="button"
							class="btn mr-1 rounded-1 d-none"
							style="background-color:#2395c6; color:white;">
						 Map Card
					</button>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<div id="warningGrid" class="grid-section">
						<div class="rowCount" id="rowCount1"></div>
						<div id="warningGridContainer">
							<!-- Your grid content for Type -->
							<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
								<div class="spinner-border text-primary" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
							</div>

						</div>
					</div>

					<div id="mappingGrid" class="grid-section d-none">
						<div class="rowCount" id="rowCount2"></div>
						<div id="mappingGridContainer">
							<!-- Your grid content for Priority -->
							<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
								<div class="spinner-border text-primary" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
							</div>

						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="addWarningModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel"><span class="formType">Create</span> Warning</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row">
					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="Warning Name"
								   id="txtWarningName" />
							<label class="floating-label" for="txtTicketType">Warning Name</label>
							<span id="spnWarningName" style="color:red; display:none;">Please Enter Warning Name</span>

						</div>
					</div>

					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">

							<select id="dropdownLevel" class="form-control floating-input">
								<option value="" selected disabled>Select Level</option>
								<option value="Stage 1">Stage 1</option>
								<option value="Stage 2">Stage 2</option>
								<option value="Stage 3">Stage 3</option>
							</select>

							<label class="floating-label" for="dropdownLevel">Level</label>
							<span id="spnLevel" style="color:red; display:none;">Please Select Level</span>

						</div>
					</div>
				</div>
				
				<div class="row">
					<div class="col-md-12">
						<div class="form-group mt-3 position-relative">
							<textarea class="form-control floating-input"
									  placeholder="Remarks"
									  id="txtRemark"></textarea>
							<label class="floating-label" for="txtRemark">Remarks</label>

						</div>
					</div>

				</div>


				<div class="row mt-2">

					<div class="col-md-3">
						<div class="form-group mt-3 position-relative">
							<b>Deduction Type: </b>
						</div>
					</div>

					<div class="col-md-3">
						<div class="form-group mt-3 position-relative">
							<label for="rdoNo">No Deduction</label>
							<input type="radio"
								   name="deduction"
								   checked
								   value="NO"
								   class="form-control-input"
								   placeholder=""
								   id="rdoNo" />
						</div>

					</div>

					<div class="col-md-3">
						<div class="form-group mt-3 position-relative">
							<label for="rdoAmount">
								Amount
							</label>
							<input type="radio"
								   name="deduction"
								   class="form-control-input"
								   value="AMT"
								   placeholder=""
								   id="rdoAmount" />
						</div>

					</div>

					<div class="col-md-3">
						<div class="form-group mt-3 position-relative">
							<label for="rdoDays">
								Days
							</label>
							<input type="radio"
								   name="deduction"
								   value="Day"
								   class="form-control-input"
								   placeholder=""
								   id="rdoDays" />
						</div>

					</div>

				</div>

				<!-- Placeholder for dynamic table -->
				<div class="row mt-3" id="amountTableContainer" style="display:none;">
					<div class="col-md-12">
						<table class="table table-bordered" id="amountTable">
							<thead class="table-light">
								<tr>
									<th style="width:25%">From (Warning Count)</th>
									<th style="width:25%">To (Warning Count)</th>
									<th style="width:25%">Deduct Amount</th>
									<th style="width:25%">Action</th>
								</tr>
							</thead>
							<tbody>
								<!-- Dynamic rows will be added here -->
							</tbody>
						</table>
						<button type="button" class="btn btn-sm btn-success" id="btnAddRow">Add Row</button>
					</div>
				</div>

				<div class="row mt-3" id="daysTableContainer" style="display:none;">
					<div class="col-md-12">
						<table id="daysTable" class="table table-bordered">
							<thead>
								<tr>
									<th style="width:25%">From (warning count)</th>
									<th style="width:25%">To (warning count)</th>
									<th style="width:25%">Deduct Days</th>
									<th style="width:25%">Action</th>
								</tr>
							</thead>
							<tbody></tbody>
						</table>
						<button type="button" id="btnAddRowDays" class="btn btn-sm btn-success">Add Row</button>
					</div>

				</div>


			</div>
			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnCreateWarning" style="background-color:#2395c6; color:white;">Create</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="addMappingModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-md">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel"><span class="formType">Create</span> Level Wise Card Mapping</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row">
					<div class="col-md-12">
						<div class="form-group mt-3 position-relative">

							<select id="dropdownLevelMap" class="form-control floating-input">
								<option value="" selected disabled>Select Level</option>
								<option value="Stage 1" >Stage 1</option>
								<option value="Stage 2" >Stage 2</option>
								<option value="Stage 3">Stage 3</option>
							</select>

							<label class="floating-label" for="dropdownLevelMap">Level</label>
							<span id="spnLevelMap" style="color:red; display:none;">Please Select Level</span>

						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-md-3">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="Card Count"
								   id="txtCardCount" 
								   step="1" min="0" oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
							<label class="floating-label" for="txtCardNo">Card Count</label>
							<span id="spnCardCount" style="color:red; display:none;">Please Enter Count</span>
						</div>

					</div>
					<div class="col-md-9">
						<div class="form-group mt-3 position-relative">

							<select id="dropdownCard" class="form-control floating-input">
								<option value="" selected disabled>Select Card</option>
								<option value="Yellow Card">Yellow Card</option>
								<option value="Red Card">Red Card</option>
								
							</select>

							<label class="floating-label" for="drpCard">Card</label>
							<span id="spnCard" style="color:red; display:none;">Please Select Card</span>

						</div>
					</div>
				</div>

			</div>
			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnCreateMapping" style="background-color:#2395c6; color:white;">Create</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<script>

		let warningMasterId=0;
		let deductionTypeAmountValue=null;
		let deductionTypeDayValue=null;


	$("#refreshData").click(() => {
			localStorage.removeItem("warningGridContainerStorage");
		resetWarningGridFilters( $('#warningGridContainer').dxDataGrid('instance'));
		loadCardMappingGrid();
	});


	function resetWarningGridFilters(gridInstance) {
	  if (gridInstance) {
	   gridInstance.clearFilter();            // Clear all filters
	   gridInstance.clearSorting();           // Clear all sorting

	  }
	 }


	$(document).ready(function () {

		$('#MappingTabs .nav-link').on('click', function () {
			const selectedTabName = $(this).data('tabname');

			// Update active tab class
			$('#MappingTabs .nav-link').removeClass('active');
			$(this).addClass('active');

			// Show/hide buttons
			if (selectedTabName === 'Warning') {
				$('#addWarningBtn').removeClass('d-none');
				$('#addMapCardBtn').addClass('d-none');

				$('#warningGrid').removeClass('d-none');
				$('#mappingGrid').addClass('d-none');
			} else {
				$('#addWarningBtn').addClass('d-none');
				$('#addMapCardBtn').removeClass('d-none');

				$('#warningGrid').addClass('d-none');
				$('#mappingGrid').removeClass('d-none');
			}
		});
	});


	$("#addWarningBtn").click( () => {
			resetWarningForm();
		 $('.formType').text('Create');
		$('#btnCreateWarning').text('Create');
	  $("#addWarningModel").modal('show');

	})

		function toggleDeleteButtons() {
			let rowCount = $("#amountTable tbody tr").length;
			if (rowCount <= 1) {
				$(".btnDelete").hide();
			} else {
				$(".btnDelete").show();
			}
		}

			function toggleDayDeleteButtons() {
					let rowCount2 = $("#daysTable tbody tr").length;
					if (rowCount2<=1)
					{
						$(".btnDeleteDays").hide();
					}
					else {
							$(".btnDeleteDays").show();
					}
				}



$(document).ready(function () {

		// Show/hide the table based on rdoAmount
		$("#rdoAmount").on("change", function () {
			if ($(this).is(":checked")) {
				$("#amountTableContainer").show();

				// Only show default row once (if no other rows)
				if ($("#amountTable tbody tr").length === 0) {
					let defaultRow = `
						<tr class="default-row">
								<td><input type="text" class="form-control fromCount" placeholder="From" step="1" min="0" oninput="this.value = this.value.replace(/[^0-9]/g, '')"/></td>
								<td><input type="text" class="form-control toCount" placeholder="To" step="1" min="0" oninput="this.value = this.value.replace(/[^0-9]/g, '')"/></td>
								<td><input type="text" class="form-control deductAmount" placeholder="Deduct Amount" step="1" min="0" oninput="this.value = this.value.replace(/[^0-9]/g, '')" /></td>
							<td>
								<button type="button" class="btn btn-sm btn-success btnSave me-2">Save</button>
									<button type="button" class="btn btn-sm btn-danger btnDelete " style="display:none;">Delete</button>
							</td>
						</tr>`;
					$("#amountTable tbody").append(defaultRow);
				}
			}
		});

		// Hide table if other radio is selected
		$("#rdoNo, #rdoDays").on("change", function () {
			$("#amountTableContainer").hide();
			$("#amountTable tbody").empty(); // Clear all rows
		});

		// Add new row after validating the last one
    $("#btnAddRow").on("click", function () {
				
		let lastRow = $("#amountTable tbody tr:last");
		let from = lastRow.find(".fromCount").val();
		let to = lastRow.find(".toCount").val();
		let amount = lastRow.find(".deductAmount").val();

		if (!from || !to || !amount) {
				round_error_noti("Please fill all fields before adding new row.");
			return;
		}

			if($(".btnSave").text()=="Save")
			{
					round_error_noti("Please save record before adding new row");
					return
			}
		// Disable previous inputs and change only the Save button to Update
		lastRow.find("input").prop("disabled", true);
		lastRow.find(".btnSave").removeClass("btnSave btn-success").addClass("btnUpdate btn-primary").text("Update");

		// Append new empty row
		let newRow = `
			<tr>
					<td><input type="text" class="form-control fromCount" placeholder="From" step="1" min="0" oninput="this.value = this.value.replace(/[^0-9]/g, '')"/></td>
					<td><input type="text" class="form-control toCount" placeholder="To" step="1" min="0" oninput="this.value = this.value.replace(/[^0-9]/g, '')"/></td>
					<td><input type="text" class="form-control deductAmount" placeholder="Deduct Amount" step="1" min="0" oninput="this.value = this.value.replace(/[^0-9]/g, '')"/></td>
				<td>
					<button type="button" class="btn btn-sm btn-success btnSave me-2">Save</button>
					<button type="button" class="btn btn-sm btn-danger btnDelete">Delete</button>
				</td>
			</tr>`;
		$("#amountTable tbody").append(newRow);
			toggleDeleteButtons();
	});

		// Delete row
		$("#amountTable").on("click", ".btnDelete", function () {
			$(this).closest("tr").remove();
			toggleDeleteButtons();
		});

		// Save button logic
		$("#amountTable").on("click", ".btnSave", function () {
			let row = $(this).closest("tr");
			let from = row.find(".fromCount").val();
			let to = row.find(".toCount").val();
			let amount = row.find(".deductAmount").val();

			if (!from || !to || !amount) {
					round_error_noti("Please fill all fields before saving");
				return;
			}
				
			// Save single row
			let rowData = `${from},${to},${amount}`;
			//console.log("Saved Row Data:", rowData);

			// Disable inputs and change button to Update
			row.find("input").prop("disabled", true);
			$(this).removeClass("btnSave btn-success").addClass("btnUpdate btn-primary").text("Update");

			// Show Delete button only if not default row
			if (!row.hasClass("default-row") && row.find(".btnDelete").length === 0) {
				row.find("td:last").append(`<button type="button" class="btn btn-sm btn-danger btnDelete">Delete</button>`);
			}

			// Log all saved data
				deductionTypeAmountValue=getAllSavedRowData();
					toggleDeleteButtons()
		});

		// Update button logic
		$("#amountTable").on("click", ".btnUpdate", function () {
			let row = $(this).closest("tr");
			row.find("input").prop("disabled", false);
			$(this).removeClass("btnUpdate btn-primary").addClass("btnSave btn-success").text("Save");

			// Ensure the Delete button is there, as the row is no longer default
			if (!row.hasClass("default-row") && row.find(".btnDelete").length === 0) {
				row.find("td:last").append(`<button type="button" class="btn btn-sm btn-danger btnDelete">Delete</button>`);
			}
		});
	});

	// Function to get all saved row data and log it
	function getAllSavedRowData() {
		let dataArr = [];

		$("#amountTable tbody tr").each(function () {
			let row = $(this);
			let from = row.find(".fromCount").val();
			let to = row.find(".toCount").val();
			let amount = row.find(".deductAmount").val();

			// Include only saved rows (inputs are disabled)
			if (row.find("input").prop("disabled")) {
				dataArr.push(`${from},${to},${amount}`);
			}
		});

		// Join all row data with "|" and log it
		let finalString = dataArr.join("|");
		//console.log("All Saved Row Data:", finalString);

		return finalString;
	}
		
		// Show table if rdoDays is selected
	$("#rdoDays").on("change", function () {
			if ($(this).is(":checked")) {
				$("#daysTableContainer").show();

				// Only show default row if empty
				if ($("#daysTable tbody tr").length === 0) {
					let defaultRow = `
						<tr class="default-row">
							<td><input type="text" class="form-control fromWarn" placeholder="From" oninput="this.value = this.value.replace(/[^0-9]/g, '')" /></td>
							<td><input type="text" class="form-control toWarn" placeholder="To" oninput="this.value = this.value.replace(/[^0-9]/g, '')" /></td>
							<td><input type="text" class="form-control deductDays" placeholder="Deduct Days" oninput="this.value = this.value.replace(/[^0-9]/g, '')" /></td>
							<td>
								<button type="button" class="btn btn-sm btn-success btnSaveDays me-2">Save</button>
									<button type="button" class="btn btn-sm btn-danger btnDeleteDays" style="display:none;">Delete</button>

							</td>
						</tr>`;
					$("#daysTable tbody").append(defaultRow);
				}
			}
		});
			
		// Hide and clear if rdoAmount or rdoNo is selected
		$("#rdoAmount, #rdoNo").on("change", function () {
			$("#daysTableContainer").hide();
			$("#daysTable tbody").empty();
		});

		// Add new row in Days table
	   $("#btnAddRowDays").on("click", function () {
			let lastRow = $("#daysTable tbody tr:last");
			let from = lastRow.find(".fromWarn").val();
			let to = lastRow.find(".toWarn").val();
			let days = lastRow.find(".deductDays").val();

			if (!from || !to || !days) {
					round_error_noti("Please fill all fields before adding new row");
				return;
			}
				if($(".btnSaveDays").text()=="Save"){
						round_error_noti("Please save record before adding new row");
						return
	             }
			lastRow.find("input").prop("disabled", true);
			lastRow.find(".btnSaveDays").removeClass("btnSaveDays btn-success").addClass("btnUpdateDays btn-primary").text("Update");

			let newRow = `
				<tr>
					<td><input type="text" class="form-control fromWarn" placeholder="From" oninput="this.value = this.value.replace(/[^0-9]/g, '')" /></td>
					<td><input type="text" class="form-control toWarn" placeholder="To" oninput="this.value = this.value.replace(/[^0-9]/g, '')" /></td>
					<td><input type="text" class="form-control deductDays" placeholder="Deduct Days" oninput="this.value = this.value.replace(/[^0-9]/g, '')" /></td>
					<td>
						<button type="button" class="btn btn-sm btn-success btnSaveDays me-2">Save</button>
						<button type="button" class="btn btn-sm btn-danger btnDeleteDays">Delete</button>
					</td>
				</tr>`;
			$("#daysTable tbody").append(newRow);
					toggleDayDeleteButtons();
		});

		// Delete row
		$("#daysTable").on("click", ".btnDeleteDays", function () {
			$(this).closest("tr").remove();
					toggleDayDeleteButtons();
		});

		// Save button logic
		$("#daysTable").on("click", ".btnSaveDays", function () {
			let row = $(this).closest("tr");
			let from = row.find(".fromWarn").val();
			let to = row.find(".toWarn").val();
			let days = row.find(".deductDays").val();

			if (!from || !to || !days) {
					round_error_noti("Please fill all fields before saving");
				return;
			}

			let rowData = `${from},${to},${days}`;
			//console.log("Saved Days Row Data:", rowData);

			row.find("input").prop("disabled", true);
			$(this).removeClass("btnSaveDays btn-success").addClass("btnUpdateDays btn-primary").text("Update");

			if (!row.hasClass("default-row") && row.find(".btnDeleteDays").length === 0) {
				row.find("td:last").append(`<button type="button" class="btn btn-sm btn-danger btnDeleteDays">Delete</button>`);
			}

				deductionTypeDayValue=getAllSavedDaysData();
		});

		// Update logic
		$("#daysTable").on("click", ".btnUpdateDays", function () {
			let row = $(this).closest("tr");
			row.find("input").prop("disabled", false);
			$(this).removeClass("btnUpdateDays btn-primary").addClass("btnSaveDays btn-success").text("Save");

			if (!row.hasClass("default-row") && row.find(".btnDeleteDays").length === 0) {
				row.find("td:last").append(`<button type="button" class="btn btn-sm btn-danger btnDeleteDays">Delete</button>`);
			}
		});
	

	// Function to get all saved data from Days table
	function getAllSavedDaysData() {
		let dataArr = [];

		$("#daysTable tbody tr").each(function () {
			let row = $(this);
			let from = row.find(".fromWarn").val();
			let to = row.find(".toWarn").val();
			let days = row.find(".deductDays").val();

			if (row.find("input").prop("disabled")) {
				dataArr.push(`${from},${to},${days}`);
			}
		});

		let finalString = dataArr.join("|");
		//console.log("All Saved Days Data:", finalString);
		return finalString;
	}



	$(() => {
		localStorage.removeItem("warningGridContainerStorage");
			loadCardWarningGrid();
		});

		// Load Grid

		function loadCardWarningGrid() {
				$.ajax({
				type: "GET",
				url: '@baseUrl/WarningMasterAPI/GetAllWarningMaster', 
				success: function (response) {
					if (response.isSuccess ) {
					$("#warningGridContainer").dxDataGrid({
							dataSource: response.data,
							keyExpr: "warningMasterId",
							stateStoring: {
								enabled: true,
								type: 'localStorage',
									storageKey: 'warningGridContainerStorage'
							},

						columns: [
							
							{ dataField: 'warningName', caption: 'Warning Name', alignment: 'center' },
							{ dataField: 'level', caption: 'Level', alignment: 'center' },
							{ dataField: 'remarks', caption: 'Remarks', alignment: 'center' },
							{ dataField: 'deductionType', caption: 'Deduction Type', alignment: 'center' },
							{ dataField: 'deductionTypeValue', caption: 'Deduction Value', alignment: 'center' },
								{
									dataField: '',
									caption: '',
									alignment: 'center',
									width: 50,
									type: 'buttons',
									cellTemplate: function (container, options) {
											$('<div class="d-flex order-actions">' +
													'<a href="javascript:;" class="edit-action" title="Update Warning">' +
													'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
													'<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
													'</svg>' +
													'</a>' +
													'</div>')
											.on('dxclick', function () {
													updateWarning(options.data);
											}).appendTo(container);
									}
								},
								{
									dataField: '',
									caption: '',
									alignment: 'center',
									width: 50,
									type: 'buttons',
									cellTemplate: function (container, options) {
										var buttonElement = $('<div class="d-flex order-actions">' +
												'<a href="javascript:;" class="delete-action" title="Delete Warning">' +
											'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
											'<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
											'</svg>' +
											'</a>' +
											'</div>')
											.on('dxclick', function () {
													deleteWarning(options.data);
											}).appendTo(container);
									}
								}

						],


							showBorders: true,
							columnsAutoWidth: true,
							wordWrapEnabled: false,
							rowAlternationEnabled: false,
							paging: { pageSize: 10 },
							pager: {
								showPageSizeSelector: true,
								allowedPageSizes: [10, 25, 50, 100]
							},
							headerFilter: { visible: true },
							filterRow: { visible: true, applyFilter: "auto" },
							allowColumnResizing: true,
							groupPanel: { visible: true },
							searchPanel: { visible: true, width: 240, placeholder: "Search..." },
							allowColumnReordering: true,
							columnFixing: { enabled: false },

							onExporting: function (e) {
								e.component.beginUpdate();
								e.component.columnOption("Button", "visible", false);
							},
							onExported: function (e) {
								e.component.columnOption("Button", "visible", true);
								e.component.endUpdate();
							},
							onCellPrepared: function (e) {
								if (e.rowType === "header" || e.rowType === "group") {
									e.cellElement.css("text-align", "center");
									if (e.rowType === "header") {
										e.cellElement.css("font-weight", "bold");
									}
								}
							},
							onContentReady(e) {
								$('#rowCount1').html('Total Records: ' + e.component.totalCount());
							}
						}).dxDataGrid('instance');
					}
				}
			});
		}


			// Create / Update
	$("#btnCreateWarning").click(() => {
			$("#btnCreateWarning").prop("disabled", true);
		const warningName = $("#txtWarningName").val();
		const level = $("#dropdownLevel").val();
		const remarks = $("#txtRemark").val();
		let deductionType = $("input[name='deduction']:checked").val();
			let isValid = true;
				$("#spnLevel, #spnWarningName").hide();
			
				if (!warningName) { $("#spnWarningName").show(); isValid = false; }
				if (!level) { $("#spnLevel").show(); isValid = false; }
				
			if (!isValid)
			{
				debugger
				$("#btnCreateWarning").prop("disabled", false);
				return;
			}
			var value=deductionType=="Day"?deductionTypeDayValue:(deductionType=="AMT")?deductionTypeAmountValue:null
			let payload = {
			   warningMasterId:warningMasterId,
				level,
				warningName,
				remarks,
			    deductionType,
					deductionTypeValue:value,
				createdBy:levelWiseCardMappingId==0?null:null,
				updatedBy:levelWiseCardMappingId==0?null:null,
			};

			$.ajax({
			  url:'@baseUrl/WarningMasterAPI/CreateOrUpdateWarningMaster',
				type: 'POST' ,
				contentType: 'application/json',
				data: JSON.stringify(payload),
				success: function (response) {
					if (response.isSuccess) {
						round_success_noti(response.responseMessage);
							loadCardWarningGrid();
							$('#addWarningModel').modal('hide');
					} else {
										
						round_error_noti(response.responseMessage);
					}
							$("#btnCreateWarning").prop("disabled", false);
				},
				error: function (xhr, status, error) {
					console.error('Error:', error);
					round_error_noti('Unable to add warning');
				}
			});
		});
	function updateWarning(data) {
		// Close any open modal to ensure only one is visible
		$(".modal").modal("hide");

		// Reset form
		resetWarningForm();
		warningMasterId=data.warningMasterId
		// Populate basic fields
		$("#txtWarningId").val(data.warningMasterId);
		$("#txtWarningName").val(data.warningName);
		$("#dropdownLevel").val(data.level);
		$("#txtRemark").val(data.remarks);
		$("#txtDeductionValue").val(data.deductionTypeValue);

		// Set deduction type radio
		$(`input[name='deduction'][value='${data.deductionType}']`).prop("checked", true).trigger("change");

		const renderRows = (rows, tableSelector, type) => {
			const $tbody = $(`${tableSelector} tbody`).empty();

				const inputClass = data.deductionType=="Day" ? ["fromWarn", "toWarn", "deductDays"] : ["fromCount", "toCount", "deductAmount"];
				const saveClass = data.deductionType=="Day" ? "btnSaveDays" : "btnSave";
				const updateClass = data.deductionType=="Day" ? "btnUpdateDays" : "btnSave";
				const deleteClass = data.deductionType=="Day" ? "btnDeleteDays" : "btnDelete";

			rows.forEach((row, index) => {
				const [from, to, val] = row.split(",");
				const isLast = index === rows.length - 1;

				const rowHtml = `
					<tr>
						<td><input type="text" class="form-control ${inputClass[0]}" placeholder="From" value="${from}"  oninput="this.value = this.value.replace(/\\D/g, '')" /></td>
						<td><input type="text" class="form-control ${inputClass[1]}" placeholder="To" value="${to}"  oninput="this.value = this.value.replace(/\\D/g, '')" /></td>
						<td><input type="text" class="form-control ${inputClass[2]}" placeholder="${data.deductionType=="Day" ? 'Deduct Days' : 'Deduct Amount'}" value="${val}"  oninput="this.value = this.value.replace(/\\D/g, '')" /></td>
						<td>
							<button type="button" class="btn btn-sm btn-primary ${saveClass}">Save</button>
						   <button type="button" class="btn btn-sm btn-danger ${deleteClass}">Delete</button>
						</td>
					</tr>`;
				$tbody.append(rowHtml);
					
			});

			
			$(tableSelector + "Container").show();
		};

		// Deduction Type - Day
		if (data.deductionType === "Day") {
				if(data.deductionTypeValue){
					deductionTypeDayValue=data.deductionTypeValue;
					const rows = data.deductionTypeValue.split("|");
					renderRows(rows, "#daysTable", "Day");
						toggleDayDeleteButtons();
				}
		} else {
			$("#daysTableContainer").hide().find("tbody").empty();
		}

		// Deduction Type - AMT
		if (data.deductionType === "AMT") {
				if(data.deductionTypeValue){
					deductionTypeAmountValue=data.deductionTypeValue;
					const rows = data.deductionTypeValue.split("|");
					renderRows(rows, "#amountTable", "AMT");
						toggleDeleteButtons();
				}
		} else {
			$("#amountTableContainer").hide().find("tbody").empty();
		}

			 $('.formType').text('Update');
			$('#btnCreateWarning').text('Update');

			
		// Open the modal
		$("#addWarningModel").modal("show");
	}

	function resetWarningForm() {
		warningMasterId=0;
			deductionTypeDayValue=null;
			deductionTypeAmountValue=null;
			$("#btnCreateWarning").prop("disabled", false);
		$("#txtWarningId, #txtWarningName, #txtRemark, #txtDeductionValue").val('');
		$("#dropdownLevel").val('');
		$("input[name='deduction']").prop("checked", false);
		$("#daysTableContainer, #amountTableContainer").hide();
		$("#daysTable tbody, #amountTable tbody").empty();
	   $("#rdoNo").prop("checked", true).trigger("change");
	}

	function deleteWarning(data) {
			if (!confirm("Are you sure you want to delete this warning?")) {
				return; // Cancel the delete operation
			}

			var deleteObj = {
				id: data.warningMasterId,
				deletedBy: null // Set this to the actual user if needed
			};

			$.ajax({
				url: '@baseUrl/WarningMasterAPI/DeleteWarningMaster',
				type: 'DELETE',
				contentType: 'application/json',
				data: JSON.stringify(deleteObj),
				success: function (response) {
					if(response.isSuccess)
						{
							round_success_noti(response.responseMessage);
						}
						else
						{
							round_error_noti(response.responseMessage)
						}
							loadCardWarningGrid();
				},
				error: function (error) {
					console.log('Error deleting warning!');
				}
			});
		}


</script>


<!--Level WiseCard Mapping-->
<script>
	let levelWiseCardMappingId = 0;

	// Create New Mapping
	$("#addMapCardBtn").click(() => {
		levelWiseCardMappingId = 0;
		$("#btnCreateMapping").prop("disabled", false);
		$(".formType").text("Create");
		$("#btnCreateMapping").text("Create");
		clearForm();
		$("#addMappingModel").modal("show");
	});

	$("#refreshData").click(() => {
		localStorage.removeItem("cardMappingGridStorage");
		resetGridFilters( $('#mappingGridContainer').dxDataGrid('instance'));
		loadCardMappingGrid();
	});


	function resetGridFilters(gridInstance) {
	  if (gridInstance) {
	   gridInstance.clearFilter();            // Clear all filters
	   gridInstance.clearSorting();           // Clear all sorting

	  }
	 }

	// On DOM Load
	$(() => {
		localStorage.removeItem("cardMappingGridStorage");
		loadCardMappingGrid();
	});

	// Load Grid
	
	function loadCardMappingGrid() {
			$.ajax({
			type: "GET",
			url: '@baseUrl/LevelWiseCardMappingAPI/GetAllLevelWiseCardMapping', // Update API endpoint as needed
			cache: false,
			success: function (response) {
				if (response.isSuccess ) {

					$("#mappingGridContainer").dxDataGrid({
						dataSource: response.data,
						keyExpr: "levelWiseCardMappingId",
						stateStoring: {
							enabled: true,
							type: 'localStorage',
							storageKey: 'cardMappingGridStorage'
						},

						columns: [
							

							{ dataField: 'level', caption: 'Level', alignment: 'center' },
								{
								dataField: 'cardType',
								caption: 'Card Type',
								alignment: 'center',
								calculateCellValue: function (rowData) {
									return  rowData.cardNo+'  ' +rowData.cardType
								}
							},
							// Edit button
								{
									dataField: '',
									caption: '',
									alignment: 'center',
									dataType: 'string',
									format: '',
									type: 'buttons',
									width: '50px',
									cellTemplate: function (container, options) {

										var buttonElement = $('<div class="d-flex order-actions">' +
											'<a href="javascript:;" class="edit-action" title="Update Mapping">' +
											'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
											'<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
											'</svg>' +
											'</a>' +
											'</div>')
											.on('dxclick', function () {
												updateLevelWiseMapping(options.data);
											}).appendTo(container);

										// Optional: update title attribute on SVG as well (for tooltip consistency)
										buttonElement.find('svg').attr('title', 'Update Mapping');
									}
								},

							// Delete button
							{
								dataField: '',
								caption: '',
								alignment: 'center',
								width: 50,
								type: 'buttons',
								cellTemplate: function (container, options)
								{

									var buttonElement = $('<div class="d-flex order-actions">' +
										 '<a href="javascript:;" class="delete-action" title="Delete Mapping">' +
										'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
										'<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
										'</svg>' +
										'</a>' +
										'</div>')
										.on('dxclick', function () {
											deleteLevelWiseMapping(options.data);
										}).appendTo(container);

									var svgElement = buttonElement.find('svg');  // Accessing the svg element directly

									svgElement.attr('title', 'Delete Mapping');
								}
							}


						],

						showBorders: true,
						columnsAutoWidth: true,
						wordWrapEnabled: false,
						rowAlternationEnabled: false,
						paging: { pageSize: 10 },
						pager: {
							showPageSizeSelector: true,
							allowedPageSizes: [10, 25, 50, 100]
						},
						headerFilter: { visible: true },
						filterRow: { visible: true, applyFilter: "auto" },
						allowColumnResizing: true,
						groupPanel: { visible: true },
						searchPanel: { visible: true, width: 240, placeholder: "Search..." },
						allowColumnReordering: true,
						columnFixing: { enabled: false },

						onExporting: function (e) {
							e.component.beginUpdate();
							e.component.columnOption("Button", "visible", false);
						},
						onExported: function (e) {
							e.component.columnOption("Button", "visible", true);
							e.component.endUpdate();
						},
						onCellPrepared: function (e) {
							if (e.rowType === "header" || e.rowType === "group") {
								e.cellElement.css("text-align", "center");
								if (e.rowType === "header") {
									e.cellElement.css("font-weight", "bold");
								}
							}
						},
						onContentReady(e) {
							$('#rowCount2').html('Total Records: ' + e.component.totalCount());
						}
					}).dxDataGrid('instance');
				}
			}
		});
	}

	// Create / Update
	$("#btnCreateMapping").click(() => {
		$("#btnCreateMapping").prop("disabled", true);
		let level = $("#dropdownLevelMap").val();
		let cardNo = $("#txtCardCount").val();
		let cardType = $("#dropdownCard").val();

		let isValid = true;
		$("#spnLevelMap, #spnCardCount, #spnCard").hide();

		if (!level) { $("#spnLevelMap").show(); isValid = false; }
		if (!cardNo) { $("#spnCardCount").show(); isValid = false; }
		if (!cardType) { $("#spnCard").show(); isValid = false; }

		if (!isValid)
		{
			$("#btnCreateMapping").prop("disabled", false);
			return;
		}

		let payload = {
			levelWiseCardMappingId:levelWiseCardMappingId,
			level,
			cardNo,
			cardType,
			createdBy:levelWiseCardMappingId==0?null:null,
			updatedBy:levelWiseCardMappingId==0?null:null,
		};

		$.ajax({
		  url:'@baseUrl/LevelWiseCardMappingAPI/CreateOrUpdateLevelWiseCardMapping',
			type: 'POST' ,
			contentType: 'application/json',
			data: JSON.stringify(payload),
			success: function (response) {
				if (response.isSuccess) {
					round_success_noti(response.responseMessage);
					loadCardMappingGrid();
					$('#addMappingModel').modal('hide');
				} else {
					round_error_noti(response.responseMessage);
				}
				$("#btnCreateMapping").prop("disabled", false);
			},
			error: function (xhr, status, error) {
				console.error('Error:', error);
				round_error_noti('Unable to map');
			}
		});
	});

	// Edit
	function updateLevelWiseMapping(data) {
		levelWiseCardMappingId = data.levelWiseCardMappingId;
		$("#btnCreateMapping").prop("disabled", false);
		$(".formType").text("Update");
		$("#btnCreateMapping").text("Update");

		$("#dropdownLevelMap").val(data.level);
		$("#txtCardCount").val(data.cardNo);
		$("#dropdownCard").val(data.cardType);

		$("#addMappingModel").modal("show");
	}

	

	function deleteLevelWiseMapping(data) {
		if (!confirm("Are you sure you want to delete this holiday?")) {
			return; // Cancel the delete operation
		}

		var deleteObj = {
			id: data.levelWiseCardMappingId,
			deletedBy: null // Set this to the actual user if needed
		};

		$.ajax({
			url: '@baseUrl/LevelWiseCardMappingAPI/DeleteLevelWiseCardMapping',
			type: 'DELETE',
			contentType: 'application/json',
			data: JSON.stringify(deleteObj),
			success: function (response) {
				if(response.isSuccess)
					{
						round_success_noti(response.responseMessage);
					}
					else
					{
						round_error_noti(response.responseMessage)
					}
					loadCardMappingGrid();
			},
			error: function (error) {
				console.log('Error deleting maping!');
			}
		});
	}
	// Clear Form
	function clearForm() {
		$("#dropdownLevelMap").val("");
		$("#txtCardCount").val("");
		$("#dropdownCard").val("");
		$("#spnLevelMap, #spnCardCount, #spnCard").hide();
	}
</script>
