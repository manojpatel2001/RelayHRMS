@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Monthly Salary";
    Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
    var uri = new Uri(baseUrl);
    string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}"; 
    string UIBaseUrl = Configuration["UIBaseUrlSettings:baseUrl"];

}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/exceljs/4.3.0/exceljs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/FileSaver.js/2.0.5/FileSaver.min.js"></script>


<style>
    body {
        background-color: white !important;
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
    }

    .salary-box {
        background-color: white !important;
        border: 1px solid #ccc;
        padding: 20px;
        border-radius: 5px;
    }

    .salary-header {
        background-color: #3e4b6d;
        color: white;
        font-weight: bold;
        padding: 8px 15px;
        border-top-left-radius: 4px;
        border-top-right-radius: 4px;
    }

    .form-label {
        width: 130px;
        margin-bottom: 0;
        font-weight: 500;
    }

    .form-group-row {
        margin-bottom: 12px;
    }

    .form-select-sm,
    .form-control-sm {
        width: 180px;
    }


    .btn-go {
        background-color: #3e4b6d;
        color: white;
        border: none;
        padding: 4px 12px;
        font-size: 13px;
        font-weight: 600;
        border-radius: 4px;
        transition: none;
        box-shadow: none;
    }

        .btn-go :hover,
        .btn-go :focus,
        .btn-go :active {
            background-color: #3e4b6d;
            color: white;
            outline: none;
            box-shadow: none;
        }


    .dx-tagbox,
    .dx-tagbox .dx-texteditor {
        width: 100% !important;
        max-width: 100% !important;
    }

    #branchDropdown,
    #employeeDropdown {
        width: 100%;
    }

    .dx-placeholder {
        font-size: 14px !important;
        color: #999 !important;
        white-space: nowrap;
    }

    .dx-texteditor-input {
        width: 100% !important;
    } 
    .small-dropdown {
        width: 180px !important;
    } 

    .dx-list-select-all {
        background-color: transparent !important;
        color: #333 !important;
        font-weight: normal;
        padding: 8px 12px;
    }

        .dx-list-select-all.dx-state-hover {
            background-color: #f8f8f8 !important;
        }

    .dx-placeholder {
        color: #999 !important;
        font-weight: normal;
    }

    #salaryGridContainer {
        max-height: 200px;
    }

    .dx-button .fa-file-excel {
        color: #217346; /* Excel green */
    }

</style>


<div class="salary-box">
    <div class="salary-header">Add Monthly Salary</div>

    <div class="row justify-content-center mt-3">
        <div class="col-lg-10">
            <div class="row">
                <!-- Left Column -->
                <div class="col-md-6">
                    <div class="form-group-row d-flex align-items-center">
                        <label class="form-label">Month<span class="text-danger">*</span> :</label>
                        <select class="form-select form-select-sm" id="month">
                            <option>January</option>
                            <option>February</option>
                            <option>March</option>
                            <option>April</option>
                            <option>May</option>
                            <option>June</option>
                            <option>July</option>
                            <option>August</option>
                            <option>September</option>
                            <option>October</option>
                            <option>November</option>
                            <option>December</option>
                        </select>
                    </div>

                    <div class="form-group-row d-flex align-items-center">
                        <label class="form-label">Branch :</label>
                        <div id="branchDropdown" class="small-dropdown"></div>
                    </div>
                </div>

                <!-- Right Column -->
                <div class="col-md-6">
                    <div class="form-group-row d-flex align-items-center">
                        <label class="form-label">Year<span class="text-danger">*</span> :</label>
                        <select class="form-select form-select-sm" id="year"></select>
                    </div>

                    <div class="form-group-row d-flex align-items-center">
                        <label class="form-label">Employee :</label>
                        <div id="employeeDropdown" class="small-dropdown"></div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Bottom Buttons -->
    <div class="col-md-12 text-center mt-3">
        <button class="btn-go" id="btnFetchSalary" >Go</button>
        <button onclick="goBack()" class="btn-go">Back</button>
    </div>
</div>


<div id="salaryGridContainer" style="display:none" class="mt-4"></div>   

<div class="col-md-12 text-center mt-3" id="salaryActions" style="display:none">
    <button id="btnProcessSalary" class="salary-header mx-1">Process</button>
    <button id="btnClearSalary" class="salary-header mx-1">Clear</button>
</div>

<script>

                   const savedCompany = localStorage.getItem('selectedCompany');
           var companyDetails = JSON.parse(savedCompany);
           const CompanyId=companyDetails.CompanyId;
           const EmployeeId=localStorage.getItem('EmployeeId');
           const Token=localStorage.getItem("authToken");

    $(document).ready(function () {
           let selectedBranchIds = [0];
        BindBranchDropdown();
        populateYearDropdown();
        BindEmployeeDropdownByBranch(selectedBranchIds);
    });

    function goBack() {
        window.history.back();
    }

    function populateYearDropdown() {
        const startYear = 2024;
        const currentYear = new Date().getFullYear();
        const yearDropdown = $("#year");
        yearDropdown.empty();
        for (let year = currentYear; year >= startYear; year--) {
            yearDropdown.append(`<option value="${year}">${year}</option>`);
        }
        yearDropdown.val(currentYear);
    }

    function BindBranchDropdown() {
        $.ajax({
                    url: '@baseUrl/BranchAPI/GetAllBranchesListByCompanyId/'+CompanyId,
                method: 'GET',
                    headers: {
                            'Authorization': 'Bearer ' + Token
                        },
            success: function (response) { 
                if (response?.data?.length > 0) {
                    $("#branchDropdown").dxTagBox({
                        items: response.data,
                        displayExpr: "branchName",
                        valueExpr: "branchId",
                        placeholder: "--Select Branch--",
                        showSelectionControls: true,
                        searchEnabled: true,
                        showClearButton: true,
                        maxDisplayedTags: 3,
                        applyValueMode: "instantly",
                        multiline: false,
                        minSearchLength: 0,
                        width: "100%",
                        onOpened: function () {
                            $(".dx-overlay-content").css("max-width", "150px");
                        },
                        onValueChanged: function (e) {
                                 let selectedBranchIds = e.value.length > 0 ? e.value : [0];
                            BindEmployeeDropdownByBranch(selectedBranchIds);
                        }
                    });
                }
            }
        });
    }

    function BindEmployeeDropdownByBranch(selectedBranchIds) {
        const branchParam = (selectedBranchIds?.length > 0) ? selectedBranchIds.join(",") : "0";

        $.ajax({
            type: "GET",
            url: '@(baseDomainUrl + "/api/EmployeeMasterAPI/GetAllEmployeeByBranchId")?BranchIds=' + branchParam,
            success: function (response) {
                const $empDropdown = $("#employeeDropdown");

                if (response?.data?.length > 0) {
                    const employeeData = response.data.map(emp => ({
                        employeeCode: emp.employeeCode, 
                        displayName: `${emp.fullName} - ${emp.employeeCode}`
                    }));

                    $empDropdown.dxTagBox({
                        items: employeeData,
                        displayExpr: "displayName",
                        valueExpr: "employeeCode",
                        placeholder: "--Select Employee--",
                        showSelectionControls: true,
                        searchEnabled: true,
                        showClearButton: true,
                        maxDisplayedTags: 3,
                        applyValueMode: "instantly",
                        multiline: false,
                        minSearchLength: 0,
                        width: "300%",
                        onOpened: function () {
                            $(".dx-overlay-content").css("max-width", "300px");
                        }
                    });

                } else {
                    $empDropdown.dxTagBox({
                        items: [],
                        placeholder: "No Employees Found",
                        searchEnabled: false,
                        showClearButton: true,
                        width: "100%"
                    });
                }
            }
        });
    }   


    $('#btnFetchSalary').on('click', function () {
        const month = $('#month').val();
        const year = $('#year').val();
        const monthIndex = $('#month').prop('selectedIndex'); // Get the zero-based index of the selected month
        const monthStr = (monthIndex + 1).toString().padStart(2, '0'); // Convert to one-based index and pad with zero
        const startDate = `${year}-${monthStr}-01`;
        const lastDay = new Date(year, monthIndex + 1, 0).getDate(); // Increment month index by 1
        const endDate = `${year}-${monthStr}-${lastDay}`;

    const branchIds = $("#branchDropdown").dxTagBox("instance").option("value");
    const employeeIds = $("#employeeDropdown").dxTagBox("instance").option("value");

const empCodes = employeeIds && employeeIds.length > 0
    ? employeeIds.join(",")
    : null;

    const requestData = {
        StartDate: startDate,
        EndDate: endDate,
        EmployeeCodes: empCodes,
        BranchId: branchIds.length > 0 ? branchIds[0] : null, // assuming one branch
        Action: "GetData"
    };

    $.ajax({
        type: "POST",
            url: '@(baseDomainUrl + "/api/MonthlySalaryDetailsAPI/GetMonthlySalary")',
        data: JSON.stringify(requestData),
        contentType: "application/json",
        success: function (response) {
            debugger;
                    console.log("response" ,response);
        if (response && response.data && response.data.length > 0) {
                RenderSalaryGrid(response.data);
            } else {
                Swal.fire("No data found for the selected criteria.", "", "info");
            }
        },
        error: function (xhr) {
            Swal.fire("Error", "Failed to fetch salary data.", "error");
            console.log(xhr);
        }
    });
});


    function RenderSalaryGrid(data) {
             $("#salaryGridContainer").show();
               let exportButtonInstance = null;

    $("#salaryGridContainer").dxDataGrid({
        dataSource: data,
        keyExpr: "employeeId",
        showBorders: true,
        columnAutoWidth: true,
        selection: {
            mode: "multiple",
            showCheckBoxesMode: "always"
        },
        export: {
            enabled: true,
            fileName: "MonthlySalary",
            allowExportSelectedData: true,
            formats: ['xlsx'],
            customizeExcelCell: (options) => {
                if (options.gridCell.rowType === "header") {
                    options.font.bold = true;
                    options.fill = {
                        type: "pattern",
                        pattern: "solid",
                        fgColor: { argb: "FF3E4B6D" }
                    };
                    options.font.color = { argb: "FFFFFFFF" };
                }
            }
        },
        onExporting: function(e) {
            const selectedRowsData = e.component.getSelectedRowsData();

            if (e.exportMode === 'selected' && selectedRowsData.length === 0) {
                e.cancel = true;
                DevExpress.ui.notify({
                    message: "Please select at least one row to export",
                    type: "warning",
                    displayTime: 3000,
                    closeOnClick: true
                });
                return;
            }

            const workbook = new ExcelJS.Workbook();
            const worksheet = workbook.addWorksheet('MonthlySalary');

            const headerRow = worksheet.addRow(
                e.component.getVisibleColumns()
                    .filter(column => column.visible !== false)
                    .map(column => column.caption)
            );

            headerRow.eachCell((cell) => {
                cell.fill = {
                    type: 'pattern',
                    pattern: 'solid',
                    fgColor: { argb: 'FF3E4B6D' }
                };
                cell.font = {
                    color: { argb: 'FFFFFFFF' },
                    bold: true
                };
            });

            const dataToExport = e.exportMode === 'selected' ?
                selectedRowsData :
                e.component.getDataSource().items();

            dataToExport.forEach((row) => {
                const dataRow = [];
                e.component.getVisibleColumns()
                    .filter(column => column.visible !== false)
                    .forEach(column => {
                        dataRow.push(row[column.dataField]);
                    });
                worksheet.addRow(dataRow);
            });

            worksheet.columns.forEach(column => {
                let maxLength = 0;
                column.eachCell({ includeEmpty: true }, cell => {
                    const columnLength = cell.value ? cell.value.toString().length : 0;
                    if (columnLength > maxLength) {
                        maxLength = columnLength;
                    }
                });
                column.width = maxLength < 10 ? 10 : maxLength + 2;
            });

            workbook.xlsx.writeBuffer().then((buffer) => {
                saveAs(
                    new Blob([buffer], { type: 'application/octet-stream' }),
                    'MonthlySalary_' + new Date().toISOString().slice(0, 10) + '.xlsx'
                );
            });

            e.cancel = true;
        },
        onSelectionChanged: function(e) {
            if (exportButtonInstance) {
                exportButtonInstance.option("disabled", e.selectedRowsData.length === 0);
            }
        },
           toolbar: {
        items: [
            "searchPanel",
            {
                location: "after",
                widget: "dxButton",
                options: {
                    icon: "fa fa-file-excel", // Font Awesome Excel icon
                    hint: "Export to Excel",
                    disabled: true,
                    onClick: function () {
                        const grid = $("#salaryGridContainer").dxDataGrid("instance");
                        const selectedRows = grid.getSelectedRowsData();

                        if (selectedRows.length === 0) {
                            DevExpress.ui.notify({
                                message: "Please select at least one row to export",
                                type: "warning",
                                displayTime: 3000,
                                closeOnClick: true
                            });
                            return;
                        }

                        grid.exportToExcel({
                            selectedRowsOnly: true
                        });
                    }
                },
                onInitialized: function (e) {
                    exportButtonInstance = e.component;
                }
            },
            {
                location: "after",
                widget: "dxButton",
                options: {
                    icon: "clear",
                    hint: "Clear Selection",
                    onClick: function () {
                        const grid = $("#salaryGridContainer").dxDataGrid("instance");
                        grid.clearSelection();
                        grid.refresh(); // Ensures header checkbox resets
                    }
                }
            }
        ]
    },

        searchPanel: {
            visible: true,
            width: 240,
            placeholder: "Search..."
        },
        scrolling: {
            mode: "standard",
            useNative: false,
            scrollByContent: true,
            scrollByThumb: true
        },
        columns: [
            { dataField: "employeeId", caption: "Employee ID", visible: false },
            { dataField: "employeeCode", caption: "Code" },
            { dataField: "employeeName", caption: "Name" },
            { dataField: "grossSalary", caption: "Gross Salary" },
            { dataField: "payableDays", caption: "Payable Days" },
            { dataField: "absentDays", caption: "Absent Days" },
            { dataField: "presentDays", caption: "Present Days" },
            { dataField: "weekOff", caption: "Week Off" },
            { dataField: "leave", caption: "Leave" },
            { dataField: "salaryDays", caption: "Salary Days" },
            { dataField: "basicSalary", caption: "Basic Salary", dataType: "number", format: "#,##0" },
            { dataField: "hra", caption: "HRA", dataType: "number", format: "#,##0" },
            { dataField: "conveyanceAllowance", caption: "Conveyance", dataType: "number", format: "#,##0" },
            { dataField: "childEducationAllowance", caption: "Child Edu. Allowance", dataType: "number", format: "#,##0" },
            { dataField: "medicalAllowance", caption: "Medical Allowance", dataType: "number", format: "#,##0" },
            { dataField: "deputationAllowance", caption: "Deputation Allowance", dataType: "number", format: "#,##0" },
            { dataField: "totalGrossSalary", caption: "Total Gross Salary", dataType: "number", format: "#,##0" },
            { dataField: "pf", caption: "PF", dataType: "number", format: "#,##0" },
            { dataField: "esic", caption: "ESIC", dataType: "number", format: "#,##0" },
            { dataField: "professionalTax", caption: "Professional Tax", dataType: "number", format: "#,##0" },
            { dataField: "lwf", caption: "LWF", dataType: "number", format: "#,##0" },
            { dataField: "tds", caption: "TDS", dataType: "number", format: "#,##0" },
            { dataField: "loan", caption: "Loan", dataType: "number", format: "#,##0" },
            { dataField: "totalDeductions", caption: "Total Deductions", dataType: "number", format: "#,##0" },
            { dataField: "netSalary", caption: "Net Salary", dataType: "number", format: "#,##0" }
        ],
        onContentReady: function (e) {
            // Optional: any logic after grid is fully rendered
        }
    });


        $("#salaryActions").show();
    }



    $('#btnProcessSalary').on('click', function () { 
        const selectedMonth = $('#month').val();
        const selectedYear = $('#year').val();
               if (!selectedMonth) {
            Swal.fire("Validation", "Please select a month.", "warning");
            return;
        }

        if (!selectedYear) {
            Swal.fire("Validation", "Please select a year.", "warning");
            return;
        }
        const monthNumber = new Date(Date.parse(selectedMonth + " 1, 2000")).getMonth() + 1;
        const startDate = `${selectedYear}-${monthNumber.toString().padStart(2, '0')}-01`;
        const endDate = new Date(selectedYear, monthNumber, 0).toISOString().slice(0, 10);

        const branchIds = $("#branchDropdown").dxTagBox("instance").option("value");

    const selectedGridRows = $("#salaryGridContainer").dxDataGrid("instance").getSelectedRowsData();
            const empCodes = selectedGridRows.map(emp => emp.employeeCode).join(",");

        if (!empCodes) {
            Swal.fire("Validation", "Please select at least one employee from the grid.", "warning");
            return;
        }

        const requestData = {
            StartDate: startDate,
            EndDate: endDate,
            EmployeeCodes: empCodes,
            BranchId: branchIds[0], // Assuming single branch
            Action: "Insert"
        };

           processSalaryInsert(requestData);
    });



        function processSalaryInsert(payload) {
        $.ajax({
            type: "POST",
            url: '@(baseDomainUrl + "/api/MonthlySalaryDetailsAPI/CreateMonthlySalary")',
            data: JSON.stringify(payload),
            contentType: "application/json",
            success: function (response) {
                if (response.isSuccess) {
                    Swal.fire({
                        title: 'Success',
                        text: response.responseMessage || "Monthly Salary inserted successfully.",
                        icon: 'success',
                        confirmButtonText: 'Go to Salary Details'
                    }).then((result) => {
                        if (result.isConfirmed) {
                                const monthName  = $('#month').val();
                                const month = new Date(Date.parse(monthName + " 1, 2000")).getMonth() + 1;
                            const year = $('#year').val();
                            const selectedRows = $("#salaryGridContainer").dxDataGrid("instance").getSelectedRowsData();
                            const empCodes = selectedRows.map(emp => emp.employeeCode).join(",")||"";
                            const branchId = $("#branchDropdown").dxTagBox("instance").option("value")[0]||0;

                            // ✅ Store filter values in localStorage
                            localStorage.setItem("SalaryMonth", month);
                            localStorage.setItem("SalaryYear", year);
                            localStorage.setItem("SalaryEmpCodes", empCodes);
                            localStorage.setItem("SalaryBranchId", branchId);

                            // ✅ Redirect to home/index
                                window.location.href = '@UIBaseUrl/AdminPanel/SalaryDetails/index';
                        }
                    });
                }
            },
            error: function (xhr) {
                Swal.fire("Error", "Failed to insert salary data.", "error");
                console.log(xhr);
            }
        });
    }



    $("#btnClearSalary").on("click", function () {
             const grid = $("#salaryGridContainer").dxDataGrid("instance");

        // Clear selection
        grid.clearSelection();

        // Force refresh to update header checkbox state
        grid.refresh();
    });

     

</script>

