@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Salary Details";
    Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
    var uri = new Uri(baseUrl);
    string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
    string UIBaseUrl = Configuration["UIBaseUrlSettings:baseUrl"];

}



<title>Search Panel</title>
<!-- jQuery + Bootstrap + SweetAlert -->

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">


<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #f6f6fc;
    }

    .form-section {
        padding: 15px;
        border: 1px solid #ccc;
    }

    .btn-custom {
        background-color: #3e4b6d;
        color: white;
        border: none;
        padding: 4px 12px;
        font-size: 13px;
        font-weight: 600;
        border-radius: 4px;
        transition: none;
        box-shadow: none;
    }

        .btn-custom:hover,
        .btn-custom:focus,
        .btn-custom:active {
            background-color: #3e4b6d;
            color: white;
            outline: none;
            box-shadow: none;
        }

    label.form-label-fixed {
        width: 180px;
        font-size: 13px;
    }

    .search-panel-wrapper {
        max-width: 100%; /* or 1200px if you want fixed width */
        margin: auto;
    }

    .search-panel-container {
        background-color: #3e4b6d; /* Same as button */
        padding: 6px 15px;
        border-radius: 6px;
        margin-bottom: 15px;
    }

    .search-panel-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-heading {
        font-size: 14px;
        color: white; /* Change from #32393f to white */
        margin: 0;
    }

    .btn-add {
        background-color: orange;
        color: white;
        font-size: 14px;
        padding: 6px 15px;
        border: none;
        border-radius: 4px;
    }

    .main-header {
        background-color: #4a5670;
        color: white;
        padding: 8px 20px;
        font-weight: bold;
    }

    .tab-button {
        background-color: #4a5670;
        color: white;
        border: none;
        padding: 8px 16px;
        margin-right: 2px;
    }

        .tab-button.active {
            background-color: #ff9900;
            color: white;
        }

    .section-box {
        border: 1px solid #aaa;
        padding: 15px;
        margin-top: 10px;
    }

    .btn-action {
        background-color: #4a5670;
        color: white;
        padding: 6px 20px;
        border: none;
        margin-right: 10px;
    }

        .btn-action:hover {
            opacity: 0.9;
        }

    .form-label {
        font-weight: 500;
        margin-bottom: 5px;
        font-size: 13px;
    }


</style>


<div class="search-panel-wrapper">
    <div class="search-panel-container">
        <div class="search-panel-row">
            <div class="search-heading">Search Panel</div>
            <a href="/AdminPanel/SalaryDetails/MonthlySalary" class="btn-add">Add</a>
        </div>
    </div>
</div>


<div class="form-section text-center">
    <div class="container">
       <!-- Row 1: Month and Year -->
<div class="row justify-content-center mb-2 gx-2">
    <!-- Month -->
    <div class="col-md-3 d-flex flex-column">
        <div class="d-flex align-items-center">
            <label for="month" class="form-label mb-0 me-2" style="width: 110px; text-align: right;">
                Month<span class="text-danger">*</span>:
            </label>
            <select class="form-select form-select-sm" id="month" style="width: 150px;">
                <option value="">--Select--</option>
                <option value="1">Jan</option>
                <option value="2">Feb</option>
                <option value="3">Mar</option>
                <option value="4">Apr</option>
                <option value="5">May</option>
                <option value="6">Jun</option>
                <option value="7">Jul</option>
                <option value="8">Aug</option>
                <option value="9">Sep</option>
                <option value="10">Oct</option>
                <option value="11">Nov</option>
                <option value="12">Dec</option>
            </select>
        </div>
        <div id="monthError" class="text-danger small mt-1" style="display: none;">Please select a month.</div>
    </div>

    <!-- Year -->
    <div class="col-md-3 d-flex flex-column">
        <div class="d-flex align-items-center">
            <label for="year" class="form-label mb-0 me-2" style="width: 110px; text-align: right;">
                Year<span class="text-danger">*</span>:
            </label>
            <select class="form-select form-select-sm" id="year" style="width: 150px;">
                <option value="">--Select--</option>
            </select>
        </div>
        <div id="yearError" class="text-danger small mt-1" style="display: none;">Please select a year.</div>
    </div>
</div>


        <!-- Row 2: Employee Code and Branch -->
        <div class="row justify-content-center mb-2 gx-2">
            <!-- Employee Code -->
            <div class="col-md-3 d-flex align-items-center">
                <label for="empCode" class="form-label mb-0 me-2" style="width: 110px; text-align: right;">
                    Employee Code:
                </label>
                <input type="text" class="form-control form-control-sm" id="empCode" style="width: 150px;" />
            </div>

            <!-- Branch -->
            <div class="col-md-3 d-flex align-items-center">
                <label for="branch" class="form-label mb-0 me-2" style="width: 110px; text-align: right;">
                    Branch:
                </label>
                <select class="form-select form-select-sm" id="branch" style="width: 150px;">
                    <option value="">--Select--</option>
                </select>
            </div>
        </div>

        <!-- Row 3: Buttons -->
        <div class="row justify-content-center">
            <div class="col-md-auto">
                <button class="btn btn-custom me-2" id="btnGo">Go</button>
                <button class="btn btn-custom me-2" id="btnClear">Clear</button>
                <button onclick="goBack()" class="btn btn-custom">Back</button>
            </div>
        </div>
    </div>
</div>

<!-- Add separator line and spacing before Salary Records -->
<hr style="margin: 0 15px 10px 15px; border-top: 1px solid #ccc;" />

<div class="search-panel-wrapper">
    <div class="search-panel-container">
        <div class="search-panel-row d-flex justify-content-between align-items-center">
            <div class="search-heading">Salary Records</div>
        </div>
    </div>
</div>

<div class="d-flex justify-content-end mb-2" id="actionButtons" style="display: none;">
    <button id="btnDelete" class="btn-custom me-2">Delete</button>
</div>

<div id="salaryGridContainer" style="padding: 15px;"></div>



<div class="modal fade" id="salarySlipModal" tabindex="-1" aria-labelledby="salarySlipLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header bg-secondary text-white">
                <h5 class="modal-title" id="salarySlipLabel">Salary Slip - <span id="modalMonthYear"></span></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body" id="salarySlipContent">
                <!-- Dynamic content loaded via JavaScript -->
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>


<script>
        $(document).ready(function () {
        const savedMonth = localStorage.getItem("SalaryMonth");
        const savedYear = localStorage.getItem("SalaryYear");
        const savedEmpCodes = localStorage.getItem("SalaryEmpCodes");
        const savedBranchId = localStorage.getItem("SalaryBranchId");

        if (savedMonth && savedYear) {
            $('#month').val(savedMonth);
            $('#year').val(savedYear);
            $('#empCode').val(savedEmpCodes);
            $('#branch').val(savedBranchId);

            // Delay to ensure UI is ready
            setTimeout(() => { 
                fetchAndBindSalaryData(savedMonth, savedYear, savedEmpCodes, savedBranchId);
            }, 300);
        }

        // Optional: Clear localStorage after use
        localStorage.removeItem("SalaryMonth");
        localStorage.removeItem("SalaryYear");
        localStorage.removeItem("SalaryEmpCodes");
        localStorage.removeItem("SalaryBranchId");

        BindBranchDropdown();
        populateYearDropdown();
           $("#btnDelete").hide();
           $("#actionButtons").hide();
              $('#monthError').hide();
    $('#yearError').hide();

    });


          function BindBranchDropdown() {
        $.ajax({
            type: "GET",
            url: '@(baseDomainUrl + "/api/BranchAPI/GetAllBranch")',
            success: function (response) {
                if (response?.data?.length > 0) {
                    let $branch = $('#branch');
                    $branch.empty();
                    $branch.append('<option value="">--Select--</option>');
                    $.each(response.data, function (i, item) {
                        $branch.append('<option value="' + item.branchId + '">' + item.branchName + '</option>');
                    });
                }
            },
            error: function () {
                console.log("Failed to load branches.");
            }
        });
    }

        function goBack() {
      window.location.href = '@UIBaseUrl/AdminPanel/Home/index';
    }


        function populateYearDropdown() {
        var startYear = 2024;
        var currentYear = new Date().getFullYear();
        var yearDropdown = document.getElementById("year");

        yearDropdown.innerHTML = ""; // clear existing

        var defaultOption = document.createElement("option");
        defaultOption.value = "";
        defaultOption.text = "--Select--";
        yearDropdown.appendChild(defaultOption);

        for (var year = currentYear; year >= startYear; year--) {
            var option = document.createElement("option");
            option.value = year;
            option.text = year;
            yearDropdown.appendChild(option);
        }

        yearDropdown.value = "";
    }


    $('#btnGo').on('click', function () {
        const month = $('#month').val();
        const year = $('#year').val();
        const empCode = $('#empCode').val();
        const branch = $('#branch').val();

            let isValid = true;
   

        // Month validation
        if (!month) {
            $('#monthError').show();
            isValid = false;
        } else {
            $('#monthError').hide();
        }

        // Year validation
        if (!year) {
            $('#yearError').show();
            isValid = false;
        } else {
            $('#yearError').hide();
        }
        fetchAndBindSalaryData(month, year, empCode, branch);

    });


    function fetchAndBindSalaryData(month, year, empCode, branch) {
        if (!month || !year) {
            Swal.fire("Validation", "Please select both Month and Year.", "warning");
            return;
        }

        const requestData = {
            Month: parseInt(month),
            Year: parseInt(year),
            EmployeeCodes: empCode && empCode !== "" ? empCode : null,
            BranchId: branch && branch !== "" ? parseInt(branch) : null
        };

        $.ajax({
            url: '@(baseDomainUrl + "/api/MonthlySalaryDetailsAPI/GetAll")',
            type: "POST",
            data: JSON.stringify(requestData),
            contentType: "application/json",
            success: function (response) {
                if (response.isSuccess) { 
                     $("#btnDelete").show();
                $("#actionButtons").show();
                    $("#salaryGridContainer").dxDataGrid({
                        dataSource: response.data,
                        keyExpr: "employeeCode",
                        showBorders: true,
                              columnAutoWidth: true,
                 selection: {
                mode: "multiple", // Enables multiple row selection
                showCheckBoxesMode: "always" // Always show checkboxes
            },
                        paging: { pageSize: 10 },
                        columns: [
                            { dataField: "id", caption: "ID", visible: false },
                            { dataField: "employeeCode", caption: "Employee Code" },
                            { dataField: "employeeName", caption: "Name" },
                            { dataField: "branchName", caption: "Branch" },
                            // { dataField: "monthName", caption: "Month" },
                            // { dataField: "year", caption: "Year" },
                            { dataField: "grossSalary", caption: "Gross Salary" },
                            { dataField: "netSalary", caption: "Net Salary" },
                            { dataField: "presentDays", caption: "Present Days" },
                            { dataField: "absentDays", caption: "Absent Days" },
                            { dataField: "salaryDays", caption: "Salary Days" },
                            { dataField: "totalDeductions", caption: "Deductions" },
                            { dataField: "createdDate", caption: "Created", dataType: "date" },
      {
        caption: "View",
        cellTemplate: function (container, options) {
            $("<i>")
              .addClass("fas fa-magnifying-glass") 
                .css({
                    cursor: "pointer",
                    color: "#007bff", // optional: blue color
                    fontSize: "18px",
                    padding: "5px"
                })
                .attr("title", "View Salary Slip")
                .on('click', function () {
                    showSalarySlipModal(options.data); // call your function
                })
                .appendTo(container);
        }
    }
                        ]
                    });
      
                } else {
                       $("#btnDeleteSalary").hide();
                $("#actionButtons").hide();
                    Swal.fire("Error", response.responseMessage, "error");
                }
            },
            error: function () {
                Swal.fire("Error", "An error occurred while fetching salary records.", "error");
            }
        });
    }


        $('#btnDelete').on('click', function () {
    deleteSalaryDetails();
    });

        function deleteSalaryDetails() {
            debugger;
        // Get selected rows from the DevExtreme grid
        const grid = $("#salaryGridContainer").dxDataGrid("instance");
        const selectedRows = grid.getSelectedRowsData();

        if (selectedRows.length === 0) {
            alert("Please select at least one row to delete.");
            return;
        }

        // Ask for browser confirmation
        const isConfirmed = confirm("Are you sure you want to delete the selected salary record(s)?");

        if (!isConfirmed) return;

        // Collect IDs of selected rows
        const deleteIds = selectedRows.map(row => row.id);

        // Prepare delete object
        const deleteObj = {
            id: deleteIds,
            deletedBy: null // Optional: pass logged-in user ID
        };

        // Call DELETE API
        $.ajax({
            url: '@baseUrl/MonthlySalaryDetailsAPI/DeleteSalaryDetails',
            type: 'DELETE',
            contentType: 'application/json',
            data: JSON.stringify(deleteObj),
            success: function (response) {
                debugger;
                if (response.isSuccess) {
                    round_success_noti(response.responseMessage || "Deleted successfully.");         
                    grid.clearSelection();
                    const month = $('#month').val();
                    const year = $('#year').val();
                    const empCode = $('#empCode').val();
                    const branch = $('#branch').val();
                    fetchAndBindSalaryData(month, year, empCode, branch);
                } else {
                    round_success_noti(response.responseMessage || "Deleted successfully.");
                }
            },
            error: function () {
                    round_success_noti(response.responseMessage || "Deleted successfully.");
            }
        });
    }



    function showSalarySlipModal(data) {
        $('#modalMonthYear').text(`${data.monthName} ${data.year}`);

        const earnings = [
            { name: "Basic Salary", monthly: data.basicSalaryMonthly, actual: data.basicSalary },
            { name: "HRA", monthly: data.hraMonthly, actual: data.hra },
            { name: "Conveyance", monthly: data.conveyanceMonthly, actual: data.conveyanceAllowance },
            { name: "Child Education", monthly: data.childEducationMonthly, actual: data.childEducationAllowance },
            { name: "Medical", monthly: data.medicalMonthly, actual: data.medicalAllowance },
            { name: "Deputation Allowance (AMT)", monthly: data.deputationMonthly, actual: data.deputationAllowance }
        ].filter(e => e.actual > 0);

        const deductions = [
            { name: "PF", monthly: data.pfMonthly, actual: data.pf },
            { name: "ESIC", monthly: data.esicMonthly, actual: data.esic },
            { name: "Professional Tax", monthly: data.professionalTaxMonthly, actual: data.professionalTax },
            { name: "Group Medical", monthly: data.groupMedicalMonthly, actual: data.groupMedical },
            { name: "Term Insurance", monthly: data.termInsuranceMonthly, actual: data.termInsurance },
            { name: "LWF", monthly: data.lwfMonthly, actual: data.lwf },
            { name: "TDS", monthly: data.tdsMonthly, actual: data.tds }
        ].filter(d => d.actual > 0);

        const headerInfo = `
            <div class="row mb-2">
                <div class="col-6"><strong>Employee Name:</strong> ${data.employeeCode} - ${data.employeeName}</div>
                <div class="col-6"><strong>Present Days:</strong> ${data.presentDays} &nbsp; &nbsp; <strong>Week off:</strong> ${data.weekOff}</div>
            </div>
            <div class="row mb-2">
                <div class="col-6"><strong>Month Days:</strong> ${data.monthDays} &nbsp; &nbsp; <strong>Holiday:</strong> ${data.holiday} &nbsp; &nbsp; <strong>Absent Days:</strong> ${data.absentDays}</div>
                <div class="col-6"><strong>On Duty/Tour:</strong> ${data.onDuty} &nbsp; &nbsp; <strong>Paid Leave Days:</strong> ${data.paidLeaveDays} &nbsp; &nbsp; <strong>Late Days:</strong> ${data.lateDays}</div>
            </div>
            <div class="row mb-3">
                <div class="col-6"></div>
                <div class="col-6"><strong>Salary Days:</strong> ${data.salaryDays}</div>
            </div>
        `;

        const tableHeader = `
            <thead class="table-light">
                <tr>
                    <th style="width: 40%">Component</th>
                    <th class="text-end">Monthly Amount</th>
                    <th class="text-end">Amount</th>
                </tr>
            </thead>
        `;

        const earningsRows = earnings.map(e => `
            <tr>
                <td>${e.name}</td>
                <td class="text-end">${e.monthly?.toFixed(2) || '0.00'}</td>
                <td class="text-end">${e.actual.toFixed(2)}</td>
            </tr>
        `).join('');

        const deductionsRows = deductions.map(d => `
            <tr>
                <td>${d.name}</td>
                <td class="text-end">${d.monthly?.toFixed(2) || '0.00'}</td>
                <td class="text-end">${d.actual.toFixed(2)}</td>
            </tr>
        `).join('');

        const totalRow = `
            <tr class="fw-bold">
                <td>Gross Salary</td>
                <td class="text-end">${data.grossMonthly?.toFixed(2) || '0.00'}</td>
                <td class="text-end">${data.grossSalary.toFixed(2)}</td>
            </tr>
        `;

        const deductionTotalRow = `
            <tr class="fw-bold">
                <td>Total Deduction</td>
                <td class="text-end">${data.totalDeductionsMonthly?.toFixed(2) || '0.00'}</td>
                <td class="text-end">${data.totalDeductions.toFixed(2)}</td>
            </tr>
        `;

        const content = `
            ${headerInfo}

            <div class="table-responsive mb-4">
                <table class="table table-bordered table-sm mb-0">
                    ${tableHeader}
                    <tbody>
                        ${earningsRows}
                        ${totalRow}
                    </tbody>
                </table>
            </div>

            <div class="table-responsive mb-4">
                <table class="table table-bordered table-sm mb-0">
                    ${tableHeader.replace('Component', 'Deduction Component')}
                    <tbody>
                        ${deductionsRows}
                        ${deductionTotalRow}
                    </tbody>
                </table>
            </div>

            <h5 class="text-end text-success">Net Salary : ${data.netSalary.toFixed(2)}</h5>
        `;

        $('#salarySlipContent').html(content);
        const modal = new bootstrap.Modal(document.getElementById('salarySlipModal'));
        modal.show();
    }


      $('#btnClear').on('click', function () {
        $('#month').val('');
        $('#year').val('');
        $('#empCode').val('');
        $('#branch').val('');

        const gridInstance = $('#salaryGridContainer').dxDataGrid("instance");
        if (gridInstance) {
            gridInstance.dispose();
            $('#salaryGridContainer').empty();
        }

       $('#btnDelete').hide();
        $('#actionButtons').hide();
        $('#monthError').hide();
    $('#yearError').hide();


        // ✅ Reset year dropdown
        populateYearDropdown();
    });




</script>
