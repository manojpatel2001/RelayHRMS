@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Salary Details";
    Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
    var uri = new Uri(baseUrl);
    string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
    string UIBaseUrl = Configuration["UIBaseUrlSettings:baseUrl"];
}

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.0/css/all.min.css">

    <style>
      


        .form-section {
            padding: 15px;
            border: 1px solid #ccc;
            background-color: white;
            border-radius: 5px;
        }

        .btn-custom {
            background-color: #3e4b6d;
            color: white;
            border: none;
            padding: 4px 12px;
            font-size: 13px;
            font-weight: 600;
            border-radius: 4px;
        }

        .btn-custom {
            background-color: #3e4b6d !important;
            color: white !important;
            border: none !important;
            padding: 4px 12px !important;
            font-size: 13px !important;
            font-weight: 600 !important;
            border-radius: 4px !important;
            transition: none !important;
            box-shadow: none !important;
        }

            .btn-custom:hover,
            .btn-custom:focus,
            .btn-custom:active {
                background-color: #3e4b6d !important;
                color: white !important;
                outline: none !important;
                box-shadow: none !important;
            }

        /* For the orange Add button */
        .btn-add {
            background-color: orange !important;
            color: white !important;
        }

        .search-panel-container {
            background-color: #3e4b6d;
            padding: 6px 15px;
            border-radius: 6px;
            margin-bottom: 15px;
            color: white;
        }

        .btn-add {
            background-color: orange;
            color: white;
            font-size: 14px;
            padding: 6px 15px;
            border: none;
            border-radius: 4px;
        }

        /* Responsive styles */
        .form-label-fixed {
            width: 110px;
            text-align: right;
            margin-right: 10px;
            font-size: 13px;
        }

        .form-control-fixed {
            width: 150px;
        }

        @@media (max-width: 768px) {
            .form-row-responsive {
                flex-wrap: wrap;
            }

            .form-col-responsive {
                margin-bottom: 10px;
                display: flex;
                align-items: center;
                width: 100%;
            }

            .form-label-fixed {
                width: 110px !important;
                text-align: right !important;
            }

            .form-control-fixed {
                width: calc(100% - 120px) !important;
                min-width: 150px;
            }

            .error-message {
                padding-left: 120px;
                width: 100%;
            }
        }

        #branch {
            font-size: 13px !important;
        }

        .form-select-sm.form-control-fixed {
            font-size: 13px !important;
        }
        @@media (max-width: 480px) {
            .form-label-fixed {
                width: 100% !important;
                text-align: left !important;
            }

            .form-control-fixed {
                width: 100% !important;
            }

            .error-message {
                padding-left: 0 !important;
            }
        }

    #salaryGridContainer {
        max-height: 200px;
       
    }

    </style>

    <div class="container-fluid py-3">
        <!-- Search Panel Header -->
        <div class="search-panel-container">
            <div class="d-flex justify-content-between align-items-center">
                <div class="search-heading">Search Panel</div>
                <a href="/AdminPanel/SalaryDetails/MonthlySalary" class="btn-add">Add</a>
            </div>
        </div>

        <!-- Search Form -->
        <div class="form-section">
            <!-- Month and Year Row -->
            <div class="row justify-content-center mb-3">
                <!-- Month -->
                <div class="col-md-3 col-12 mb-2">
                    <div class="d-flex align-items-center">
                        <label for="month" class="form-label-fixed">Month<span class="text-danger">*</span>:</label>
                        <select class="form-select form-select-sm form-control-fixed" id="month" style="font-size: 13px;">
                            <option value="">--Select--</option>
                            <option value="1">January</option>
                            <option value="2">February</option>
                            <option value="3">March</option>
                            <option value="4">April</option>
                            <option value="5">May</option>
                            <option value="6">June</option>
                            <option value="7">July</option>
                            <option value="8">August</option>
                            <option value="9">September</option>
                            <option value="10">October</option>
                            <option value="11">November</option>
                            <option value="12">December</option>
                        </select>
                    </div>
                    <div id="monthError" class="text-danger small mt-1 ps-3" style="display: none;">Please select a month.</div>
                </div>

                <!-- Year -->
                <div class="col-md-3 col-12 mb-2">
                    <div class="d-flex align-items-center">
                        <label for="year" class="form-label-fixed">Year<span class="text-danger">*</span>:</label>
                        <select class="form-select form-select-sm form-control-fixed" id="year">
                            <option value="">--Select--</option>
                        </select>
                    </div>
                    <div id="yearError" class="text-danger small mt-1 ps-3" style="display: none;">Please select a year.</div>
                </div>
            </div>

            <!-- Employee Code and Branch Row -->
            <div class="row justify-content-center mb-3">
                <!-- Employee Code -->
                <div class="col-md-3 col-12 mb-2">
                    <div class="d-flex align-items-center">
                        <label for="empCode" class="form-label-fixed">Employee Code:</label>
                        <input type="text" class="form-control form-control-sm form-control-fixed" id="empCode">
                    </div>
                </div>

                <!-- Branch -->
                <div class="col-md-3 col-12 mb-2">
                    <div class="d-flex align-items-center">
                        <label for="branch" class="form-label-fixed">Branch:</label>
                        <select class="form-select form-select-sm form-control-fixed" id="branch">
                            <option value="">--Select--</option>
                        </select>
                    </div>
                </div>
            </div>

            <!-- Buttons Row -->
            <div class="row justify-content-center">
                <div class="col-auto">
                    <button class="btn btn-custom me-2" id="btnGo">Go</button>
                    <button class="btn btn-custom me-2" id="btnClear">Clear</button>
                    <button onclick="goBack()" class="btn btn-custom">Back</button>
                </div>
            </div>
        </div>

        <!-- Salary Records Section -->
        <hr class="my-3">
        <div class="search-panel-container">
            <div class="d-flex justify-content-between align-items-center">
                <div class="search-heading">Salary Records</div>
            </div>
        </div>

        <div class="d-flex justify-content-end mb-2" id="actionButtons" style="display: none;">
            <button id="btnDelete" class="btn-custom me-2">Delete</button>
        </div>

        <div id="salaryGridContainer" class="bg-white p-3 rounded"></div>
    </div>

    <!-- Salary Slip Modal -->
    <div class="modal fade" id="salarySlipModal" tabindex="-1" aria-labelledby="salarySlipLabel" aria-hidden="true">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header bg-secondary text-white">
                    <h5 class="modal-title" id="salarySlipLabel">Salary Slip - <span id="modalMonthYear"></span></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                </div>
                <div class="modal-body" id="salarySlipContent"></div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-light" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

<script>


               const savedCompany = localStorage.getItem('selectedCompany');
               var companyDetails = JSON.parse(savedCompany);
               const CompanyId=companyDetails.CompanyId;
               const EmployeeId=localStorage.getItem('EmployeeId');
               const Token=localStorage.getItem("authToken");

     $(document).ready( async function () {
           const savedMonth = localStorage.getItem("SalaryMonth") ;
            const savedYear = localStorage.getItem("SalaryYear") ;
            const savedEmpCodes = localStorage.getItem("SalaryEmpCodes") || "";
            const savedBranchId = localStorage.getItem("SalaryBranchId") || 0;
            BindBranchDropdown();
        await populateYearDropdown();
       
        if (savedMonth && savedYear) {
            $('#month').val(savedMonth);
            $('#year').val(savedYear);
            $('#empCode').val(savedEmpCodes);
            $('#branch').val(savedBranchId);
        
            // Delay to ensure UI is ready
            setTimeout(() => { 
                fetchAndBindSalaryData(savedMonth, savedYear, savedEmpCodes, savedBranchId);
            }, 300);
        }

        // Optional: Clear localStorage after use
        localStorage.removeItem("SalaryMonth");
        localStorage.removeItem("SalaryYear");
        localStorage.removeItem("SalaryEmpCodes");
        localStorage.removeItem("SalaryBranchId");

        
           $("#btnDelete").hide();
           $("#actionButtons").hide();
              $('#monthError').hide();
    $('#yearError').hide();

    });


          function BindBranchDropdown() {
        $.ajax({
             url: '@baseUrl/BranchAPI/GetAllBranchesListByCompanyId/'+CompanyId,
                    method: 'GET',
                        headers: {
                                'Authorization': 'Bearer ' + Token
                            },
            success: function (response) {
                if (response?.data?.length > 0) {
                    let $branch = $('#branch');
                    $branch.empty();
                    $branch.append('<option value="">Select</option>');
                    $.each(response.data, function (i, item) {
                        $branch.append('<option value="' + item.branchId + '">' + item.branchName + '</option>');
                    });
                           $branch.css('font-size', '13px');
                    }
            },
            error: function () {
                console.log("Failed to load branches.");
            }
        });
    }

        function goBack() {
      window.location.href = '@UIBaseUrl/AdminPanel/Home/index';
    }

     async function populateYearDropdown() {
        try {
            const startYear = 2024;
            const currentYear = new Date().getFullYear();
            const yearDropdown = document.getElementById("year");

            yearDropdown.innerHTML = ""; // Clear existing options
            yearDropdown.style.fontSize = "13px"; // Apply small font size

            const defaultOption = document.createElement("option");
            defaultOption.value = "";
            defaultOption.text = "--Select--";
            yearDropdown.appendChild(defaultOption);

            for (let year = startYear; year <= currentYear; year++) {
                const option = document.createElement("option");
                option.value = year;
                option.text = year;
                yearDropdown.appendChild(option);
            }

            yearDropdown.value = ""; // Reset selection

            return "Year dropdown populated successfully";
        } catch (error) {
            throw new Error("Failed to populate year dropdown: " + error.message);
        }
    }


        $('#empCode,#month,#branch,#year').focus(()=>{
            $('#btnGo').prop("disabled",false);
        })

    $('#btnGo').on('click', function () {
        $('#btnGo').prop("disabled",true);
        const month = $('#month').val();
    const year = $('#year').val();
    const empCode = $('#empCode').val();
    const branch = $('#branch').val();

    let isValid = true;

    if (!month) {
        $('#monthError').show();
        isValid = false;
    } else {
        $('#monthError').hide();
    }

    if (!year) {
        $('#yearError').show();
        isValid = false;
    } else {
        $('#yearError').hide();
    }

    if (!isValid) {
          $('#btnGo').prop("disabled",false);
        return;
    }

     fetchAndBindSalaryData(month, year, empCode, branch);

    });


    function fetchAndBindSalaryData(month, year, empCode, branch) {
        if (!month || !year) {
            Swal.fire("Validation", "Please select both Month and Year.", "warning");
            return;
        }
        debugger
        const requestData = {
            Month: parseInt(month),
            Year: parseInt(year),
            EmployeeCodes:  empCode === "" ?'': empCode ,
            BranchId: branch === "" ? 0:parseInt(branch) 
        };

        $.ajax({
            url: '@(baseDomainUrl + "/api/MonthlySalaryDetailsAPI/GetAll")',
            type: "POST",
            data: JSON.stringify(requestData),
            contentType: "application/json",
            success: function (response) {
               
                if (response.isSuccess) { 
                     $("#btnDelete").show();
                $("#actionButtons").show();
                           $("#salaryGridContainer").dxDataGrid({
                dataSource: response.data,
                keyExpr: "employeeCode",
                showBorders: true,
                columnAutoWidth: true,
                selection: {
                    mode: "multiple",
                    showCheckBoxesMode: "always"
                },
                paging: {
                    enabled: false // Disable paging to allow scrolling
                },
                scrolling: {
                    mode: "virtual" // Enables smooth scrolling
                },
                columns: [
                    { dataField: "id", caption: "ID", visible: false },
                    { dataField: "employeeCode", caption: "Employee Code" },
                    { dataField: "employeeName", caption: "Name" },
                    { dataField: "branchName", caption: "Branch" },
                    { dataField: "grossSalary", caption: "Gross Salary" },
                    { dataField: "netSalary", caption: "Net Salary" },
                    { dataField: "presentDays", caption: "Present Days" },
                    { dataField: "absentDays", caption: "Absent Days" },
                    { dataField: "salaryDays", caption: "Salary Days" },
                    { dataField: "totalDeductions", caption: "Deductions" },
                    { dataField: "createdDate", caption: "Created", dataType: "date" },
                    {
                        caption: "View",
                        cellTemplate: function (container, options) {
                            $("<i>")
                                .addClass("fas fa-magnifying-glass")
                                .css({
                                    cursor: "pointer",
                                    color: "#007bff",
                                    fontSize: "18px",
                                    padding: "5px"
                                })
                                .attr("title", "View Salary Slip")
                                .on('click', function () {
                                    showSalarySlipModal(options.data);
                                })
                                .appendTo(container);
                        }
                    }
                ],
            });


      
                } else {
                    $('#btnGo').prop("disabled",false);
                       $("#btnDeleteSalary").hide();
                             $("#actionButtons").hide();
                    Swal.fire("Error", response.responseMessage, "error");
                }
            },
            error: function () {
                Swal.fire("Error", "An error occurred while fetching salary records.", "error");
            }
        });
    }


        $('#btnDelete').on('click', function () {
    deleteSalaryDetails();
    });

        function deleteSalaryDetails() {
            debugger;
        // Get selected rows from the DevExtreme grid
        const grid = $("#salaryGridContainer").dxDataGrid("instance");
        const selectedRows = grid.getSelectedRowsData();

        if (selectedRows.length === 0) {
            alert("Please select at least one row to delete.");
            return;
        }

        // Ask for browser confirmation
        const isConfirmed = confirm("Are you sure you want to delete the selected salary record(s)?");

        if (!isConfirmed) return;

        // Collect IDs of selected rows
        const deleteIds = selectedRows.map(row => row.id);

        // Prepare delete object
        const deleteObj = {
            id: deleteIds,
            deletedBy: null // Optional: pass logged-in user ID
        };

        // Call DELETE API
        $.ajax({
            url: '@baseUrl/MonthlySalaryDetailsAPI/DeleteSalaryDetails',
            type: 'DELETE',
            contentType: 'application/json',
            data: JSON.stringify(deleteObj),
            success: function (response) {
                if (response.isSuccess) {
                    round_success_noti(response.responseMessage || "Deleted successfully.");         
                    grid.clearSelection();
                    const month = $('#month').val();
                    const year = $('#year').val();
                    const empCode = $('#empCode').val();
                    const branch = $('#branch').val();
                    fetchAndBindSalaryData(month, year, empCode, branch);
                } else {
                    round_success_noti(response.responseMessage || "Deleted successfully.");
                }
            },
            error: function () {
                    round_success_noti(response.responseMessage || "Deleted successfully.");
            }
        });
    }


      function showSalarySlipModal(data) {
        $('#modalMonthYear').text(`${data.monthName} ${data.year}`);

        // Handle undefined values
 

        const earnings = [
            { name: "Basic Salary", actual: data.basicSalary },
            { name: "HRA", actual: data.hra },
            { name: "Conveyance", actual: data.conveyanceAllowance },
            { name: "Child Education", actual: data.childEducationAllowance },
            { name: "Medical", actual: data.medicalAllowance },
            { name: "Deputation Allowance", actual: data.deputationAllowance }
        ].filter(e => e.actual > 0);

        const deductions = [
            { name: "PF", actual: data.pf },
            { name: "ESIC", actual: data.esic },
            { name: "Professional Tax", actual: data.professionalTax },
            { name: "Group Medical", actual: data.groupMedical },
            { name: "Term Insurance", actual: data.termInsurance },
            { name: "LWF", actual: data.lwf },
            { name: "TDS", actual: data.tds }
        ].filter(d => d.actual > 0);

        // Compact header info
        const headerInfo = `
            <div class="row mb-1" style="font-size: 12px;">
                <div class="col-md-6 p-1"><strong>Employee:</strong> ${data.employeeCode} - ${data.employeeName}</div>
                <div class="col-md-6 p-1"><strong>Present:</strong> ${data.presentDays} | <strong>Week off:</strong> ${data.weekOff}</div>
            </div>
            <div class="row mb-1" style="font-size: 12px;">
                <div class="col-md-6 p-1"><strong>Month Days:</strong> ${data.monthDays} | <strong>Holiday:</strong> ${data.holiday}</div>
                <div class="col-md-6 p-1"><strong>Absent:</strong> ${data.absentDays} | <strong>Salary Days:</strong> ${data.salaryDays}</div>
            </div>       
        `;

        // CSS for compact design
        const compactCSS = `
            <style>
                .compact-modal {
                    max-width: 650px !important;
                    margin: 0.5rem auto;
                }
                .compact-table {
                    margin-bottom: 5px !important;
                    font-size: 12px !important;
                }
                .compact-table thead th {
                    background-color: #f5f5f5 !important;
                    padding: 4px 6px !important;
                }
                .compact-table tbody td {
                    padding: 3px 6px !important;
                }
                .compact-table .table-light {
                    background-color: #f5f5f5 !important;
                }
                .compact-row {
                    margin: 0 -3px !important;
                }
                .compact-col {
                    padding: 0 3px !important;
                }
            </style>
        `;

        // Earnings table
        const earningsTable = `
            <div class="col-md-6 compact-col">
                <table class="table table-bordered compact-table">
                    <thead>
                        <tr>
                            <th colspan="2" class="text-center">Earnings</th>
                        </tr>
                        <tr class="table-light">
                            <th style="width: 70%">Component</th>
                            <th class="text-end">Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${earnings.map(e => `
                            <tr>
                                <td>${e.name}</td>
                                <td class="text-end">₹${e.actual.toFixed(2)}</td>
                            </tr>
                        `).join('')}
                        <tr class="fw-bold">
                            <td>Total Earnings</td>
                            <td class="text-end">₹${data.grossSalary.toFixed(2)}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        `;

        // Deductions table
        const deductionsTable = `
            <div class="col-md-6 compact-col">
                <table class="table table-bordered compact-table">
                    <thead>
                        <tr>
                            <th colspan="2" class="text-center">Deductions</th>
                        </tr>
                        <tr class="table-light">
                            <th style="width: 70%">Component</th>
                            <th class="text-end">Amount</th>
                        </tr>
                    </thead>
                    <tbody>
                        ${deductions.map(d => `
                            <tr>
                                <td>${d.name}</td>
                                <td class="text-end">₹${d.actual.toFixed(2)}</td>
                            </tr>
                        `).join('')}
                        <tr class="fw-bold">
                            <td>Total Deductions</td>
                            <td class="text-end">₹${data.totalDeductions.toFixed(2)}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        `;

        const content = `
            ${compactCSS}
            ${headerInfo}
            <div class="row compact-row">
                ${earningsTable}
                ${deductionsTable}
            </div>
            <div class="row mt-1">
                <div class="col-md-12 text-end">
                    <h6 class="text-success mb-0" style="font-size: 13px;">Net Salary: ₹${data.netSalary.toFixed(2)}</h6>
                </div>
            </div>
        `;

        // Apply compact modal size
             $('#salarySlipModal .modal-dialog').removeClass('modal-xl').addClass('modal-lg');
        $('#salarySlipContent').html(content);

        const modal = new bootstrap.Modal(document.getElementById('salarySlipModal'));
        modal.show();
    }

    $('#btnClear').on('click', function () {
       $('#month').val('');
    $('#year').val('');
    $('#empCode').val('');
    $('#branch').val('');

    // Hide error messages
    $('#monthError').hide();
    $('#yearError').hide();

    // Clear the DataGrid
    const gridInstance = $("#salaryGridContainer").dxDataGrid("instance");
    if (gridInstance) {
        gridInstance.dispose();
        $("#salaryGridContainer").empty();
    }

    // Hide buttons
    $("#btnDelete").hide();
    $("#actionButtons").hide();

    // Rebind year dropdown
    populateYearDropdown();
    });




</script>
