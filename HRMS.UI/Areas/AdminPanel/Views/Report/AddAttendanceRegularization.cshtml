@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Add Attendance Regularization";
    Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
    var uri = new Uri(baseUrl);
    string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
}

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<style>
    body {
        background-color: #ffffff !important;
    }

    .section-header {
        background-color: #3e4b6d;
        color: #fff;
        font-weight: bold;
        padding: 10px 20px;
        border-top-left-radius: 6px;
        border-top-right-radius: 6px;
        margin: 0 auto;
        max-width: 1200px;
        font-size: 18px;
    }

    .form-section {
        max-width: 1200px;
        margin: 0 auto;
        margin-top: 0;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 6px;
        background-color: #fff;
    }

    .form-label {
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 5px;
    }

    .form-control,
    .form-select {
        font-size: 13px;
        padding: 4px 10px;
        height: 32px;
        width: 240px;
        max-width: 100%;
    }

    .row.gutter-tight > [class*='col-'] {
        padding-left: 10px;
        padding-right: 10px;
        margin-bottom: 14px;
        display: flex;
        flex-direction: column;
        align-items: flex-start;
    }

    .btn-custom {
        font-size: 13px;
        padding: 6px 16px;
        min-width: 70px;
        background-color: #3e4b6d;
        color: white;
        border: none;
        border-radius: 4px;
    }

        .btn-custom:hover {
            background-color: #2c3752;
        }

    .back-btn {
        float: right;
        margin-top: 20px;
        margin-right: 40px;
    }

    .dx-editor-cell .dx-link.dx-link-cancel {
        display: none !important;
    }

    .flatpickr-time {
        font-size: 12px !important;
    }

        .flatpickr-time input {
            height: 24px !important;
            font-size: 12px !important;
        }
</style>

<div class="section-header">
    EMPLOYEE ATTENDANCE REGULARIZATION REQUEST
</div>

<div class="form-section">
    <div class="container mt-3">
        <div class="row gutter-tight justify-content-center">
            <div class="col-md-auto">
                <label class="form-label">Branch :</label>
                <select class="form-select form-select-sm" id="branch" style="width: 160px;"></select>
            </div>
            <div class="col-md-auto">
                <label class="form-label">Month :</label>
                <select class="form-select" id="month">
                    <option>January</option>
                    <option>February</option>
                    <option>March</option>
                    <option>April</option>
                    <option>May</option>
                    <option>June</option>
                    <option>July</option>
                    <option>August</option>
                    <option>September</option>
                    <option>October</option>
                    <option>November</option>
                    <option>December</option>
                </select>
            </div>
            <div class="col-md-auto">
                <label class="form-label">Year :</label>
                <select class="form-select" id="year"></select>
            </div>
        </div>

        <div class="row gutter-tight justify-content-center">
            <div class="col-md-auto">
                <label class="form-label">Record Type :</label>
                <select class="form-select" id="recordtype">
                    <option selected>Regularize</option>
                    <option selected>All</option>
                    <option selected>Present</option>
                    <option selected>Absent</option>
                </select>
            </div>
            <div class="col-md-auto">
                <label class="form-label">Employee Code/Name :</label>
                <input type="text" class="form-control" placeholder="Employee Code or Name" />
            </div>
            <div class="col-md-auto">
                <label class="form-label">Employee <span class="text-danger">*</span> :</label>
                <select class="form-select" id="employeeDropdown">
                    <option value="">--Select Employee--</option>
                </select>
            </div>
        </div>

        <div class="action-buttons d-flex justify-content-center gap-3">
            <button class="btn btn-custom">Go</button>
            <button class="btn btn-custom">Clear</button>
        </div>
    </div>
</div>

<!-- ✅ Save + Grid Section -->
<div class="form-section" style="margin-top: 30px;">
    <div class="d-flex justify-content-between align-items-center mb-3 flex-wrap">
        <h6 class="mb-0">Attendance Details</h6>
        <button class="btn btn-custom mt-2 mt-md-0" id="btnSaveGridData" style="min-width: 90px;">Save</button>
    </div>
    <div id="attendanceGrid" style="overflow-x: auto;"></div>
</div>

<!-- 🔙 Back button -->
<div class="back-btn">
    <button class="btn btn-custom">Back</button>
</div>

<script>
    $(document).ready(function () {
        BindBranchDropdown();
        populateYearDropdown();

        $('#branch').on('change', function () {
            let branchId = $(this).val();
            if (branchId) {
                GetEmployeeByBranchId(branchId);
            } else {
                $('#employeeDropdown').empty().append('<option value="">--Select Employee--</option>');
            }
        });
    });

    function BindBranchDropdown() {
        $.ajax({
            type: "GET",
            url: '@(baseDomainUrl + "/api/BranchAPI/GetAllBranch")',
            success: function (response) {
                if (response?.data?.length > 0) {
                    let $branch = $('#branch');
                    $branch.empty().append('<option value="">--Select--</option>');
                    $.each(response.data, function (i, item) {
                        $branch.append('<option value="' + item.branchId + '">' + item.branchName + '</option>');
                    });
                }
            }
        });
    }

    function populateYearDropdown() {
        const startYear = 2024;
        const currentYear = new Date().getFullYear();
        const yearDropdown = $("#year");
        yearDropdown.empty();
        for (let year = currentYear; year >= startYear; year--) {
    yearDropdown.append(`<option value="${year}">${year}</option>`);        }
        yearDropdown.val(currentYear);
    }

    function GetEmployeeByBranchId(branchId) {
        $.ajax({
            type: "GET",
            url: '@(baseDomainUrl + "/api/EmployeeMasterAPI/GetEmployeeByBranchId")/' + branchId,
            success: function (response) {
                if (response?.isSuccess && response?.data) {
                    const $emp = $('#employeeDropdown');
                    $emp.empty().append('<option value="">--Select Employee--</option>');
                    $.each(response.data, function (i, item) {
                        $emp.append('<option value="' + item.id + '">' + item.fullName + '</option>');
                    });
                }
            }
        });
    }

    const reasonOptions = [
        { ID: "Forgot To Punch/Sign", Name: "Forgot To Punch/Sign" },
        { ID: "Working from Home", Name: "Working from Home" },
        { ID: "Client Visit", Name: "Client Visit" },
        { ID: "Training", Name: "Training" },
        { ID: "Other", Name: "Other" }
    ];

    $('.btn-custom:contains("Go")').on('click', function () {
        const branchId = $('#branch').val();
        const empId = $('#employeeDropdown').val();
        const month = $('#month')[0].selectedIndex + 1;
        const year = $('#year').val();
        const recordtype = $('#recordtype').val();

        if (!branchId || !empId) {
            Swal.fire("Please select both Branch and Employee.");
            return;
        }

        const formData = new FormData();
        formData.append("BranchId", branchId);
        formData.append("EmpId", empId);
        formData.append("Month", month);
        formData.append("Year", year);
        formData.append("RecordType", recordtype);

        $.ajax({
            url: '@(baseDomainUrl + "/api/EmployeeInOut/GetEmployeeInOutReport")',
            type: 'POST',
            data: formData,
            contentType: false,
            processData: false,
            success: function (response) {
                if (response?.isSuccess) {
                    LoadAttendanceGrid(response.data);
                } else {
                }
            },
            error: function () {
            }
        });
    });


         function LoadAttendanceGrid(data) {
        $("#attendanceGrid").dxDataGrid({
            dataSource: data,
            showBorders: true,
            keyExpr: "for_Date",
            selection: {
                mode: "multiple",
                showCheckBoxesMode: "always"
            },
            editing: {
                mode: "cell",
                allowUpdating: true
            },
            onEditingStart: function (e) {
                if (e.data.status === "Present") {
                    e.cancel = true;
                }
            },
            onCellValueChanged: function (e) {
                if (e.data.in_Time && e.data.out_Time) {
                    const inTime = new Date(e.data.in_Time);
                    const outTime = new Date(e.data.out_Time);
                    const diffMs = outTime - inTime;
                    if (!isNaN(diffMs) && diffMs > 0) {
                        const hours = Math.floor(diffMs / (1000 * 60 * 60));
                        const minutes = Math.floor((diffMs / (1000 * 60)) % 60);
                        e.data.workingHours = `${String(hours).padStart(2, '0')}:${String(minutes).padStart(2, '0')}`;
                        e.data.dayType = hours >= 8 ? "Full Day" : "Half Day";
                    } else {
                        e.data.workingHours = "--";
                        e.data.dayType = "--";
                    }
                } else {
                    e.data.workingHours = "--";
                    e.data.dayType = "--";
                }
            },
            columns: [
                { dataField: "for_Date", caption: "Date", dataType: "date", width: 100 },
                { dataField: "fullName", caption: "Employee", allowEditing: false },
                { dataField: "branchName", caption: "Branch", allowEditing: false },
                { dataField: "shiftTime", caption: "Shift Time", allowEditing: false },

                // ✅ In Time
                {
                    dataField: "in_Time",
                    caption: "In Time",
                    dataType: "date",
                    editorType: "dxDateBox",
                    editorOptions: {
                        type: "time",
                        displayFormat: "HH:mm:ss",
                        useMaskBehavior: true,
                        showSpinButtons: true,
                        width: 120,
                        inputAttr: { style: "font-size:12px;" }
                    },
                    calculateDisplayValue: function (rowData) {
                        if (!rowData.in_Time) return "";
                        return new Date(rowData.in_Time).toLocaleTimeString('en-GB', {
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit'
                        });
                    },
                    allowEditing: function (rowData) {
                        return rowData.status === "Absent";
                    }
                },

                // ✅ Out Time
                {
                    dataField: "out_Time",
                    caption: "Out Time",
                    dataType: "date",
                    editorType: "dxDateBox",
                    editorOptions: {
                        type: "time",
                        displayFormat: "HH:mm:ss",
                        useMaskBehavior: true,
                        showSpinButtons: true,
                        width: 120,
                        inputAttr: { style: "font-size:12px;" }
                    },
                    calculateDisplayValue: function (rowData) {
                        if (!rowData.out_Time) return "";
                        return new Date(rowData.out_Time).toLocaleTimeString('en-GB', {
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit'
                        });
                    },
                    allowEditing: function (rowData) {
                        return rowData.status === "Absent";
                    }
                },

                // ✅ Status
                {
                    dataField: "status",
                    caption: "Present Day",
                    width: 100,
                    allowEditing: false,
                    cellTemplate: function (container, options) {
                        const status = options.data.status;
                        const text = status === 'Present' ? 'P' : 'A';
                        const color = status === 'Present' ? 'green' : 'red';
                        $('<div>').text(text)
                            .css({ color: color, fontWeight: 'bold', textAlign: 'center' })
                            .appendTo(container);
                    }
                },

                // ✅ Reason
                {
                    dataField: "reason",
                    caption: "Reason",
                    lookup: {
                        dataSource: reasonOptions,
                        valueExpr: "ID",
                        displayExpr: "Name"
                    },
                    editorOptions: {
                        showClearButton: true,
                        searchEnabled: false
                    },
                    calculateDisplayValue: function (rowData) {
                        return rowData.reason || "--Select--";
                    },
                    allowEditing: function (rowData) {
                        return rowData.status === "Absent";
                    }
                },

                // ✅ Working Hours
                {
                    dataField: "workingHours",
                    caption: "Working Hours",
                    allowEditing: false
                },

                // ✅ Full Day / Half Day
                {
                    dataField: "dayType",
                    caption: "Day Type",
                    allowEditing: false
                }
            ]
        });
    }







    $('#btnSaveGridData').on('click', function () {
        const gridInstance = $("#attendanceGrid").dxDataGrid("instance");

        // ✅ Force commit pending cell edits
        gridInstance.saveEditData();

        const selectedRows = gridInstance.getSelectedRowsData();

        if (selectedRows.length === 0) {
            alert("Please select at least one row to save.");
            return;
        }

        const empId = $('#employeeDropdown').val();
        if (!empId) {
            alert("Please select an employee.");
            return;
        }

        const rowsToSave = selectedRows
            .filter(row => row.reason && row.reason.trim() !== "")
            .map(row => ({
                EmpId: empId,
                FullName: row.fullName || "",
                BranchName: row.branchName || "",
                ForDate: row.for_Date || row.forDate,
                ShiftTime: row.shiftTime || "",
                InTime: row.in_Time,
                OutTime: row.out_Time,
                Duration: null,
                Status: row.status || "",
                Reason: row.reason || "",
                IsApproved: false,
                IsPending: true,
                IsRejected: false
            }));

        if (rowsToSave.length === 0) {
            alert("Please provide reason before saving.");
            return;
        }


        $.ajax({
            url: '@(baseDomainUrl + "/api/AttendanceRegularizationAPI/CreateAttendanceRegularization")',
            type: "POST",
            contentType: "application/json",
            data: JSON.stringify(rowsToSave),
            success: function (response) {
                if (response?.isSuccess) {
                    alert("Saved successfully.");
                    gridInstance.clearSelection();
                } else {
                    alert("Save failed: " + (response?.responseMessage || "Unknown error"));
                }
            },
            error: function (xhr) {
                alert("Server error: " + xhr.status + " - " + xhr.statusText);
            }
        });
    });

        $('.back-btn button').on('click', function () {
        window.history.back(); // Go to previous page
    });

        $('.btn-custom:contains("Clear")').on('click', function () {
        $('#branch').val('');
        $('#month').val('January');
        $('#year').val(new Date().getFullYear());
        $('#recordtype').val('Regularize');
        $('#employeeDropdown').val('');
        $('input[placeholder="Employee Code or Name"]').val('');

        // Clear the grid
        const grid = $("#attendanceGrid").dxDataGrid("instance");
        grid.option("dataSource", []);
    });

</script>