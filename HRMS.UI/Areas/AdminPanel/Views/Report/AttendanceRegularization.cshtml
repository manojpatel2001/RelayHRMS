@inject IConfiguration Configuration
@{
    ViewData["Title"] = "Attendance Regularization";
    Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
    var uri = new Uri(baseUrl);
    string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
}

<title>Search Panel</title>

<!-- jQuery + Bootstrap + SweetAlert -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<style>
    body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: #ffffff;
    }

    .form-section {
        padding: 15px;
        border: 1px solid #ccc;
    }

    .btn-custom {
        background-color: #3e4b6d;
        color: white;
        border: none;
        padding: 4px 12px;
        font-size: 13px;
        font-weight: 600;
        border-radius: 4px;
        transition: none;
        box-shadow: none;
    }

        .btn-custom:hover,
        .btn-custom:focus,
        .btn-custom:active {
            background-color: #3e4b6d;
            color: white;
            outline: none;
            box-shadow: none;
        }

    .search-panel-wrapper {
        max-width: 100%;
        margin: auto;
    }

    .search-panel-container {
        background-color: #3e4b6d;
        padding: 6px 15px;
        border-radius: 6px;
        margin-bottom: 15px;
    }

    .search-panel-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .search-heading {
        font-size: 15px;
        color: white;
        margin: 0;
    }

    .btn-add {
        background-color: orange;
        color: white;
        font-size: 14px;
        padding: 6px 15px;
        border: none;
        border-radius: 4px;
    }

    .form-label {
        font-size: 13px;
        font-weight: 500;
        margin-bottom: 4px;
    }


    .form-control-sm, .form-select-sm {
        height: calc(1.5em + .5rem + 2px);
        font-size: 0.875rem;
        padding: .25rem .5rem;
    }
</style>

<!-- Search Panel Header -->
<div class="search-panel-wrapper">
    <div class="search-panel-container">
        <div class="search-panel-row">
            <div class="search-heading">Search panel</div>
            <a href="/AdminPanel/Report/AddAttendanceRegularization" class="btn-add">Add</a>
        </div>
    </div>
</div>
<!-- Form Starts -->
<div class="form-section">
    <!-- Row 1: Search By & Search For -->
    <div class="row justify-content-center mb-3">
        <div class="col-md-5 d-flex align-items-center">
            <label for="searchby" class="form-label mb-0 me-2" style="width: 120px;">Search By<span class="text-danger">*</span>:</label>
            <select class="form-select form-select-sm" id="searchby" style="width: 180px;">
                <option value="1">Emp Name</option>
                <option value="2">Emp Code</option>
                <option value="3">Reason</option>
                <option value="4">Manager Name</option>
            </select>
        </div>
        <div class="col-md-5 d-flex align-items-center">
            <label for="searchfor" class="form-label mb-0 me-2" style="width: 120px;">Search for<span class="text-danger">*</span>:</label>
            <input type="text" class="form-control form-control-sm" id="searchfor" style="width: 180px;" />
        </div>
    </div>

    <!-- Row 2: From Date & To Date -->
    <div class="row justify-content-center mb-3">
        <div class="col-md-5 d-flex align-items-center">
            <label for="fromdate" class="form-label mb-0 me-2" style="width: 120px;">From Date:</label>
            <input type="date" class="form-control form-control-sm" id="fromdate" style="width: 180px;" />
        </div>
        <div class="col-md-5 d-flex align-items-center">
            <label for="todate" class="form-label mb-0 me-2" style="width: 120px;">To Date:</label>
            <input type="date" class="form-control form-control-sm" id="todate" style="width: 180px;" />
        </div>
    </div>

    <!-- Row 3: Radio Buttons + Buttons -->
    <div class="row justify-content-center align-items-center mb-3">
        <div class="col-md-10">
            <div class="d-flex justify-content-between align-items-center flex-wrap">
                <!-- Radio Buttons -->
                <div class="d-flex align-items-center flex-wrap">
                    <div class="form-check me-4">
                        <input class="form-check-input" type="radio" name="type" id="r2">
                        <label class="form-check-label" for="r2">Pending</label>
                    </div>
                    <div class="form-check me-4">
                        <input class="form-check-input" type="radio" name="type" id="r3">
                        <label class="form-check-label" for="r3">Approved</label>
                    </div>
                    <div class="form-check me-4">
                        <input class="form-check-input" type="radio" name="type" id="r4">
                        <label class="form-check-label" for="r4">Rejected</label>
                    </div>
                </div>

                <!-- Action Buttons -->
                <div class="d-flex align-items-center mt-2 mt-md-0">
                    <button class="btn btn-custom me-2" id="btnGo">Go</button>
                    <button class="btn btn-custom" id="btnClear">Clear</button>
                    <button class="btn btn-custom" onclick="goBack()">Back</button>
                </div>
            </div>
        </div>
    </div>

</div>

<!-- EMPLOYEE REGULARIZATION Heading -->

<div class="search-panel-wrapper">
    <div class="search-panel-container">
        <div class="search-panel-row">
            <div class="search-heading">EMPLOYEE REGULARIZATION</div>
        </div>
    </div>
</div>

<!-- Delete Button + Grid Container -->
<div class="container mt-3">
    <!-- Action Buttons Row -->
   <div id="actionButtons" class="custom-action-buttons text-end mb-2">
        <button id="btnDelete" class="btn btn-custom">Delete</button>
        <button id="btnApprove" class="btn btn-custom">Approve</button>
        <button id="btnReject" class="btn btn-custom">Reject</button>
</div>
    <!--Loader-->

    <div id="grid-loader"
         class="grid-loader justify-content-center align-items-center flex-column"
         style="display: none; position: fixed; top: 0; left: 0; width: 100vw; height: 100vh;
            background: rgba(255, 255, 255, 0.6); backdrop-filter: blur(3px); z-index: 9999;">

        <img src="@baseDomainUrl/loders/loder.png"
             class="grid-logo-spinner"
             style="width: 40px; height: 40px; animation: spin 1s linear infinite;" />

        <div class="grid-loading-text text-dark " style="font-size: 16px;">Loading...</div>
    </div>
    <!-- Grid -->
    <div id="attendanceGrid"></div>
</div>

<script>

        $(document).ready(function () {
        $('#r2').prop('checked', true); 
        $('#btnGo').click(); 
            $("#btnApprove").click(function () {
        updateAttendanceStatus("Approved");
    });

    $("#btnReject").click(function () {
        updateAttendanceStatus("Rejected");
    });
    });
    let selectedKeys = [];


      function goBack() {
        window.history.back(); 
    }
    function getStatus() {
        if ($('#r2').is(':checked')) return 'Pending';
        if ($('#r3').is(':checked')) return 'Approved';
        if ($('#r4').is(':checked')) return 'Rejected';
        return null;
    }

    function getSearchByText(value) {
        switch (value) {
            case '1': return 'EmpName';
            case '2': return 'EmpCode';
            case '3': return 'Reason';
            case '4': return 'ManagerName';
            default: return null;
        }
    }


          async function showLoder(){
          $('#grid-loader').addClass('d-flex').show();
        }
        async function hideLoder(){
                $('#grid-loader').removeClass('d-flex').hide();
        }
    function loadGrid(data) {
        $("#attendanceGrid").dxDataGrid({
            dataSource: data,
            keyExpr: "attendanceRegularizationId", // must be unique
            showBorders: true,
            selection: {
                mode: "multiple",
                showCheckBoxesMode: "always"
            },
            onSelectionChanged: function (e) {
                selectedKeys = e.selectedRowKeys;
            },
            columns: [
                { dataField: "employeeCode", caption: "Code", width: 80 },
               { dataField: "empId", visible: false },
                { dataField: "fullName", caption: "Name" },
         
      { dataField: "forDate", caption: "Date", dataType: "date", format: "dd/MM/yyyy" },
      { dataField: "createdDate", caption: "App Date", dataType: "date", format: "dd/MM/yyyy" },
      { dataField: "inTime", caption: "In Time", dataType: "datetime", format: "dd/MM/yyyy HH:mm" },
      { dataField: "outTime", caption: "Out Time", dataType: "datetime", format: "dd/MM/yyyy HH:mm" },


               { dataField: "duration", caption: "Duration", dataType: "string" },   
               { dataField: "day", caption: "Day", dataType: "string" },
                    {
                    caption: "Status",
                    calculateCellValue: function (row) {
                        if (row.isApproved) return "Approved";
                        if (row.isRejected) return "Rejected";
                        if (row.isPending) return "Pending";
                        return "";
                    }
                }
            ],
                 onContentReady: function (e) {
            const rowCount = data.length;
            const rowHeight = 40; // approx row height in pixels
            const headerHeight = 40;
            const totalHeight = headerHeight + (rowCount * rowHeight);
            e.component.option("height", totalHeight);
        }

        });
        $("#actionButtons").show();
    }


    $('#btnGo').on('click', function () {
               showLoder();
        let model = {
            SearchBy: getSearchByText($('#searchby').val()),
            SearchValue: $('#searchfor').val(),
            FromDate: $('#fromdate').val() || null,
            ToDate: $('#todate').val() || null,
            Status: getStatus()
        };

        $.ajax({
            url: '@(baseDomainUrl + "/api/AttendanceRegularizationAPI/GetAttendanceRegularization")',
            type: 'POST',
            data: JSON.stringify(model),
            contentType: 'application/json',
            success: function (res) {
                if (res.isSuccess) {                    
                    loadGrid(res.data); 
                        $("#actionButtons").show();
                            $("#btnDelete").show();
                         $("#btnApprove").show();
                         $("#btnReject").show();
                } else {         
                       $("#actionButtons").hide();
                         $("#btnDelete").hide();
                         $("#btnApprove").hide();
                         $("#btnReject").hide();
                       round_error_noti(res.responseMessage || 'No Data');
                }
            },
            error: function () {               
                   round_error_noti(res.responseMessage || 'No Data');
            },
            complete: function () {

            hideLoder();
        }
        });
    });



       $('#btnDelete').on('click', function () {
        var grid = $("#attendanceGrid").dxDataGrid("instance");
        var selectedIds = grid.getSelectedRowKeys(); 

        if (selectedIds.length === 0) {
            round_error_noti('Please select records to delete.');
            return;
        }

               showLoder();
        const deletePayload = {
            Id: selectedIds,     
            DeletedBy: ""        
        };

        $.ajax({
            url: '@(baseDomainUrl + "/api/AttendanceRegularizationAPI/Delete")',
            type: 'DELETE',
            contentType: 'application/json',
            data: JSON.stringify(deletePayload),
            success: function (res) {
                if (res.isSuccess) {
                    round_success_noti(res.responseMessage || "Deleted successfully.");
                      selectedRowKeys.forEach(function (key) {
                    grid.deleteRow(grid.getRowIndexByKey(key));
                });
                    $("#btnGo").click(); 
                } else {
                    round_error_noti(res.responseMessage || "Deletion failed.");
                }
            },
            error: function () {
                round_error_noti("Something went wrong during deletion.");
            },
            complete: function () {

            hideLoder();
        }
        });
    });

       function updateAttendanceStatus(status) {
        var grid = $("#attendanceGrid").dxDataGrid("instance");
        var selectedRows = grid.getSelectedRowsData();
        console.log("selectedRows",selectedRows);
        if (selectedRows.length === 0) {
           round_error_noti("Please select at least one record.");
            return;
        }
        selectedRows.forEach(function (row) {
            row.status = status; 
   
        });
            showLoder();
        $.ajax({
            url: '@(baseDomainUrl + "/api/AttendanceRegularizationAPI/UpdateAttendanceRegularization")',
            type: "PUT",
            data: JSON.stringify(selectedRows), 
            contentType: "application/json",
            success: function (response) {
                if (response.isSuccess) {
                    round_success_noti(response.responseMessage || "Status updated successfully.");
                        const selectedKeys = grid.getSelectedRowKeys(); 
                let dataSource = grid.option("dataSource");
                const updatedData = dataSource.filter(item => {
                    return !selectedKeys.includes(item.attendanceRegularizationId);
                });
                grid.option("dataSource", updatedData);
                grid.refresh();
                } else {
                    round_error_noti(response.responseMessage || "Update failed.", "error");

                }
            },
            error: function () {
              round_error_noti(response.responseMessage || "Error", "Something went wrong during update.", "error");
            },   
            complete: function () {
     
            hideLoder();
        }
        });
    }


      $("#btnClear").click(function () {
        // Reset form
        $('#searchby').val("1");
        $('#searchfor').val('');
        $('#fromdate').val('');
        $('#todate').val('');
        $("input[name='type']").prop('checked', false);
        $('#r2').prop('checked', true);

        // Completely destroy and recreate empty grid
        $("#attendanceGrid").dxDataGrid("dispose");
        $("#attendanceGrid").dxDataGrid({
            dataSource: [],
            showBorders: true
        });

        // Hide buttons
        $("#actionButtons").hide();
            $("#btnDelete").hide();
    $("#btnApprove").hide();
    $("#btnReject").hide();
    });



</script>
