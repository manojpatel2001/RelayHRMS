<div class="card-header bg-primary text-white ">
    <h6>EMERGENCY CONTACT(S)</h6>
</div>

@inject IConfiguration Configuration
@{
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
    var uri = new Uri(baseUrl);
    string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
}
<style>
	.table-responsive-fixed {
		max-height: 200px; 
		min-height: auto; 
		overflow-y: auto; 
	}

	/* Optional: Sticky table header */
	thead th {
		position: sticky;
		top: 0;
		background-color: #343a40;
		color: white;
		z-index: 1;
	}
</style>
<div id="editEmergencyContact" ">
    <div class="card-body px-4">
        <form id="emergencyContactForm">
           
            <div class="row px-5">
                <!-- Name -->
                <div class="col-md-4">
                    <div class="form-group mt-3 position-relative">
                        <input type="text" class="form-control floating-input" id="txtEmergencyName" placeholder="Name" />
                        <label class="floating-label" for="txtEmergencyName">Name*</label>
                    </div>
					<span id="spnEmergencyName" style="color:red; display:none;">Please Enter Name</span>

                </div>

                <!-- Relationship -->
                <div class="col-md-4">
                    <div class="form-group mt-3 position-relative">
                        <select class="form-control floating-input" id="ddlEmergencyRelationship">
                            <option value="">Select</option>
                           
                        </select>
                        <label class="floating-label" for="ddlEmergencyRelationship">Relationship*</label>
                    </div>
					<span id="spnEmergencyRelationship" style="color:red; display:none;">Please Select Relationship</span>

                </div>

                <!-- Mobile -->
                <div class="col-md-4">
                    <div class="form-group mt-3 position-relative">
						<input type="text" class="form-control floating-input" id="txtEmergencyMobile" placeholder="Mobile" step="1" min="0" maxlength="10" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 10)" />
                        <label class="floating-label" for="txtEmergencyMobile">Mobile*</label>
                    </div>
					<span id="spnEmergencyMobile" style="color:red; display:none;">Please Enter Mobile</span>

                </div>
            </div>

            <div class="row px-5">
                <!-- Home Phone -->
                <div class="col-md-4">
                    <div class="form-group mt-3 position-relative">
						<input type="text" class="form-control floating-input" id="txtEmergencyHomePhone" placeholder="Home Phone" step="1" min="0" maxlength="10" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 10)" />
                        <label class="floating-label" for="txtEmergencyHomePhone">Home Phone</label>
                    </div>
					<span id="spnEmergencyHomePhone" style="color:red; display:none;">Please Enter Home Phone</span>

                </div>

                <!-- Work Phone -->
                <div class="col-md-4">
                    <div class="form-group mt-3 position-relative">
						<input type="text" class="form-control floating-input" id="txtEmergencyWorkPhone" placeholder="Work Phone" step="1" min="0" maxlength="10" oninput="this.value = this.value.replace(/[^0-9]/g, '').slice(0, 10)" />
                        <label class="floating-label" for="txtEmergencyWorkPhone">Work Phone</label>
                    </div>
					<span id="spnEmergencyWorkPhone" style="color:red; display:none;">Please Enter Work Phone</span>

                </div>
            </div>

            <div class="row mt-3">
                <div class="col-md-4"></div>
                <div class="col-md-4 text-center">
                    <button type="button" class="btn btn-primary " style="background-color:#394867 !important" id="btnSaveEmergencyContact">Save</button>
					<button type="button" class="btn  " style="background-color:#e2e2e2 !important" id="btnResetEmergencyContact" onclick="resetEmergencyContactForm()">Reset</button>

                </div>
                
                <div class="col-md-4"></div>
            </div>

            

        </form>

		<div class="row">
			<div class="col-md-12 mt-2">

				<div class="table-responsive table-responsive-fixed">
					<table class="table table-bordered" id="tableEmegency">
						<thead class="thead-dark">
							<tr>
								<th style="width:18%">Name</th>
								<th style="width:18%">Relation</th>
								<th style="width:18%">Mobile No</th>
								<th style="width:18%">Home Phone</th>
								<th style="width:18%">Work Phone</th>
								
								<th style="width:10%">Actions</th> <!-- Add action column -->
							</tr>
						</thead>
						<tbody>
							
						</tbody>
					</table>
				</div>
			@* 	<div class="form-group" id="tagEmergencyGrid">
					<div class="rowCount" id="rowCountEmergency"></div>
					<div id="gridContainerEmegency">
						<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>
					</div>

				</div>
				<div id="spnNoRecord" style="display:none;">No Record Found!</div>
 *@
			</div>
		</div>
    </div>
</div>



<script>
	const user=`${localStorage.getItem('EmployeeId')}`;
	let EmergencyContactId = 0;
	let emegencyDetails=[]
	async function loadEmergencyContactff() {
		try {
			const response = await fetch('@baseUrl/EmergencyContactAPI/GetAllEmergencyContacts/'+CurrentEmployeeId, {
				method: 'GET',
				headers: {
					'Accept': 'application/json'
				}
			});

				const data = await response.json();

				let tbody = $('#tableEmegency tbody');
				tbody.empty();
				if (data.isSuccess && data.data.length > 0) {
					emegencyDetails=data.data;
					data.data.forEach(row => {
						const createdDate = formatToDDMMYYYY(row.createdDate); // format correctly

							tbody.append(`
								<tr>
									<td>${row.name??''}</td>
									<td>${row.relationName??''}</td>
									<td>${row.mobileNo??''}</td>
									<td>${row.homePhoneNo??''}</td>
									<td>${row.workPhoneNo??''}</td>
									<td>
										<div class="d-flex order-actions">
													<a href="javascript:;" class="edit-action me-2" title="Edit" onclick="editEmegencyContact(${row.emergencyContactId})">
														<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
															<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>
														</svg>
													</a>
													<a href="javascript:;" class="delete-action" title="Delete" onclick="deleteEmegencyContact(${row.emergencyContactId})">
														<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
															<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>
														</svg>
													</a>
												</div>
											</td>
										</tr>
									`);

					});
				} else {
					tbody.append('<tr><td colspan="7" class="text-center">No data found.</td></tr>');
				}


			// if (data.isSuccess) {
			// 	debugger;
			// 	console.log("GetAllEmergencyContacts:", data.data);
			// 	console.log("GetAllEmergencygrid:", $("#gridContainerEmegency"));
			// 	$("#spnNoRecord").hide();
			// 	$("#tagEmergencyGrid").show();
			// 	var arrayDta=data.data;
			// 		$("#gridContainerEmegency").dxDataGrid({
			// 			dataSource: data.data,
			// 			rowHeight: 40,
			// 			width: '100%',
			// 			columns: [
			// 			{ dataField: 'name', caption: 'Name' },
			// 			{ dataField: 'relationName', caption: 'Relationship' },
			// 			{ dataField: 'mobileNo', caption: 'Mobile No' },
			// 			{ dataField: 'homePhoneNo', caption: 'Home Phone' },
			// 			{ dataField: 'workPhoneNo', caption: 'Work Phone' },
			// 			//{ dataField: 'createdDate', caption: 'Created Date', dataType: 'date' },
			// 				{
			// 						dataField: '',
			// 						caption: '',
			// 						alignment: 'center',
			// 						width: '50px',
			// 						type: 'buttons',
			// 						fixed: true,
			// 						fixedPosition: 'right',
			// 						cellTemplate: function(container, options) {
			// 							var buttonElement = $('<div class="d-flex order-actions">' +
			// 								'<a href="javascript:;" class="edit-action" title="Edit Employee">' +
			// 								'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
			// 								'<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
			// 								'</svg>' +
			// 								'</a>' +
			// 								'</div>')
			// 								.on('dxclick', function() {
			// 									editEmegencyContact(options.data);
			// 								}).appendTo(container);
			// 						}
			// 					},
			// 					{
			// 						dataField: '',
			// 						caption: '',
			// 						alignment: 'center',
			// 						width: '50px',
			// 						type: 'buttons',
			// 						fixed: true,
			// 						fixedPosition: 'right',
			// 						cellTemplate: function(container, options) {
			// 							var buttonElement = $('<div class="d-flex order-actions">' +
			// 								'<a href="javascript:;" class="delete-action" title="Delete Employee">' +
			// 								'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
			// 								'<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
			// 								'</svg>' +
			// 								'</a>' +
			// 								'</div>')
			// 								.on('dxclick', function() {
			// 									deleteEmegencyContact(options.data);
			// 								}).appendTo(container);
			// 						}
			// 					}

			// 			],
			// 			columnsAutoWidth: false,
			// 			wordWrapEnabled: false,
			// 			showBorders: true,
			// 			rowAlternationEnabled: false,
			// 			grouping: { autoExpandAll: true },
			// 			paging: { pageSize: 10 },
			// 			pager: {
			// 				showPageSizeSelector: true,
			// 				allowedPageSizes: [10, 25, 50, 100]
			// 			},
			// 			headerFilter: { visible: true },
			// 			filterRow: { visible: true, applyFilter: "auto" },
			// 			allowColumnResizing: true,
			// 			groupPanel: { visible: true },
			// 			searchPanel: { visible: true, width: 240, placeholder: "Search..." },
			// 			columnFixing: { enabled: true },
			// 			scrolling: {
			// 				mode: "standard",
			// 				useNative: false,
			// 				scrollByContent: true,
			// 				scrollByThumb: true
			// 			},
			// 			onContentReady: function (e) {
			// 				$('#rowCountEmergency').html('Total Records: ' + e.component.totalCount());
			// 			}
			// 		});

			// }
			// else{
			// 	$("#spnNoRecord").show();
			// 	  $("#tagEmergencyGrid").hide();
			// }
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}
	function formatToDDMMYYYY(dateString) {
		if (!dateString) return '';
		const date = new Date(dateString);
		const day = String(date.getDate()).padStart(2, '0');
		const month = String(date.getMonth() + 1).padStart(2, '0');
		const year = date.getFullYear();
		return `${day}-${month}-${year}`;
	}




	async function loadBindRelationShiptOption() {

		try {
			const response = await fetch('@baseUrl/RelationShipAPI/GetAllRelationShips', {
				method: 'GET',
				headers: {
					'Accept': 'application/json'
				}
			});

			const data = await response.json();

			if (data.isSuccess) {

				// console.log("GetAllRelationShips:", data.data);
				var arrayDta=data.data;
				 var dropdowns = $('#ddlEmergencyRelationship');
							dropdowns.empty();
							dropdowns.append(
								$('<option>', {
								value: '',
								text: 'Select',
								selected: true,
								disabled: true
								})
							);

							$.each(data.data, function(index, x) {
									dropdowns.append($('<option >', {
									value:x.relationShipId,
									text: x.relationName
								}));
							});
			}
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}

	$(document).ready(async function () {
		$('#btnSaveEmergencyContact').prop("disabled", false);
		await loadEmergencyContactff();
		loadBindRelationShiptOption();
		//loadEmergencyContacts();

		// // Show modal
		// $("#btnAddEmergencyContact").click(function () {
		// 	resetEmergencyContactForm();
		// 	$(".formType").text("Add Emergency Contact");
		// 	$("#btnSaveEmergencyContact").text("Save");
		// 	$("#emergencyModal").modal("show");
		// });

		// Save or Update

	});

	$("#btnSaveEmergencyContact").click(function () {
					$('#btnSaveEmergencyContact').prop("disabled", true);

			if (!validateEmergencyContactForm()) 
			{
				$('#btnSaveEmergencyContact').prop("disabled", false);

				return;
			}
			
			const contact = {
				EmployeeId:CurrentEmployeeId,
				EmergencyContactId: EmergencyContactId || 0,
				Name: $("#txtEmergencyName").val().trim(),
				RelationShipId: $("#ddlEmergencyRelationship").val(),
				MobileNo: $("#txtEmergencyMobile").val().trim(),
				HomePhoneNo: $("#txtEmergencyHomePhone").val()==""?null:$("#txtEmergencyHomePhone").val().trim(),
				WorkPhoneNo: $("#txtEmergencyWorkPhone").val().trim()==""?null: $("#txtEmergencyWorkPhone").val().trim(),
				CreatedBy:EmergencyContactId==0?user:null,
				UpdatedBy:EmergencyContactId==0?null:user
			};
			// console.log("contact",contact);
			const isNew = EmergencyContactId === 0;
			const url = isNew ? "@baseUrl/EmergencyContactAPI/CreateEmergencyContact" : "@baseUrl/EmergencyContactAPI/UpdateEmergencyContact";
			const method = isNew ? "POST" : "PUT";

			$.ajax({
				url: url,
				type: method,
				contentType: "application/json",
				data: JSON.stringify(contact),
				success: function (response) {
					if (response.isSuccess) {
						round_success_noti(response.responseMessage);
						resetEmergencyContactForm();
							loadEmergencyContactff();
					} else {
						round_error_noti(response.responseMessage);
					}
					$('#btnSaveEmergencyContact').prop("disabled", false);

				},
				error: function (err) {
					console.error(err);
			$('#btnSaveEmergencyContact').prop("disabled", false);

				}
			});
		});
	


	

	// Reset form
	function resetEmergencyContactForm() {

		$('#btnSaveEmergencyContact').prop("disabled", false);
		EmergencyContactId = 0;
		$("#txtEmergencyName, #txtEmergencyMobile, #txtEmergencyHomePhone, #txtEmergencyWorkPhone").val("");
		$("#ddlEmergencyRelationship").val("");
		$("#spnEmergencyName, #spnEmergencyRelationship, #spnEmergencyMobile").hide();
		$("#spnEmergencyHomePhone").hide();
		$("#spnEmergencyWorkPhone").hide();
		$("#btnSaveEmergencyContact").text("Save");

	}


	function editEmegencyContact(emergencyContactId){
		resetEmergencyContactForm();
		const rowData = emegencyDetails.find(x => x.emergencyContactId === emergencyContactId);
		
		EmergencyContactId = emergencyContactId;
		$("#txtEmergencyName").val(rowData.name);
		$("#ddlEmergencyRelationship").val(rowData.relationShipId);
		$("#txtEmergencyMobile").val(rowData.mobileNo);
		$("#txtEmergencyHomePhone").val(rowData.homePhoneNo);
			$("#txtEmergencyWorkPhone").val(rowData.workPhoneNo);

		$("#btnSaveEmergencyContact").text("Update");
	}
	
	function deleteEmegencyContact(emergencyContactId){
				if (!confirm("Are you sure you want to delete?")) {
						return; // Cancel the delete operation
				}

			var deleteObj = {
				   id:emergencyContactId,
				deletedBy: localStorage.getItem('EmployeeId')
			};
			$.ajax({
			url: '@baseUrl/EmergencyContactAPI/DeleteEmergencyContact',
				type: 'DELETE',
				contentType: 'application/json',
				data: JSON.stringify(deleteObj),
				success: function (response) {
					if (response.isSuccess) {
						round_success_noti(response.responseMessage);
					   loadEmergencyContactff();
					} else {
						round_error_noti(response.responseMessage);
					}

				},
				error: function (error) {
					console.log('Error deleting emgency contact!');
				}
			});
	}
	// Validate form
		function validateEmergencyContactForm() {
		let isValid = true;

		// Name validation
		if ($("#txtEmergencyName").val().trim() === "") {
			$("#spnEmergencyName").show();
			isValid = false;
		} else {
			$("#spnEmergencyName").hide();
		}

		// Relationship validation
		if (!$("#ddlEmergencyRelationship").val()) {
			$("#spnEmergencyRelationship").show();
			isValid = false;
		} else {
			$("#spnEmergencyRelationship").hide();
		}

		// Mobile validation
		let mobile = $("#txtEmergencyMobile").val();
		if (mobile === "") {
			$("#spnEmergencyMobile").text("Please Enter Phone Number").show();
			isValid = false;
		} else if (mobile.length !== 10) {
			$("#spnEmergencyMobile").text("Number must be 10 digits").show();
			isValid = false;
		} else {
			$("#spnEmergencyMobile").hide();
		}

		// Home phone validation (optional but must be 10 digits if filled)
		let homePhone = $("#txtEmergencyHomePhone").val();
		if (homePhone) {
			if (homePhone.length !== 10) {
				$("#spnEmergencyHomePhone").text("Number must be 10 digits").show();
				isValid = false;
			} else {
				$("#spnEmergencyHomePhone").hide();
			}
		} else {
			$("#spnEmergencyHomePhone").hide();
		}

		// Work phone validation (optional but must be 10 digits if filled)
		let workPhone = $("#txtEmergencyWorkPhone").val();
		if (workPhone) {
			if (workPhone.length !== 10) {
				$("#spnEmergencyWorkPhone").text("Number must be 10 digits").show();
				isValid = false;
			} else {
				$("#spnEmergencyWorkPhone").hide();
			}
		} else {
			$("#spnEmergencyWorkPhone").hide();
		}

		return isValid;
	}

	
</script>