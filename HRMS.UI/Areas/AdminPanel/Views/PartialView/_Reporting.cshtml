@inject IConfiguration Configuration
@{
    string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
}
<div class="row">
    <div class="col-sm-6">
        <div class="card border border-dark border-1">
            <div class="card-header bg-primary text-white">
                <h6>REPORTING MANAGER</h6>
            </div>

            <div class="card-body">
                <div class="row">
                    <!-- Effect Date -->
                    <div class="col-md-6 mb-2">
                        <div class="form-group mt-3 position-relative">
                            <input type="date" id="effectDateEdit" class="form-control floating-input" />
                            <label class="floating-label" for="effectDateEdit">Effect Date*</label>
                        </div>
                        <span id="spnEffectDate" style="color:red; display:none;">Please Enter Effect Date</span>

                    </div>

                    <!-- Reporting Manager -->
                    <div class="col-md-6 mb-2">
                        <div class="form-group mt-3 position-relative">
                            <select id="reportingManagerEdit" class="form-control floating-input">
                                <option value="">Select</option>
                            </select>
                            <label class="floating-label" for="reportingManagerEdit">Reporting Manager*</label>
                        </div>
                        <span id="spnReportingManager" style="color:red; display:none;">Please Select Reporting Manager</span>

                    </div>

                    <!-- Method -->
                    <div class="col-md-6 mb-2">
                        <div class="form-group mt-3 position-relative">
                            <select id="methodEdit" class="form-control floating-input">
                                <option value="">Select</option>
                                <option value="Email">Email</option>
                                <option value="Phone Call">Phone Call</option>
                                <option value="Video Call">Video Call</option>
                                <option value="In Person">In Person</option>
                            </select>
                            <label class="floating-label" for="methodEdit">Method</label>
                        </div>
                    </div>

                </div>

                <div class="row mt-3">
                    <div class="col-md-4"></div>
                    <div class="col-md-4 text-center">
                        <button type="button" class="btn btn-primary " id="btnSaveReportingManager"
                                style="background-color:#2395c6; color:white;">
                            Save
                        </button>
                        <button type="button" class="btn  " style="background-color:#e2e2e2 !important" id="btnResetReporting" onclick="resetAttachmentForm()">Reset</button>

                    </div>
                    <div class="col-md-4"></div>
                </div>

                <hr class="my-2" />

                <div class="row">
                    <div class="col-md-12 mt-2">
                        <div class="table-responsive table-responsive-fixed">
                            <table class="table table-bordered" id="tableReportingManger">
                                <thead class="thead-dark">
                                    <tr>
                                        <th style="width:25%">Manager Name</th>
                                        <th style="width:19%">Method</th>
                                        <th style="width:23%">Effected Date</th>
                                        <th style="width:23%">Created Date</th>
                                        <th style="width:10%">Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
               
            </div>
        </div> <!-- End outer card -->
    </div>

    <div class="col-sm-6">
        <div class="border border-dark border-1 rounded">
            <div class="card-header bg-primary text-white">
                <h6>CONTRACT</h6>
            </div>
            <div class="card-body">
                <div class="row">
                    <!-- Project -->
                    <div class="col-md-6 mb-2">
                        <div class="form-group mt-3 position-relative">
                            <div class="input-group">
                            <select id="projectEdit" class="form-control floating-input">
                                <option value="">Select</option>
                            </select>
                            <label class="floating-label" for="projectEdit">Project*</label>
                            <button type="button" class="input-group-text p-0 px-2" id="btnProjectModal">
                                +
                            </button>
                          </div>
                        </div>

                        <span id="spnProject" class="text-danger d-none">Please Select Project</span>

                    </div>
                    
                    <!-- Start Date -->
                    <div class="col-md-6 mb-2">
                        <div class="form-group mt-3 position-relative">
                            <input type="date" id="startDateEdit" class="form-control floating-input" />
                            <label class="floating-label" for="startDateEdit">Start Date*</label>
                        </div>
                        <span id="spnStartDate" class="text-danger d-none">Please Enter Start Date</span>

                    </div>
                </div>

                <div class="row">
                    <!-- End Date -->
                    <div class="col-md-6 mb-2">
                        <div class="form-group mt-3 position-relative">
                            <input type="date" id="endDateEdit" class="form-control floating-input" />
                            <label class="floating-label" for="endDateEdit">End Date*</label>
                        </div>
                        <span id="spnEndDate" class="text-danger d-none">Please Enter End Date</span>

                    </div>

                    <!-- Comments -->
                    <div class="col-md-6 mb-2">
                        <div class="form-group mt-3 position-relative">
                            <textarea id="commentsEdit" class="form-control floating-input" placeholder="Comments" rows="3"></textarea>
                            <label class="floating-label" for="commentsEdit">Comments</label>
                        </div>
                        <span id="spnComments" class="text-danger d-none">Please Enter Comments</span>

                    </div>
                </div>

                <div class="row mt-3">
                    <!-- Checkboxes -->
                    <div class="col-md-3">
                        <div class="form-check mt-2">
                            <input class="form-check-input" type="checkbox" id="renew">
                            <label class="form-check-label" for="renew">Renew</label>
                        </div>
                    </div>

                    <div class="col-md-9">
                        <div class="form-check mt-2">
                            <input class="form-check-input" type="checkbox" id="contractReminder">
                            <label class="form-check-label" for="contractReminder">Reminder For Contract Renew/Finished</label>
                        </div>
                    </div>
                </div>

                <!-- Save Button -->
                <div class="row mt-3">
                    <div class="col-md-4"></div>
                    <div class="col-md-4 text-center">
                        <button type="button" class="btn btn-primary " style="background-color:#394867 !important" id="btnSaveContract">Save</button>
                        <button type="button" class="btn  " style="background-color:#e2e2e2 !important"  onclick="resetContractForm()">Reset</button>

                    </div>
                    <div class="col-md-4"></div>
                </div>

                <hr class="my-2" />

                <div class="row">
                    <div class="col-md-12 mt-2">
                        <div class="table-responsive table-responsive-fixed">
                            <table class="table table-bordered" id="tableContract">
                                <thead class="thead-dark">
                                    <tr>
                                        <th>Project Name</th>
                                        <th>Start Date</th>
                                        <th>End Date</th>
                                        <th>Comments</th>
                                        <th>Renew</th>
                                        <th>Reminder</th>
                                        <th>Created Date</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

  </div>

<!--Project Modal-->
<div class="modal " id="addProjectModal" tabindex="-1" aria-labelledby="addThanaLabel" aria-hidden="true">
    <div class="modal-dialog modal-md">
        <div class="modal-content">
            <div class="modal-header">
                <h6 class="modal-title btn-heading-title" id="addThanaLabel">
                    <span class="formType">Add Project</span>
                </h6>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>

            <div class="modal-body modal-body-font">
                <div class="row px-5">
                    <div class="col-md-12 mb-2">
                <div class="position-relative">
                    <input type="text" class="form-control floating-input" id="ProjectInput" placeholder="Project Name">
                    <label class="floating-label" for="ProjectInput">Project Name *</label>
                </div>
                <span id="spnProject" style="color:red; display:none;">Please Enter Project Name</span>
                </div>
                
                    <div class="col-md-12 mb-2">
                        <div class="form-group  position-relative">
                            <input type="text" class="form-control floating-input" placeholder="Description" id="ProjectDesc" />
                            <label class="floating-label" for="ProjectDesc">Description</label>
                        </div>
                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-primary" style="background-color:#2395c6; color:white;" id="btnSaveProject">Save</button>
            </div>
        </div>
    </div>
</div>

<script>

    let reportingDetails=[];
    let ReportingManagerDetailsId=0;
      async function loadReportingDetails() {
        try {
            const response = await fetch('@baseUrl/ReportingManagerDetailsAPI/GetAllReportingManagerDetails/' + CurrentEmployeeId, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });
                if (!response.ok) {
                        console.log('HTTP error! Status: ' + response.status);
                 }
            const data = await response.json();
            
            let tbody = $('#tableReportingManger tbody');
            tbody.empty();

            if (data.isSuccess && data.data.length > 0) {
                reportingDetails=data.data;
                data.data.forEach(row => {
                    const createdDate = formatToDDMMYYYY(row.createdDate);
                    const effectedDate = formatToDDMMYYYY(row.effectedDate);
                    const fileLink = row.documentUrl ? `<a href="${row.documentUrl}" target="_blank">View</a>` : 'N/A';

                    tbody.append(`
                        <tr>
                            <td>${row.employeeCode ?? ''} ${row.reportingManagerName ?? ''}</td>
                        <td>${row.methodName ?? ''}</td>
                        <td>${effectedDate}</td>
                        <td>${createdDate}</td>
                            <td>
                               <div class="d-flex order-actions">
                                        <a href="javascript:;" class="edit-action me-2" title="Edit" onclick="editReportingManger(${row.reportingManagerDetailsId})">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
                                                <path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>
                                            </svg>
                                        </a>
                                        <a href="javascript:;" class="delete-action" title="Delete" onclick="deleteReportingManager(${row.reportingManagerDetailsId})">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>
                                            </svg>
                                        </a>
                                </div>
                            </td>
                        </tr>
                    `);
                });
            } else {
                tbody.append('<tr><td colspan="6" class="text-center">No data found.</td></tr>');
            }

        } catch (error) {
            console.error('Fetch error:', error);
        }
    }


    async function bindReportingManger() {
        $.ajax({
            type: "GET",
            url: "@baseUrl/EmployeeMasterAPI/GetAllEmployee" + "?companyId=" + CurrentCompanyId,
            success: function (data) {
                if (data.isSuccess) {
                    var dropdown = $('#reportingManagerEdit');
                    dropdown.empty();
                    dropdown.append('<option disabled selected value="">Select</option>');
                    $.each(data.data, function (index, company) {
                        dropdown.append($('<option>', {
                            value: company.id,
                            text: company.fullName
                        }));
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error: " + status + " - " + error);
            }
        });
    }

    function validateReportingManagerForm() {
        let isValid = true;

        const effectDate = $('#effectDateEdit').val();
        if (!effectDate) {
            $('#spnEffectDate').show();
            isValid = false;
        } else {
            $('#spnEffectDate').hide();
        }

        const managerId = $('#reportingManagerEdit').val();
        if (!managerId) {
            $('#spnReportingManager').show();
            isValid = false;
        } else {
            $('#spnReportingManager').hide();
        }

        return isValid;
    }

    function resetReportingForm() {
        $('#effectDateEdit').val('');
        $('#reportingManagerEdit').val('');
        $('#methodEdit').val('');
        $('#spnEffectDate').hide();
        $('#spnReportingManager').hide();
        ReportingManagerDetailsId=0;
        $('#btnSaveReportingManager').prop("disabled", false);
          $('#btnSaveReportingManager').text('Save');
    }

    $(document).ready(function () {
        loadReportingDetails();
        bindReportingManger();
        
        

        $("#btnSaveReportingManager").click(function () {
             $('#btnSaveReportingManager').prop("disabled", true);
            if (!validateReportingManagerForm()) {
                  $('#btnSaveReportingManager').prop("disabled", false);

                return;
            }
            var payloadReporting = {
                reportingManagerDetailsId:ReportingManagerDetailsId,
                employeeId: CurrentEmployeeId,
                effectedDate: $("#effectDateEdit").val(),
                reportingManagerId: $("#reportingManagerEdit").val(),
                methodName: $("#methodEdit").val() == "" ? null : $("#methodEdit").val(),
                createdBy: user

            };

             const reportingUrl=ReportingManagerDetailsId==0?'@baseUrl/ReportingManagerDetailsAPI/CreateReportingManagerDetail':'@baseUrl/ReportingManagerDetailsAPI/UpdateReportingManagerDetail';
            const methodTypeReporting=ReportingManagerDetailsId==0?"POST":"PUT";

            $.ajax({
                type: methodTypeReporting,
                url:reportingUrl,
                data: JSON.stringify(payloadReporting),
                contentType: "application/json",
                success: function (response) {
                    if (response.isSuccess) {
                        round_success_noti(response.responseMessage);
                        resetReportingForm();
                        loadReportingDetails();
                    } else {
                        round_error_noti(response.responseMessage);
                    }
                    $('#btnSaveReportingManager').prop("disabled", false);

                },
                error: function () {
                    alert("Error saving data.");
                }
            });
        });

        $('#btnResetReporting').click(function () {
            resetReportingForm();
        });
    });

     function editReportingManger(reportingManagerDetailsId){
        resetReportingForm();
        const rowData = reportingDetails.find(x => x.reportingManagerDetailsId === reportingManagerDetailsId);
   
        ReportingManagerDetailsId = reportingManagerDetailsId;
        $('#reportingManagerEdit').val(rowData.reportingManagerId);
        $('#methodEdit').val(rowData.methodName);
       $('#effectDateEdit').val(rowData.effectedDate ? rowData.effectedDate.substring(0, 10) : '');
         
        $('#btnSaveReportingManager').text('Update');

    }

    function deleteReportingManager(reportingManagerDetailsId){
                if (!confirm("Are you sure you want to delete?")) {
                        return; // Cancel the delete operation
                }

            var deleteObj = {
                   id:reportingManagerDetailsId,
                deletedBy: localStorage.getItem('EmployeeId')
            };
            $.ajax({
            url: '@baseUrl/ReportingManagerDetailsAPI/DeleteReportingManagerDetail',
                type: 'DELETE',
                contentType: 'application/json',
                data: JSON.stringify(deleteObj),
                success: function (response) {
                    if (response.isSuccess) {
                        round_success_noti(response.responseMessage);
                         loadReportingDetails();
                    } else {
                        round_error_noti(response.responseMessage);
                    }

                },
                error: function (error) {
                    console.log('Error deleting reporting manager!');
                }
            });
    }
</script>

<script>
    let ContractDetailsId = 0;
    let ContractDetails=[];
    $(document).ready(function () {
        loadContractDetails();
        bindProjectDropdown();
       

        $("#btnSaveContract").click(function () {
            $("#btnSaveContract").prop("disabled", true);

            if (!validateContractForm()) {
                $("#btnSaveContract").prop("disabled", false);
                return;
            }

            const payloadContract = {
                contractDetailsId: ContractDetailsId,
                employeeId: CurrentEmployeeId,
                ProjectDetailsId: $("#projectEdit").val(),
                startDate: $("#startDateEdit").val(),
                endDate: $("#endDateEdit").val(),
                comment: $("#commentsEdit").val() || null,
                IsRenew: $("#renew").is(":checked")||false,
                IsContractRenew: $("#contractReminder").is(":checked")||false,
                createdBy: ContractDetailsId==0?user:null,
                updatedBy: ContractDetailsId==0?null:user
            };
           
            const urlContract = ContractDetailsId === 0
                ? '@baseUrl/ContractDetailsAPI/CreateContractDetail'
                : '@baseUrl/ContractDetailsAPI/UpdateContractDetail';

            const methodTypeContract = ContractDetailsId === 0 ? "POST" : "PUT";

            $.ajax({
                type: methodTypeContract,
                url: urlContract,
                data: JSON.stringify(payloadContract),
                contentType: "application/json",
                success: function (response) {
                    if (response.isSuccess) {
                        round_success_noti(response.responseMessage);
                        resetContractForm();
                        loadContractDetails();
                    } else {
                        round_error_noti(response.responseMessage);
                    }
                    $("#btnSaveContract").prop("disabled", false);
                },
                error: function () {
                    alert("Error saving contract.");
                    $("#btnSaveContract").prop("disabled", false);
                }
            });
        });
    });

    function resetContractForm() {
        ContractDetailsId = 0;
        $("#projectEdit").val('');
        $("#startDateEdit").val('');
        $("#endDateEdit").val('');
        $("#commentsEdit").val('');
        $("#renew").prop("checked", false);
        $("#contractReminder").prop("checked", false);
        $("#btnSaveContract").prop("disabled", false);
        $("#spnProject").addClass("d-none");
        $("#spnEndDate").addClass("d-none");
        $("#spnStartDate").addClass("d-none");
    }

    function validateContractForm() {
        let isValid = true;

        if (!$("#projectEdit").val()) {
            $("#spnProject").removeClass("d-none");
            isValid = false;
        } else {
            $("#spnProject").addClass("d-none");
        }

        if (!$("#startDateEdit").val()) {
            $("#spnStartDate").removeClass("d-none");
            isValid = false;
        } else {
            $("#spnStartDate").addClass("d-none");
        }

        if (!$("#endDateEdit").val()) {
            $("#spnEndDate").removeClass("d-none");
            isValid = false;
        } else {
            $("#spnEndDate").addClass("d-none");
        }

        return isValid;
    }

     async function loadContractDetails() {
        try {
            const response = await fetch('@baseUrl/ContractDetailsAPI/GetAllContractDetails/' + CurrentEmployeeId, {
                method: 'GET',
                headers: {
                    'Accept': 'application/json'
                }
            });

            if (!response.ok) {
                console.error('HTTP error! Status: ' + response.status);
                return;
            }

            const data = await response.json();
            const tbody = $('#tableContract tbody');
            tbody.empty();

            if (data.isSuccess && data.data.length > 0) {
                ContractDetails=data.data;
                data.data.forEach(row => {
                    const startDate = formatToDDMMYYYY(row.startDate);
                    const endDate = formatToDDMMYYYY(row.endDate);
                    const createdDate = formatToDDMMYYYY(row.createdDate);

                    tbody.append(`
                        <tr>
                            <td>${row.projectName ?? '-'}</td>
                            <td>${startDate}</td>
                            <td>${endDate}</td>
                            <td>${row.comment ?? '-'}</td>
                            <td>${row.isRenew ? 'Yes' : 'No'}</td>
                            <td>${row.isContractRenew ? 'Yes' : 'No'}</td>
                            <td>${createdDate}</td>
                            <td>
                                <div class="d-flex order-actions">
                                        <a href="javascript:;" class="edit-action me-2" title="Edit" onclick="editContractDetail(${row.contractDetailsId})">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">
                                                <path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>
                                            </svg>
                                        </a>
                                        <a href="javascript:;" class="delete-action" title="Delete" onclick="deleteContractDetail(${row.contractDetailsId})">
                                            <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">
                                                <path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>
                                            </svg>
                                        </a>
                                </div>
                            </td>
                        </tr>
                    `);
                });
            } else {
                tbody.append('<tr><td colspan="8" class="text-center">No data found.</td></tr>');
            }
        } catch (error) {
            console.error('Fetch error:', error);
        }
    }


     async function bindProjectDropdown() {
        $.ajax({
            type: "GET",
            url: "@baseUrl/ProjectDetailsAPI/GetAllProjectDetails/"+CurrentCompanyId ,
            success: function (data) {
                if (data.isSuccess) {
                    var dropdown = $('#projectEdit');
                    dropdown.empty();
                    dropdown.append('<option disabled selected value="">Select</option>');
                    $.each(data.data, function (index, company) {
                        dropdown.append($('<option>', {
                            value: company.projectDetailsId,
                            text: company.projectName
                        }));
                    });
                }
            },
            error: function (xhr, status, error) {
                console.error("AJAX Error: " + status + " - " + error);
            }
        });
    }


     function editContractDetail(contractDetailsId) {
        resetContractForm();

        const rowData = ContractDetails.find(x => x.contractDetailsId === contractDetailsId);
        ContractDetailsId = contractDetailsId;

        // Set project dropdown
        $('#projectEdit').val(rowData.projectDetailsId);

        // Set dates
        $('#startDateEdit').val(rowData.startDate ? rowData.startDate.substring(0, 10) : '');
        $('#endDateEdit').val(rowData.endDate ? rowData.endDate.substring(0, 10) : '');
        $("#commentsEdit").val(rowData.comment);
        // Set checkboxes
        $('#renew').prop('checked', rowData.isRenew || false);
        $('#contractReminder').prop('checked', rowData.isContractRenew || false);
        $("#btnSaveContract").prop("disabled", false);
        // Update button text
        $('#btnSaveContract').text('Update');
    }


    function deleteContractDetail(contractDetailsId){
                if (!confirm("Are you sure you want to delete?")) {
                        return; // Cancel the delete operation
                }

            var deleteObj = {
                   id:contractDetailsId,
                deletedBy: localStorage.getItem('EmployeeId')
            };
            $.ajax({
            url: '@baseUrl/ContractDetailsAPI/DeleteContractDetail',
                type: 'DELETE',
                contentType: 'application/json',
                data: JSON.stringify(deleteObj),
                success: function (response) {
                    if (response.isSuccess) {
                        round_success_noti(response.responseMessage);
                         loadContractDetails();
                    } else {
                        round_error_noti(response.responseMessage);
                    }

                },
                error: function (error) {
                    console.log('Error deleting Contract detail!');
                }
            });
    }


     $('#btnProjectModal').on('click', function() {
            $('#spnProject').hide();
         $('#ProjectInput').val('')
        $('#btnSaveProject').prop("disabled",false);
        $('#addProjectModal').modal('show');

    });

      $('#btnSaveProject').on('click', function() {
           $('#btnSaveProject').prop("disabled",true);
        var projectName = $('#ProjectInput').val().trim();
        var projectDescription=$('#ProjectDesc').val().trim();
        if (!projectName) {
            $('#spnProject').show();
              $('#btnSaveProject').prop("disabled",false);
            return;
        } else {
            $('#spnProject').hide();
        }

        var projectPayload = {
            ProjectDetailsId:0,
            ProjectName: projectName,
            Description:projectDescription==""?null:projectDescription,
            CompanyId:CurrentCompanyId,
            createdBy: user
        };
        $.ajax({
            url: '@baseUrl/ProjectDetailsAPI/CreateProjectDetail',
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(projectPayload),
            success: function(data) {
                    if (data.isSuccess) {
                        round_success_noti(data.responseMessage);
                          bindProjectDropdown();
                        $('#addProjectModal').modal('hide'); // Hide the modal on success
                        // Optionally, refresh the country list or perform other actions
                    } else {
                        round_error_noti(data.responseMessage);
                    }
                      $('#btnSaveProject').prop("disabled",false)
            },
            error: function(xhr, status, error) {
                console.error('Error:', error);
                round_error_noti('An error occurred while adding the thana.');
            }
        });
            $('#btnSaveProject').prop("disabled",false);

    });
</script>
