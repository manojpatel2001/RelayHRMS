@inject IConfiguration Configuration
@{
	ViewData["Title"] = "Ticket Type";
	Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
	string UIBaseUrlLayout = Configuration["UIBaseUrlSettings:baseUrl"];
	var uriAPI = new Uri(baseUrl);
	string baseAPIDomainUrl = $"{uriAPI.Scheme}://{uriAPI.Host}:{uriAPI.Port}";
}
<style>
	.nav-tabs {
		border-bottom: none !important;
	}

		.nav-tabs .nav-link {
			color: #333;
			background-color: #f1f1f1;
			border: 1px solid transparent;
		}

		.nav-tabs .nav-link.active {
			color: white !important;
			background-color: #2395c6 !important;
			border-color: #2395c6 #2395c6 #fff;
		}
</style>

<div class="card">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row">
			<div class="col-6">
				<h6 class="pt-2 mb-0">
					Ticket Master
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">

					<div class="input-group ">
						<button id="addTypeBtn"
								type="button"
								class="btn mr-1 rounded-1"
								style="background-color:#2395c6; color:white;">
							Add Type
						</button>

						<button id="addPriorityBtn"
								type="button"
								class="btn mr-1 rounded-1 d-none"
								style="background-color:#2395c6; color:white;">
							Add Priority
						</button>

					</div>
				</div>
			</div>
		</div>
	</div>

	<ul class="nav nav-tabs mb-3 mt-3 ms-3" id="ticketTabs" role="tablist">
		<li class="nav-item me-2" role="presentation">
			<button class="nav-link active open-modal py-2" data-bs-toggle="tab" data-bs-target="#typeTab" type="button" role="tab" data-tabname="Type Master">
				Type Master
			</button>
		</li>
		<li class="nav-item" role="presentation">
			<button class="nav-link open-modal py-2" data-bs-toggle="tab" data-bs-target="#priorityTab" type="button" role="tab" data-tabname="Priority Master">
				Priority Master
			</button>
		</li>
	</ul>

	<div class="card-body">
		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<div id="typeGrid" class="grid-section">
						
						<div class="grid-wrapper " style="position: relative; " id="gridTagType">
							<div id="grid-loader" class="grid-loader justify-content-center align-items-center flex-column "
								 style="display: none;  inset: 0; background: rgba(255,255,255,0.6); z-index: 10; ">
								<img src="@baseAPIDomainUrl/loders/loder.png" class="grid-logo-spinner" style="width: 30px; height: 30px; animation: spin 1s linear infinite;" />
								<div class="grid-loading-text text-dark" style="font-size: 16px;">Loading...</div>

							</div>
							<div class="rowCount" id="rowCount1"></div>
							<div id="typeGridContainer"></div>
						</div>
						<div id="divNoRecord" class="text-center text-muted" style="display:none;">No Record Found!</div>
					</div>

					<div id="priorityGrid" class="grid-section d-none">
						
						<div class="grid-wrapper " style="position: relative; " id="gridTagPriority">
							<div id="grid-loader-priority" class="grid-loader justify-content-center align-items-center flex-column "
								 style="display: none;  inset: 0; background: rgba(255,255,255,0.6); z-index: 10; ">
								<img src="@baseAPIDomainUrl/loders/loder.png" class="grid-logo-spinner" style="width: 30px; height: 30px; animation: spin 1s linear infinite;" />
								<div class="grid-loading-text text-dark" style="font-size: 16px;">Loading...</div>

							</div>
							<div class="rowCount" id="rowCount2"></div>
							<div id="priorityGridContainer"></div>
						</div>
						<div id="divNoRecordPriority" class="text-center text-muted" style="display:none;">No Record Found!</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>

<div class="modal fade" id="addTicketTypeModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-md">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel"><span class="formType">Add</span> Ticket Type</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row">
					<div class="col-md-12">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="Ticket Type"
								   data-trim-input
								   id="txtTicketType" />
							<label class="floating-label" for="txtTicketType">Ticket Type<span class="text-danger">*</span></label>
						</div>
						<span id="spnTicketType" style="color:red; display:none;">Please Enter Ticket Type</span>

					</div>
				</div>
				<div class="row">
					<div class="col-md-12">
						<div class="form-group mt-3 position-relative">

							<select id="dropdownDepartment"  class="form-control floating-input">
								<option value="" selected disabled>Select Department</option>
							</select>

							<label class="floating-label" for="drpDepartment">Department Name<span class="text-danger">*</span></label>
						</div>
						<span id="spnDepartment" style="color:red; display:none;">Please Select Department Name</span>

					</div>
					
				</div>

			</div>
			<div class="modal-footer btn-heading-title">
				
				<button type="button" class="btn btn-primary" id="btnCreateTicketType" style="background-color:#2395c6; color:white;">Save</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="addTicketPriorityModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-md">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel"><span class="formType">Add</span> Ticket Priority</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row">
					<div class="col-md-12">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="Ticket Priority"
								   data-trim-input
								   id="txtTicketPriority" />
							<label class="floating-label" for="txtTicketPriority">Ticket Priority<span class="text-danger">*</span></label>
						</div>
						<span id="spnTicketPriority" style="color:red; display:none;">Please Enter Ticket Priority</span>

					</div>
				</div>
				<div class="row">
					<div class="col-md-12">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="Escalation Hours"
								   id="txtEscalationHours"
								   data-decimal  />
							<label class="floating-label" for="txtEscalationHours">Escalation Hours<span class="text-danger">*</span></label>
						</div>
						<span id="spnEscalationHours" style="color:red; display:none;">Please Enter Escalation Hours</span>

					</div>

				</div>

			</div>
			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnCreateTicketPriority" style="background-color:#2395c6; color:white;">Save</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
		const EmployeeId = localStorage.getItem("EmployeeId");
		  var Token=localStorage.getItem("authToken");
	   const savedCompany = localStorage.getItem('selectedCompany');
	   const companyDetails = JSON.parse(savedCompany || '{}');
	   const companyId = parseInt(companyDetails.CompanyId);
	let TicketTypeId=0;
	   let TicketPriorityId=0;

	$(document).ready(function () {

		BindDepartment();

		$('#ticketTabs .nav-link').on('click', function () {
			const selectedTabName = $(this).data('tabname');

			// Update active tab class
			$('#ticketTabs .nav-link').removeClass('active');
			$(this).addClass('active');

			// Show/hide buttons
			if (selectedTabName === 'Type Master') {
				$('#addTypeBtn').removeClass('d-none');
				$('#addPriorityBtn').addClass('d-none');

				$('#typeGrid').removeClass('d-none');
				$('#priorityGrid').addClass('d-none');
			} else {
				$('#addPriorityBtn').removeClass('d-none');
				$('#addTypeBtn').addClass('d-none');

				$('#priorityGrid').removeClass('d-none');
				$('#typeGrid').addClass('d-none');
			}
		});
	});



	$("#addTypeBtn").click( () => {
		 clearTicketTypeForm();
	  $("#addTicketTypeModel").modal('show');

	})

	$("#addPriorityBtn").click( () => {
			clearTicketPriorityForm();
		
	  $("#addTicketPriorityModel").modal('show');

	})

	function showTypeNoRecord()
	{
	   $("#divNoRecord").show();
		$("#gridTagType").hide();
	}
		
	function hideTypeNoRecord()
	{
	   $("#divNoRecord").hide();
		$("#gridTagType").show();
	}

	function showPriorityNoRecord()
	{
		$("#divNoRecordPriority").show();
		$("#gridTagPriority").hide();
	}
		
	function hidePriorityNoRecord()
	{
		$("#divNoRecordPriority").hide();
		$("#gridTagPriority").show();
	}
		
 function BindDepartment() {
		$.ajax({
			type: "GET",
			url: '@baseUrl/DepartmentAPI/GetAllDepartments',
			   headers: {
					   'Authorization': 'Bearer ' + Token
				   },
			success: function (response) {
				if (response.isSuccess && response.data && response.data.length > 0) {
					var $dropdown = $("#dropdownDepartment");
					$dropdown.empty(); // Clear existing options
					$dropdown.append('<option value="" selected disabled>Select</option>'); // Default option

					$.each(response.data, function (index, department) {
						$dropdown.append(
							$('<option></option>')
								.val(department.departmentId)
								.text(department.departmentName)
						);
					});
				} else {
					console.warn("Empty or invalid data:", response);
				}
			},
			error: function () {
				round_error_noti("An error occurred while fetching the department details.");
			}
		});
	}


	$(() => {
		localStorage.removeItem('ticketTypeLocalstorage');
		localStorage.removeItem('ticketPriorityLocalstorage');
		TicketTypeDataTable();
		TicketPriorityDataTable();
	});

	function TicketTypeDataTable() {
	 try {
        $('#grid-loader').addClass('d-flex').show();
	   
		 $.ajax({
			type: "GET",
			 url: '@baseUrl/TicketTypeAPI/GetAllTicketTypes/'+companyId,  // Update the URL based on the API you're using
			headers: {
					'Authorization': 'Bearer ' + Token
				},
			 success: function (data) {
				// Check if the API call was successful
				if (data.isSuccess) {
					   hideTypeNoRecord();
					$("#typeGridContainer").dxDataGrid({
						dataSource: data.data,  // Use the 'data' field from the API response
						stateStoring: { enabled: true, type: 'localStorage', storageKey: 'ticketTypeLocalstorage' },

						columns: [

								{ dataField: 'ticketTypeName', caption: 'Ticket Type Name',alignment: 'left' },
								{ dataField: 'departmentName', caption: 'Department Name',alignment: 'left' },
								   {
								   dataField: '',
								   caption: '',
								   alignment: 'center',
								   dataType: 'string',
								   format: '',
								   type: 'buttons',
								   width: '50px',
								   cellTemplate: function (container, options) {

												   var buttonElement = $('<div class="d-flex order-actions">' +
														  '<a href="javascript:;" class="edit-action" title="Update Ticket Type">' +
													   '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
													   '<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
													   '</svg>' +
													   '</a>' +
													   '</div>')
													   .on('dxclick', function () {
															  updateTicketType(options.data);
													   }).appendTo(container);

												   // Optional: update title attribute on SVG as well (for tooltip consistency)
													  buttonElement.find('svg').attr('title', 'Update Ticket Type');
								   }
							   },


							   {
								   dataField: '',
								   caption: '',
								   alignment: 'center',
								   dataType: 'string',
								   format: '',
								   type: 'buttons',
								   width: '50px',
								   cellTemplate: function (container, options) {
									   var buttonElement = $('<div class="d-flex order-actions">' +
										   '<a href="javascript:;" class="delete-action" title="Delete Ticket Type">' +
										   '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
										   '<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
										   '</svg>' +
										   '</a>' +
										   '</div>')
										   .on('dxclick', function () {
											   deleteTicketType(options.data);
										   }).appendTo(container);

									   var svgElement = buttonElement.find('svg');  // Accessing the svg element directly
									   svgElement.attr('title', 'Delete Ticket Type');
								   }
							   }
							
						],
						columnsAutoWidth: true,
						wordWrapEnabled: false,
						rowAlternationEnabled: false,
						showBorders: true,
						grouping: { autoExpandAll: true },
						paging: { pageSize: 10 },
						pager: { showPageSizeSelector: true, allowedPageSizes: [10, 25, 50, 100] },
						headerFilter: { visible: true },
						filterRow: { visible: true, applyFilter: "auto" },
						allowColumnResizing: true,
						groupPanel: { visible: true },
						searchPanel: { visible: true, width: 240, placeholder: "Search..." },
						allowColumnReordering: true,
						columnFixing: { enabled: false },
						
						onContentReady(e) {
							   $('#rowCount1').html('Total Records: ' + $("#typeGridContainer").dxDataGrid('instance').totalCount());
						}
					}).dxDataGrid('instance');
				} else {
					   showTypeNoRecord();
					// Handle failure case
					
				}
					  $('#grid-loader').removeClass('d-flex').hide();

			},
			error: function (xhr, status, error) {
				  $('#grid-loader').removeClass('d-flex').hide();

				// Handle any errors that occurred during the AJAX request
				console.error("AJAX Error: " + status + " - " + error);

			}
		});

	  } catch (e)
	  {
		   console.error("Error in TicketPriorityDataTable:", e);
		   $('#grid-loader').removeClass('d-flex').hide();
		   showPriorityNoRecord();
	  }
}

	function TicketPriorityDataTable() {
		$('#grid-loader-priority').addClass('d-flex').show();
		$.ajax({
			type: "GET",
			url: '@baseUrl/TicketPriorityAPI/GetAllTicketPriority/'+companyId,  // Update the URL based on the API you're using
			headers: {
				'Authorization': 'Bearer ' + Token
			},
			success: function (data) {
				// Check if the API call was successful
				if (data.isSuccess) {
						hidePriorityNoRecord();
					$("#priorityGridContainer").dxDataGrid({
						dataSource: data.data,  // Use the 'data' field from the API response
						stateStoring: { enabled: true, type: 'localStorage', storageKey: 'ticketPriorityLocalstorage' },

						columns: [

								{ dataField: 'ticketPriorityName', caption: 'Ticket Priority Name',alignment: 'left' },
								{ dataField: 'escalationHours', caption: 'Escalation Hours' ,alignment: 'left'},
							   {
								   dataField: '',
								   caption: '',
								   alignment: 'center',
								   dataType: 'string',
								   format: '',
								   type: 'buttons',
								   width: '50px',
								   cellTemplate: function (container, options) {

									   var buttonElement = $('<div class="d-flex order-actions">' +
											  '<a href="javascript:;" class="edit-action" title="Edit Ticket Priority">' +
										   '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
										   '<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
										   '</svg>' +
										   '</a>' +
										   '</div>')
										   .on('dxclick', function () {
												  updateTicketPriority(options.data);
										   }).appendTo(container);

									   // Optional: update title attribute on SVG as well (for tooltip consistency)
										  buttonElement.find('svg').attr('title', 'Edit Ticket Priority');
								   }
						   },
							   {
								   dataField: '',
								   caption: '',
								   alignment: 'center',
								   dataType: 'string',
								   format: '',
								   type: 'buttons',
								   width: '50px',
								   cellTemplate: function (container, options) {
									   var buttonElement = $('<div class="d-flex order-actions">' +
										   '<a href="javascript:;" class="delete-action" title="Delete Ticket Priority">' +
										   '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
										   '<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
										   '</svg>' +
										   '</a>' +
										   '</div>')
										   .on('dxclick', function () {
											   deleteTicketPriority(options.data);
										   }).appendTo(container);

									   var svgElement = buttonElement.find('svg');  // Accessing the svg element directly
									   svgElement.attr('title', 'Delete Ticket Priority');
								   }
							   }
							
							
						],
						columnsAutoWidth: true,
						wordWrapEnabled: false,
						rowAlternationEnabled: false,
						showBorders: true,
						grouping: { autoExpandAll: true },
						paging: { pageSize: 10 },
						pager: { showPageSizeSelector: true, allowedPageSizes: [10, 25, 50, 100] },
						headerFilter: { visible: true },
						filterRow: { visible: true, applyFilter: "auto" },
						allowColumnResizing: true,
						groupPanel: { visible: true },
						searchPanel: { visible: true, width: 240, placeholder: "Search..." },
						allowColumnReordering: true,
						columnFixing: { enabled: false },
						
						onContentReady(e) {
							$('#rowCount2').html('Total Records: ' + $("#priorityGridContainer").dxDataGrid('instance').totalCount());
						}
					}).dxDataGrid('instance');
				} else {
						showPriorityNoRecord();
					// Handle failure case
					
				}
					 $('#grid-loader-priority').removeClass('d-flex').hide();
			},
			error: function (xhr, status, error) {
						$('#grid-loader-priority').removeClass('d-flex').hide();
				// Handle any errors that occurred during the AJAX request
				console.error("AJAX Error: " + status + " - " + error);
				
			}
		});
	}

	function clearTicketTypeForm()
	{
			TicketTypeId=0
		$('#txtTicketType').val("");
		$('#dropdownDepartment').val("");
		$("#btnCreateTicketType").prop("disabled", false);
		$('.formType').text('Add');
		$('#btnCreateTicketType').text('Save');
		   $('#spnTicketType').hide();
		  $('#spnDepartment').hide();
	}


	$('#btnCreateTicketType').click(function () {
		$("#btnCreateTicketType").prop("disabled", true);
		let isValid = true;

		const ticketType = $('#txtTicketType').val();
		const departmentId = $('#dropdownDepartment').val();

		// Validation
		if (ticketType === '') {
			$('#spnTicketType').show();
			isValid = false;
		} else {
			$('#spnTicketType').hide();
		}
		if (!departmentId) {
		   $('#spnDepartment').show();
			isValid = false;
		}
		else{
			   $('#spnDepartment').hide();
		}

		if (!isValid) {
			$("#btnCreateTicketType").prop("disabled", false);
			return;
		}

		const data = {
			ticketTypeId:TicketTypeId==0?0:TicketTypeId,
			ticketTypeName: ticketType,
			departmentId: departmentId,
			CompanyId:companyId,
			createdBy: TicketTypeId==0?EmployeeId:null,
			updatedBy:TicketTypeId==0?null:EmployeeId
		};

		 typeUrl=TicketTypeId==0?'@baseUrl/TicketTypeAPI/CreateTicketType':'@baseUrl/TicketTypeAPI/UpdateTicketType';
		 TypeMethod=TicketTypeId==0?"POST":"PUT";
		$.ajax({
			url: typeUrl,
			type: TypeMethod,
			contentType: 'application/json',
			headers: {
						'Authorization': 'Bearer ' + Token
					},
			data: JSON.stringify(data),
			success: function (response) {
				if(response.isSuccess)
				{
				  round_success_noti(response.responseMessage);
				}
				else
				{
					round_error_noti(response.responseMessage)
				}

				$('#addTicketTypeModel').modal('hide');	
				TicketTypeDataTable(); // optional: reload list
			},
			error: function (xhr, status, error) {
				$("#btnCreateTicketType").prop("disabled", false);
				round_error_noti("Error while creating ticket type");
			}
			
				
			
		});
	});

	
	function updateTicketType(data) {
			clearTicketTypeForm();
		$('#txtTicketType').val(data.ticketTypeName||"");
		$('#dropdownDepartment').val(data.departmentId||"");

		$('.formType').text('Update');
		$('#btnCreateTicketType').text('Update');
		TicketTypeId = data.ticketTypeId;

		// Show the modal
		$('#addTicketTypeModel').modal('show');
	}

	   function deleteTicketType(data)
	   {
		  if (!confirm("Are you sure you want to delete this ticket type?")) 
		  {
			   return; // Cancel the delete operation
		   }

		   var deleteObj = {
			   id: data.ticketTypeId,
			   deletedBy: EmployeeId // Set this if you have a logged-in user ID
		   };

		   $.ajax({
			  url: '@baseUrl/TicketTypeAPI/DeleteTicketType',
			   type: 'DELETE',
			   contentType: 'application/json',
			   headers: {
				   'Authorization': 'Bearer ' + Token
			   },
			   data: JSON.stringify(deleteObj),
			   success: function (response) {
				   if(response.isSuccess)
				   {
					 round_success_noti(response.responseMessage);
				   }
				   else
				   {
					   round_error_noti(response.responseMessage)
				   }
				TicketTypeDataTable();
			   },
			   error: function (error) {
					  console.log(error);
			   }
		   });
	   }

	   $(document).ready(function () {
		   // Optional: Clear form on modal close
		  $('#addTicketTypeModel').on('hidden.bs.modal', function () {
				  clearTicketTypeForm();
		   });
	   });

	   function clearTicketPriorityForm()
		{
				$("#btnCreateTicketPriority").prop("disabled", false);
			$('#txtTicketPriority').val('');
				$('#txtEscalationHours').val('');
			$('#spnTicketPriority').hide();
				$('#spnEscalationHours').hide();
				$('.formType').text('Add');
			 $('#btnCreateTicketPriority').text('Save');
				TicketPriorityId = 0;
	   }


		$('#btnCreateTicketPriority').click(function () {
			$("#btnCreateTicketPriority").prop("disabled", true);
		    let isValid = true;

			const ticketPriority = $('#txtTicketPriority').val();
			const escalationHours = $('#txtEscalationHours').val();

			if (ticketPriority === '') 
			{
				   $('#spnTicketPriority').show();
				isValid = false;
			} 
			else 
			{
				   $('#spnTicketPriority').hide();
			}

			if (escalationHours === '')
			{
				 $('#spnEscalationHours').show();
			   isValid = false;
		    }
		   else{
			 $('#spnEscalationHours').hide();
		   }

		   if (!isValid) {
			 $("#btnCreateTicketPriority").prop("disabled", false);
			   return;
		   }
				typeUrl=TicketPriorityId==0?'@baseUrl/TicketPriorityAPI/CreateTicketPriority':'@baseUrl/TicketPriorityAPI/UpdateTicketPriority';
				  TypeMethod=TicketPriorityId==0?"POST":"PUT";
		   const data = {
			   ticketPriorityId:TicketPriorityId==0?0:TicketPriorityId,
			   ticketPriorityName: ticketPriority,
			   escalationHours: escalationHours,
				CompanyId:companyId,
				   createdBy: TicketPriorityId==0?EmployeeId:null,
					updatedBy:TicketPriorityId==0?null:EmployeeId
		   };

		   $.ajax({
				url: typeUrl,
				type: TypeMethod,
			   contentType: 'application/json',
				 headers: {
					'Authorization': 'Bearer ' + Token
				},
			   data: JSON.stringify(data),
			   success: function (response) {
				   if(response.isSuccess)
				   {
					 round_success_noti(response.responseMessage);
				   }
				   else
				   {
					   round_error_noti(response.responseMessage)
				   }
					  $('#addTicketPriorityModel').modal('hide');
					  TicketPriorityDataTable(); // optional: reload list
			   },
			   error: function (xhr, status, error) {
					   $("#btnCreateTicketPriority").prop("disabled", false);
					  round_error_noti("Error while creating ticket priority");
			   }
			   
			   
		   });
	   });


		function updateTicketPriority(data)
		{
				clearTicketPriorityForm();
			  $('#txtTicketPriority').val(data.ticketPriorityName);
				  $('#txtEscalationHours').val(data.escalationHours);

		       $('.formType').text('Update');
			  $('#btnCreateTicketPriority').text('Update');
			  TicketPriorityId = data.ticketPriorityId;

		   // Show the modal
			  $('#addTicketPriorityModel').modal('show');
	    }

	    function deleteTicketPriority(data)
		  {
			 if (!confirm("Are you sure you want to delete this ticket priority?"))
			 {
				  return; // Cancel the delete operation
			 }

			  var deleteObj = {
				  id: data.ticketPriorityId,
				  deletedBy: EmployeeId // Set this if you have a logged-in user ID
			  };

			  $.ajax({
				  url: '@baseUrl/TicketPriorityAPI/DeleteTicketPriority',
				  type: 'DELETE',
				  contentType: 'application/json',
					headers: {
						'Authorization': 'Bearer ' + Token
					},
				  data: JSON.stringify(deleteObj),
				  success: function (response) {
						if(response.isSuccess)
					  {
						round_success_noti(response.responseMessage);
					  }
					  else
					  {
						  round_error_noti(response.responseMessage)
					  }
					  TicketPriorityDataTable();
				  },
				  error: function (error) {
						console.log('Error deleting ticket priority!');
				  }
			  });
		  }

		  $(document).ready(function () {
			  // Optional: Clear form on modal close
				$('#addTicketPriorityModel').on('hidden.bs.modal', function () {
						clearTicketPriorityForm();
			  });
		  });

</script>
