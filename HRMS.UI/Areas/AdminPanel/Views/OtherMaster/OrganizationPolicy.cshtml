@inject IConfiguration Configuration
@{
	ViewData["Title"] = "Organization Policy";
	Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
}


<div class="card">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row">
			<div class="col-6">
				<h6 class="pt-2 mb-0">
					Organization Policy
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">
					<i class="fadeIn animated bx bx-refresh" id="refreshData" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Refresh Data"></i>
				</div>
			</div>
		</div>
	</div>
	<div class="card-body">
		<div class="row">
			<div class="col-md-12 btn-heading-title">
				<div class="input-group mb-2">
					<button id="addOrganizationPolicy"
							type="button"
							class="btn mr-1 rounded-1"
							style="background-color:#2395c6; color:white;">
						Add Organization Policy
					</button>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<div class="rowCount" id="rowCount1"></div>
					<div id="gridContainer">
						@* <div class="spinner-border text-primary" role="status">
							<span class="visually-hidden">Loading...</span>
						</div> *@
						<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>
					</div>

				</div>
			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="addOrganizationPolicyModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel"><span class="formType">Create</span> Organization Policy</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row">
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="Title"
								   id="txtTitle" />
							<label class="floating-label" for="txtTitle">Title</label>
							<span id="spnTitle" style="color:red; display:none;">Please Enter Organization Policy Name</span>

						</div>
					</div>
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="Tool Tip"
								   id="txtToolTip" />
							<span id="spnToolTip" style="color:red; display:none;">Please Enter Tool tip</span>
							<label class="floating-label" for="txtToolTip">Tool Tip</label>
						</div>
					</div>
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<input type="date"
								   class="form-control floating-input"
								   placeholder="From Date"
								   id="txtFromDate" />
							<label class="floating-label" for="txtFromDate">From Date</label>

						</div>
					</div>
				</div>

				<div class="row">
					<div class="col-md-3">
						<div class="form-group mt-3 position-relative">
							<input type="Date"
								   class="form-control floating-input"
								   placeholder="To Date"
								   id="txtToDate" />
							<label class="floating-label" for="txtToDateRegistrationCertificateNo">To Date</label>

						</div>
					</div>
					<div class="col-md-3">
						<div class="form-group mt-3 position-relative">
							<input type="number"
								   class="form-control floating-input"
								   placeholder="Sorting"
								   id="txtSorting"
								   step="1"
								   min="0"
								   oninput="this.value = this.value.replace(/[^0-9]/g, '')" />
							<label class="floating-label" for="txtSorting">Sorting</label>
						</div>
					</div>

					
					<div class="col-md-6">
						<div class="row">
							<div class="col-md-6">
								<div class="form-group mt-3 position-relative">
									<input type="file" class="form-control floating-input" id="txtUploadDocument" />
									<label class="floating-label" for="txtUploadDocument">Upload Document</label>
								</div>
							</div>
							<div class="col-md-6">
								<div class="form-group mt-2 position-relative">
									<small id="uploadMessage" class="form-text mt-1"></small>
									<button type="button" class="btn btn-primary mt-2" id="btnUpload" style="background-color:#2395c6; color:white;" >Upload</button>
									<button type="button" class="btn btn-danger mt-2 d-none" id="btnRemove" onclick="removeFile()">Remove</button>
								</div>
							</div>
						</div>
						
					</div>


				</div>


				<div class="row">
					<div class="col-md-2">
						<div class="form-group mt-3 position-relative">
							Grouping:
						</div>
					</div>
					<div class="col-md-2">
						<div class="form-group mt-3 position-relative">
							<label>All</label>
							<input type="checkbox"
								   class="form-control-input"
								   placeholder=""
								   id="txtAll" />
						</div>

					</div>
					<div class="col-md-2">
						<div class="form-group mt-3 position-relative">
							<label>Employee</label>
							<input type="checkbox"
								   class="form-control-input"
								   placeholder=""
								   id="txtEmployee" />
						</div>
					</div>

					<div class="col-md-2">
						<div class="form-group mt-3 position-relative">
							<label>New Joinig</label>
							<input type="checkbox"
								   class="form-control-input"
								   placeholder=""
								   id="txtNewJoinig" />
						</div>
					</div>

					<div class="col-md-2">
						<div class="form-group mt-3 position-relative">
							<label>Department</label>
							<input type="checkbox"
								   class="form-control-input"
								   placeholder=""
								   id="txtDepartment" />
						</div>
					</div>

					<div class="col-md-2">
						<div class="form-group mt-3 position-relative">
							<label>Recruitment Docs</label>
							<input type="checkbox"
								   class="form-control-input"
								   placeholder=""
								   id="txtRecruitmentDocs" />
						</div>
					</div>

					

				</div>

			</div>
			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnCreateBranch" style="background-color:#2395c6; color:white;">Create</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>



<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>

<script>
	let OrganizationPolicyId=0;
	let DocumentUrl=null;
	let uploadedDocument = null;

	$(() => {
		 localStorage.removeItem('organizationPolicyLocalstorage');
		loadDataTable();
	});

	$("#refreshData").click( () => {
		 localStorage.removeItem('organizationPolicyLocalstorage');
		 resetGridFilters( $('#gridContainer').dxDataGrid('instance'));
	     loadDataTable();
	})

   function resetGridFilters(gridInstance) {
		if (gridInstance) {
			gridInstance.clearFilter();            // Clear all filters
			gridInstance.clearSorting();           // Clear all sorting
			
		}
	}


	function loadDataTable() 
	{

		$.ajax({
			type: "GET",
			 url: '@baseUrl/OrganizationPolicyAPI/GetAllOrganizationPolicy',
			success: function (data) {
				$("#gridContainer").dxDataGrid({
					dataSource: data.data,
					stateStoring: { enabled: true, type: 'localStorage', storageKey: 'organizationPolicyLocalstorage' },

					columns: [

						
						{ dataField: 'organizationPolicyName', caption: 'Policy Name', alignment: 'center', dataType: 'string' },
						{ dataField: 'toolTip', caption: 'Tooltip', alignment: 'center', dataType: 'string' },
						   { dataField: 'fromDate', caption: 'From Date', alignment: 'center', dataType: 'date',format: 'dd/MM/yyyy' },
						   { dataField: 'toDate', caption: 'To Date', alignment: 'center', dataType: 'date',format: 'dd/MM/yyyy' },
						{ dataField: 'sorting', caption: 'Sorting', alignment: 'center', dataType: 'number' },
						{ dataField: 'grouping', caption: 'Grouping', alignment: 'center', dataType: 'string' },
						// { dataField: 'groupingValue', caption: 'Grouping Value', alignment: 'center', dataType: 'string' },
						{
						  dataField: 'documentUrl',
						  caption: 'Document',
						  alignment: 'center',
						  cellTemplate: function (container, options) {
							if (options.value) {
							  $("<a>")
								.attr("href", options.value)
								.attr("target", "_blank")
								.text("View")
								.appendTo(container);
							} else {
							  container.text("No Document");
							}
						  }
						},

						// { dataField: 'createdDate', caption: 'Created Date', alignment: 'center', dataType: 'datetime' },
						// { dataField: 'createdBy', caption: 'Created By', alignment: 'center', dataType: 'string' },
						{
							dataField: 'isEnabled',
							caption: 'Status',
							alignment: 'center',
							dataType: 'string',
							calculateCellValue: function (data) {
								return data.isEnabled ? "Active" : "Inactive"; // Based on isEnabled field value
							}
						},

						 {
							 dataField: '',
							 caption: '',
							 alignment: 'center',
							 dataType: 'string',
							 format: '',
							 type: 'buttons',
							 width: '50px',
							 cellTemplate: function (container, options) {

								 var buttonElement = $('<div class="d-flex order-actions">' +
									  '<a href="javascript:;" class="edit-action" title="Update Organization Policy">' +
									 '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
									 '<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
									 '</svg>' +
									 '</a>' +
									 '</div>')
									 .on('dxclick', function () {
										 updateOrganizationPolicy(options.data);
									 }).appendTo(container);

								 var svgElement = buttonElement.find('svg');  // Accessing the svg element directly

								 svgElement.attr('title', 'Update Organization Policy');
							 }
						 },

						 {
							 dataField: '',
							 caption: '',
							 alignment: 'center',
							 dataType: 'string',
							 format: '',
							 type: 'buttons',
							 width: '50px',
							 cellTemplate: function (container, options) {

								 var buttonElement = $('<div class="d-flex order-actions">' +
									  '<a href="javascript:;" class="delete-action" title="Delete Organization Policy">' +
									 '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
									 '<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
									 '</svg>' +
									 '</a>' +
									 '</div>')
									 .on('dxclick', function () {
										 deleteOrganizationPolicy(options.data);
									 }).appendTo(container);

								 var svgElement = buttonElement.find('svg');  // Accessing the svg element directly

								 svgElement.attr('title', 'Delete Organization Policy');
							 }
						 }

					],
					columnsAutoWidth: true,
					wordWrapEnabled: false,
					rowAlternationEnabled: false,
					showBorders: true,
					grouping: { autoExpandAll: true },
					paging: { pageSize: 10 },
					pager: { showPageSizeSelector: true, allowedPageSizes: [10, 25, 50, 100] },
					headerFilter: { visible: true },
					filterRow: { visible: true, applyFilter: "auto" },
					allowColumnResizing: true,
					groupPanel: { visible: true },
					searchPanel: { visible: true, width: 240, placeholder: "Search..." },
					allowColumnReordering: true,
					columnFixing: { enabled: false },
					onExporting: function (e) {
						e.component.beginUpdate();
						e.component.columnOption("Button", "visible", false);
						e.component.columnOption("Add", "visible", false);
					},
					onExported: function (e) {
						e.component.columnOption("Button", "visible", true);
						e.component.columnOption("Add", "visible", true);
						e.component.endUpdate();
					},
					onCellPrepared: function (e) {
						if (e.rowType === "header" || e.rowType === "group") {
							e.cellElement.css("text-align", "center");
							if (e.rowType === "header") {
								e.cellElement.css("font-weight", "bold");
							}
						}
					},
					onContentReady(e) {
						$('.rowCount').html('Total Records: ' + $("#gridContainer").dxDataGrid('instance').totalCount());
					}
				}).dxDataGrid('instance');
			}
		});
	}



	 $("#addOrganizationPolicy").click( () => {
		  $('.formType').text('Create');
		 $("#btnCreateBranch").prop("disabled", false);
		 $('#btnCreateBranch').text('Create');
	  $("#addOrganizationPolicyModel").modal('show');
	
	})


	$('#btnUpload').click(function () {
		const file = $('#txtUploadDocument')[0].files[0];
		const allowedExtensions = ['.pdf', '.doc', '.docx', '.txt'];
		const $message = $('#uploadMessage');

		if (!file) {
			$message.text('Please select a document.').removeClass('text-success').addClass('text-danger');
			return;
		}

		const extension = file.name.substring(file.name.lastIndexOf('.')).toLowerCase();
		if (!allowedExtensions.includes(extension)) {
			$message.text('Invalid file type. Only PDF, DOC, DOCX, TXT allowed.')
					.removeClass('text-success').addClass('text-danger');
			return;
		}
		uploadedDocument = file;
		$message.text('Uploaded').removeClass('text-danger').addClass('text-success');
		$('#btnUpload').addClass('d-none');
		$('#btnRemove').removeClass('d-none');
	});

	//Remove uploaded document
	$('#btnRemove').click(function () {
		removeFile();
	});
	function removeFile(){
		uploadedDocument = null;
		$('#txtUploadDocument').val('');
		$('#uploadMessage').text('');
		$('#btnUpload').removeClass('d-none');
		$('#btnRemove').addClass('d-none');
	}

	
	// Clear all inputs
	function clearForm() {
		$('#txtTitle, #txtToolTip, #txtFromDate, #txtToDate, #txtSorting, #txtUploadDocument').val('');
		$('#txtAll, #txtEmployee, #txtNewJoinig, #txtDepartment, #txtRecruitmentDocs').prop('checked', false);
		$('#spnTitle, #spnToolTip').hide();
		$('#uploadMessage').text('');
		DocumentFile=null;
		OrganizationPolicyId=0;
		removeFile(); // Reset upload UI
	}

    $('#txtAll').change(function () {
		if ($(this).is(':checked')) {
			// Uncheck others
			$('#txtEmployee, #txtNewJoinig, #txtDepartment, #txtRecruitmentDocs').prop('checked', false);
		}
	});

	$('#txtEmployee, #txtNewJoinig, #txtDepartment, #txtRecruitmentDocs').change(function () {
		if ($(this).is(':checked')) {
			// Uncheck "All"
			$('#txtAll').prop('checked', false);
		}
	});

	// On Create button click
	$('#btnCreateBranch').click(function () 
	{
		$("#btnCreateBranch").prop("disabled", true);
		let isValid = true;
		const title = $('#txtTitle').val().trim();
		const tooltip = $('#txtToolTip').val().trim();
		const fromDate = $('#txtFromDate').val();
		const toDate = $('#txtToDate').val();
		const sorting = $('#txtSorting').val();

		const all = $('#txtAll').is(':checked');
		const employee = $('#txtEmployee').is(':checked');
		const newJoinig = $('#txtNewJoinig').is(':checked');
		const department = $('#txtDepartment').is(':checked');
		const recruitmentDocs = $('#txtRecruitmentDocs').is(':checked');

		let selectedOptions = [];

		if ($('#txtAll').is(':checked')) selectedOptions.push('All');
		if ($('#txtEmployee').is(':checked')) selectedOptions.push('Employee');
		if ($('#txtNewJoinig').is(':checked')) selectedOptions.push('New Joining');
		if ($('#txtDepartment').is(':checked')) selectedOptions.push('Department');
		if ($('#txtRecruitmentDocs').is(':checked')) selectedOptions.push('Recruitment Docs');

		let grouping = selectedOptions.join(',');

		// Validation
		if (title === '') {
			$('#spnTitle').show();
			isValid = false;
		} else {
			$('#spnTitle').hide();
		}

		if (tooltip === '') {
			$('#spnToolTip').show();
			isValid = false;
		} else {
			$('#spnToolTip').hide();
		}

		// Add more validations if required (e.g., fromDate, toDate, sorting)

		if (!isValid) 
		{
			 $("#btnCreateBranch").prop("disabled", false);
			 return;
		}

		var formData = new FormData();
		
		formData.append("OrganizationPolicyId", OrganizationPolicyId === 0 ? 0 : OrganizationPolicyId);
		formData.append("organizationPolicyName", title);
		formData.append("tooltip", tooltip);
		formData.append("fromDate", fromDate);
		formData.append("toDate", toDate);
		formData.append("sorting", sorting);
		formData.append("grouping", grouping);
		formData.append("createdBy", OrganizationPolicyId === 0 ? null : null);
		formData.append("upDatedBy", OrganizationPolicyId === 0 ? null : null);
		formData.append("documentUrl", OrganizationPolicyId === 0 ? null : DocumentUrl);
		// append file only if exists
		if (uploadedDocument) {
			formData.append("documentFile", uploadedDocument);
		}

		// Send via AJAX
		$.ajax({
			 url: '@baseUrl/OrganizationPolicyAPI/CreateOrganizationPolicy',
			method: 'POST',
			data: formData,
			processData: false,
			contentType: false, // important to allow file upload
			success: function (response) {
				 if(response.isSuccess)
				 {
				   round_success_noti(response.responseMessage);
				 }
				 else
				 {
					 round_error_noti(response.responseMessage)
				 }
				   $("#btnCreateBranch").prop("disabled", false);
				clearForm();
				loadDataTable();
				$('#addOrganizationPolicyModel').modal('hide');
			},
			error: function (error) {
				 round_error_noti('Unable to add policy!');
			}
		});

		
	});


	 function updateOrganizationPolicy(data)
	 {
		  $('.formType').text('Update');
		  $("#btnCreateBranch").prop("disabled", false);
		 $('#btnCreateBranch').text('Update');
		 // Set text/hidden input values
		$('#txtTitle').val(data.organizationPolicyName);
		$('#txtToolTip').val(data.toolTip);
		$('#txtFromDate').val(formatDate(data.fromDate));
        $('#txtToDate').val(formatDate(data.toDate));
		$('#txtSorting').val(data.sorting);

		// Clear all checkboxes first
		$('#txtAll, #txtEmployee, #txtNewJoinig, #txtDepartment, #txtRecruitmentDocs').prop('checked', false);

		// Set checkboxes from grouping string (comma-separated values)
		if (data.grouping) {
			const groupings = data.grouping.split(',');
			groupings.forEach(function (item) {
				switch (item.trim()) {
					case 'All': $('#txtAll').prop('checked', true); break;
					case 'Employee': $('#txtEmployee').prop('checked', true); break;
					case 'NewJoining': $('#txtNewJoinig').prop('checked', true); break;
					case 'Department': $('#txtDepartment').prop('checked', true); break;
					case 'RecruitmentDocs': $('#txtRecruitmentDocs').prop('checked', true); break;
				}
			});
		}

		// If you want to show uploaded file name (optional)
		DocumentUrl=data.documentUrl;

		// Store ID if needed for update
		OrganizationPolicyId=data.organizationPolicyId; // hidden input
	   $("#addOrganizationPolicyModel").modal('show');

	 }


    function formatDate(dateString) {
		if (!dateString) return '';

		const date = new Date(dateString);
		const year = date.getFullYear();
		const month = String(date.getMonth() + 1).padStart(2, '0');
		const day = String(date.getDate()).padStart(2, '0');

		return `${year}-${month}-${day}`;
	}

	function deleteOrganizationPolicy(data) 
	{
		if (!confirm("Are you sure you want to delete this policy?")) {
			return; // Cancel the delete operation
		}

		var deleteObj = {
			id: data.organizationPolicyId,
			deletedBy: null // Set this if you have a logged-in user ID
		};

		$.ajax({
			 url: '@baseUrl/OrganizationPolicyAPI/DeleteOrganizationPolicy',
			type: 'DELETE',
			contentType: 'application/json',
			data: JSON.stringify(deleteObj),
			success: function (response) {
				 if(response.isSuccess)
				 {
				   round_success_noti(response.responseMessage);
				 }
				 else
				 {
					 round_error_noti(response.responseMessage)
				 }
				loadDataTable();
			},
			error: function (error) {
				 round_error_noti('Error deleting policy!');
			}
		});
	}



	$(document).ready(function () {
		// Optional: Clear form on modal close
		$('#addOrganizationPolicyModel').on('hidden.bs.modal', function () {
			clearForm();
		});
	});




</script>
