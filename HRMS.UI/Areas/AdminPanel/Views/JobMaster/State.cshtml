@inject IConfiguration Configuration
@{
	ViewData["Title"] = "ManageState";
	Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
}
<style>
	.nav-tabs {
		border-bottom: none !important;
	}

		.nav-tabs .nav-link {
			color: #333;
			background-color: #f1f1f1;
			border: 1px solid transparent;
		}

			.nav-tabs .nav-link.active {
				color: white !important;
				background-color: #2395c6 !important;
				border-color: #2395c6 #2395c6 #fff;
			}
</style>

@* <div class="card">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row">
			<div class="col-6">
				<h6 class="pt-2 mb-0">
					Manage State
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">
					<i class="fadeIn animated bx bx-refresh" id="getData" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Refresh Data"></i>
				</div>
			</div>
		</div>
	</div>
	<div class="card-body">
		<div class="row">
			<div class="col-md-12 btn-heading-title">
				<div class="input-group mb-2">
					<button id="addState"
							type="button"
							class="btn mr-1 rounded-1"
							style="background-color:#2395c6; color:white;">
						Add State
					</button>
				</div>
			</div>
		</div>
		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<div class="rowCount" id="rowCount1"></div>
					<div id="gridContainer">
						<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>
					</div>

				</div>
			</div>
		</div>
	</div>
</div>
 *@

<div class="card">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row">
			<div class="col-6">
				<h6 class="pt-2 mb-0">
					Manage State
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">
					<i class="fadeIn animated bx bx-refresh" id="refreshData" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Refresh Data"></i>
				</div>
			</div>
		</div>
	</div>

	<div class="d-flex justify-content-between align-items-center mb-3 mt-3 ms-3">
		<ul class="nav nav-tabs" id="manageSateTabs" role="tablist">
			<li class="nav-item me-2" role="presentation">
				<button class="nav-link active open-modal py-2" data-bs-toggle="tab" data-bs-target="#typeTab" type="button" role="tab" data-tabname="Manage State">
					Manage State
				</button>
			</li>
			<li class="nav-item" role="presentation">
				<button class="nav-link open-modal py-2" data-bs-toggle="tab" data-bs-target="#priorityTab" type="button" role="tab" data-tabname="Manage City">
					Manage City
				</button>
			</li>
		</ul>

		@* <!-- Right-side button -->
		<button class="btn btn-primary btn-sm ms-auto me-3" id="addCityCategoryBtn" style="background-color:#2395c6; color:white;">
			<i class="bi bi-plus"></i> Manage City Category
		</button> *@
	</div>


	<div class="card-body">
		<div class="row me-3">
			<div class="col-md-12 btn-heading-title">
				<div class="input-group mb-2">
					<button id="addState"
							type="button"
							class="btn mr-1 rounded-1"
							style="background-color:#2395c6; color:white;">
						Add State
					</button>

					<button id="addCity"
							type="button"
							class="btn mr-1 rounded-1 d-none"
							style="background-color:#2395c6; color:white;">
						Add City
					</button>
				</div>
			</div>
		</div>

		<div class="row">
			<div class="col-md-12">
				<div class="form-group">
					<div id="StateGrid" class="grid-section ">
						<div class="rowCount" id="rowCount1"></div>
						<div id="gridContainer">
							<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
								<div class="spinner-border text-primary" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
							</div>
						</div>
					</div>

					<div id="CityGrid" class="grid-section d-none">
						<div class="rowCount" id="rowCount2"></div>
						<div id="gridContainerCity">
							<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
								<div class="spinner-border text-primary" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
							</div>
						</div>
					</div>

				</div>

			
			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="addStateModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel"><span class=".FormType">Create</span> State</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row">
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="State Name"
								   id="txtStatetName" />
							<label class="floating-label" for="txtStatetName">State Name<span class="required-star">*</span></label>
						</div>
						<span id="spnStateName" style="color:red; display:none;">Please Enter State Name</span>

					</div>
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<select id="drpCountry" class="form-select floating-input">
								<option selected disabled value="">Select</option>
								
								<option value="India">India</option>
								
							</select>
							<label class="floating-label" for="drpCountry">Country Name<span class="required-star">*</span></label>
						</div>
						<span id="spnCountry" style="color:red; display:none;">Please Select Country.</span>

					</div>
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">

							<select id="drpDeduction" class="form-select floating-input">
								<option selected disabled value="">Select</option>
								<option value="Monthly">Monthly</option>
								<option value="Quaterly">Quaterly</option>
								<option value="Half Yearly">Half Yearly</option>
								<option value="Yearly">Yearly</option>
							</select>
							<label class="floating-label" for="drpDeduction">Deduction Type</label>
						</div>
					</div>
				</div>


				<div class="row">
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="PT Deduction Month"
								   id="txtMonth" />
							<label class="floating-label" for="txtMonth">PT Deduction Month</label>
						</div>
					</div>

					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="Enrollment Certificate No"
								   id="txtCertificateno" />
							<label class="floating-label" for="txtCertificateno">Enrollment Certificate No</label>
						</div>

					</div>
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="ESIC State Code"
								   id="txtesicStatecode" />
							<label class="floating-label" for="txtesicStatecode">ESIC State Code</label>
						</div>
					</div>
				</div>
				<div class="row">
					<div class="col-md-4">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="ESIC Registered Office Address"
								   id="txtAddress" />
							<label class="floating-label" for="txtAddress">ESIC Registered Office Address</label>
						</div>
					</div>

					<div class="col-md-8">
						<div class="form-group mt-3 position-relative">
							<label>Applicable PT Setting For Male/Female</label>
							<input type="checkbox"
								   class="form-control-input"
								   placeholder=""
								   id="txtActive" />
						</div>

					</div>
				</div>

			</div>
			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnCreateState" style="background-color:#2395c6; color:white;">Create</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="addCityModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-md">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel">
					<span class="formType">Create</span> City
				</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row">
					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<input type="text" class="form-control floating-input" placeholder="City Name" id="txtCityName" />
							<label class="floating-label" for="txtCityName">City Name<span class="required-star">*</span></label>
						</div>
						<span id="spnCityName" style="color:red; display:none;">Please Enter City Name</span>
					</div>

					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<select id="dropdownState" class="form-select floating-input">
								<option value="" selected disabled>Select</option>
								<!-- States will be populated dynamically -->
							</select>
							<label class="floating-label" for="dropdownState">State<span class="required-star">*</span></label>
						</div>
						<span id="spnCityState" style="color:red; display:none;">Please Select State</span>
					</div>
				</div>

				<div class="row">
					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<select id="drpCityCountry" class="form-select floating-input">
								<option selected disabled value="">Select</option>
								<option value="India">India</option>
							</select>
							<label class="floating-label" for="drpCityCountry">Country Name<span class="required-star">*</span></label>
						</div>
						<span id="spnCityCountry" style="color:red; display:none;">Please Select Country.</span>
					</div>

					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<textarea class="form-control floating-input" placeholder="Remarks" id="txtRemarks"></textarea>
							<label class="floating-label" for="txtRemarks">Remarks</label>
						</div>
					</div>
				</div>

				<!-- Optional City Category (commented) -->
				<!--
				<div class="row">
					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<select id="dropdownCityCategory" class="form-select floating-input">
								<option value="" selected disabled>Select</option>
							</select>
							<label class="floating-label" for="dropdownCityCategory">City Category</label>
						</div>
					</div>
				</div>
				-->
			</div>

			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnCreateCity" style="background-color:#2395c6; color:white;">Create</button>
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
			</div>
		</div>
	</div>
</div>


<div class="modal fade" id="addCityCategoryModel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title btn-heading-title" id="exampleModalLabel">Manage City Category</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">
				<div class="row">
					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<input type="text"
								   class="form-control floating-input"
								   placeholder="City Category Name "
								   id="txtCityCategoryName" />
							<span id="spnCityCategoryName" style="color:red; display:none;">Please Enter City Category Name </span>
							<label class="floating-label" for="txtCityName">City Category Name </label>
						</div>
					</div>
					<div class="col-md-6">
						<div class="form-group mt-3 position-relative">
							<textarea class="form-control floating-input"
									  placeholder="Description"
									  id="txtDescription"></textarea>
							<label class="floating-label" for="txtRemark">Description</label>

						</div>
					</div>
				</div>

				
			</div>
			<div class="modal-footer btn-heading-title">
				<button type="button" class="btn btn-primary" id="btnCreateCityCategory" style="background-color:#2395c6; color:white;">Create</button>
				<button type="button" class="btn btn-secondary"onclick="resetCityCategoryFormFields()" >Clear</button>
			</div>

			<div class="row m-3">
				<div class="col-md-12">
					<div class="form-group">
						<div class="rowCount" id="rowCountCategory"></div>
						<div id="gridContainerCityCategory">
							@* <div class="spinner-border text-primary" role="status">
							<span class="visually-hidden">Loading...</span>
						</div> *@
							<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
								<div class="spinner-border text-primary" role="status">
									<span class="visually-hidden">Loading...</span>
								</div>
							</div>
						</div>

					</div>
				</div>
			</div>
		</div>

	</div>
</div>


<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script>
	const Token=localStorage.getItem("authToken");
	const user=localStorage.getItem('EmployeeId');
	let stateId = 0;

	let CityID=0;
	let CityCategoryId=0;
	$(() => {
		loadDataTable();
	});


		$("#refreshData").click(() => {
					resetGridFilters( $('#gridContainer').dxDataGrid('instance'));
						resetGridFilters( $('#gridContainerCity').dxDataGrid('instance'));
				ReasonMasterDataTable();
		});


	function resetGridFilters(gridInstance) {
		if (gridInstance) {
		gridInstance.clearFilter();            // Clear all filters
		gridInstance.clearSorting();           // Clear all sorting

		}
	}
	$(document).ready(function () {

		$('#manageSateTabs .nav-link').on('click', function () {
			const selectedTabName = $(this).data('tabname');

			// Update active tab class
			$('#manageSateTabs .nav-link').removeClass('active');
			$(this).addClass('active');

			// Show/hide buttons
			if (selectedTabName === 'Manage State') {
				$('#addState').removeClass('d-none');
				$('#addCity').addClass('d-none');

				$('#StateGrid').removeClass('d-none');
				$('#CityGrid').addClass('d-none');
			} else {
				$('#addState').addClass('d-none');
				$('#addCity').removeClass('d-none');

				$('#StateGrid').addClass('d-none');
				$('#CityGrid').removeClass('d-none');
			}
		});
	});


	function loadDataTable() {

		$.ajax({
			type: "GET",
			url: '@baseUrl/StateAPI/GetAllState',
				headers: {
							'Authorization': 'Bearer ' + Token
						},
			success: function (data) {
				$("#gridContainer").dxDataGrid({
					dataSource: data.data,
					columns: [

						{ dataField: 'stateName', caption: 'State Name'},
						{ dataField: 'countryName', caption: 'Country Name' },
						{ dataField: 'ptDeductionType', caption: 'PT Deduction Type' },
						{ dataField: 'ptDeductionPeriod', caption: 'PT Deduction Month' },
						{ dataField: 'enrollmentCertificateNo', caption: 'Enrollment Certificate No' },
						{ dataField: 'esicStateCode', caption: 'ESIC State Code', alignment: 'center' },
						{ dataField: 'esicRegisteredOfficeAddress', caption: 'ESIC Registered Office Address'},
						{
							dataField: 'applicablePTSettingForMale_Female',
							caption: 'Applicable PT Setting For Male/Female	',
							dataType: 'string',
							calculateCellValue: function (data) {
								return data.applicablePTSettingForMale_Female ? "Active" : "Inactive"; // Based on isEnabled field value
							}
						},
						{
							dataField: '',
							caption: '',
							
							width: '50px',
							cellTemplate: function (container, options) {

								var buttonElement = $('<div class="d-flex order-actions">' +
									'<a href="javascript:;" class="edit-action" title="Departmnet">' +
									'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
									'<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
									'</svg>' +
									'</a>' +
									'</div>')
									.on('dxclick', function () {
										updateState(options.data);
									}).appendTo(container);

								var svgElement = buttonElement.find('svg');  // Accessing the svg element directly

								svgElement.attr('title', 'Update State');
							}
						},

						{
							dataField: '',
							caption: '',
	
							width: '50px',
							cellTemplate: function (container, options) {

								var buttonElement = $('<div class="d-flex order-actions">' +
									'<a href="javascript:;" class="delete-action" title="Department">' +
									'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
									'<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
									'</svg>' +
									'</a>' +
									'</div>')
									.on('dxclick', function () {
										deleteState(options.data);
									}).appendTo(container);

								var svgElement = buttonElement.find('svg');  // Accessing the svg element directly

								svgElement.attr('title', 'Delete State');
							}
						}

					],
					columnsAutoWidth: true,
					wordWrapEnabled: false,
					rowAlternationEnabled: false,
					showBorders: true,
					grouping: { autoExpandAll: true },
					paging: { pageSize: 10 },
					pager: { showPageSizeSelector: true, allowedPageSizes: [10, 25, 50, 100] },
					headerFilter: { visible: true },
					filterRow: { visible: true, applyFilter: "auto" },
					allowColumnResizing: true,
					groupPanel: { visible: true },
					searchPanel: { visible: true, width: 240, placeholder: "Search..." },
					
					allowColumnReordering: true,
					columnFixing: { enabled: false },
					
					onContentReady(e) {
						jQuery('#rowCount1').html('Total Records: ' + jQuery("#gridContainer").dxDataGrid('instance').totalCount());
					}
				}).dxDataGrid('instance');
			}
		});
	}


	$("#addState").click(() => {

		resetStateForm();
		$("#addStateModel").modal('show');
		
	});


	$("#btnCreateState").click(() => {
		debugger
			$("#btnCreateState").prop('disabled',true);
		var txtStatetName = $("#txtStatetName").val().trim();
		var drpCountry = $("#drpCountry").val();
			var drpDeduction = $("#drpDeduction").val()===""?null:$("#drpDeduction").val();
				var txtCertificateno = $("#txtCertificateno").val().trim()===""?null:$("#txtCertificateno").val().trim();
					var txtesicStatecode = $("#txtesicStatecode").val().trim()===""?null:$("#txtesicStatecode").val().trim();
					var txtMonth = $("#txtMonth").val().trim()===""?null:$("#txtMonth").val().trim();
					var txtAddress = $("#txtAddress").val().trim()===""?null:$("#txtAddress").val().trim();
		var txtActive = $("#txtActive").prop("checked");

		// Flag to track validation status
		var isValid = true;

		// Validate txtBranchName
		if (!txtStatetName) {
			$("#spnStateName").show();
			isValid = false;
		} else {
			$("#spnStateName").hide();
		}
		 if (!drpCountry) {
			$("#spnCountry").show();
			isValid = false;
		} else {
			$("#spnCountry").hide();
		}

		if(!isValid){
					$("#btnCreateState").prop('disabled',false);
			return;
		}
			var state = {
							StateId:stateId,
							StateName:	txtStatetName, 
							CountryName: drpCountry,
							PTDeductionType: drpDeduction,
						EnrollmentCertificateNo: txtCertificateno, 
						ESICStateCode: txtesicStatecode,
					     PTDeductionPeriod:txtMonth,
						ESICRegisteredOfficeAddress:txtAddress,
						ApplicablePTSettingForMale_Female:txtActive,
							CreatedBy:stateId==0?user:null,
						UpdatedBy:stateId==0?null:user
			}
					var StateUrl=stateId==0?"@baseUrl/StateAPI/CreateState":"@baseUrl/StateAPI/UpdateState";
	                   var stateMethod=stateId==0?"POST":"PUT";
		
			$.ajax({
				url: StateUrl,
				type: stateMethod,
				data: JSON.stringify(state),
				dataType: "json",
				contentType: 'application/json',
				headers: {
						'Authorization': 'Bearer ' + Token
					},
					success: function (response) {
					if (response.isSuccess) {
						round_success_noti(response.responseMessage);
							loadDataTable();
	                      $("#addStateModel").modal('hide');
					} 
					else 
					{
						round_error_noti(response.responseMessage);
					}
									$("#btnCreateState").prop('disabled',false);
				},
				error: function (xhr) {
									$("#btnCreateState").prop('disabled',false);

						round_error_noti("Some Thing Went Wrong.Please Try again");
				}
			});

		


	});

	function resetStateForm() {
		$("#txtStatetName").val("");
		$("#drpCountry").val("");
		$("#spnCountry").hide();
		$("#spnStateName").hide();
		$("#drpDeduction").val("");
		$("#txtCertificateno").val("");
		$("#txtesicStatecode").val("");
		$("#txtAddress").val("");
		$("#txtMonth").val("");
		$("#txtActive").prop("checked", false);

		// Resetting State ID for updates
		stateId = 0;
			$("#btnCreateState").prop('disabled',false);
				$("#btnCreateState").text("Save");
					$(".FormType").text("Create");
	}


	function updateState(data) {

		resetStateForm();
		$("#btnCreateState").text("Update");
		$("#txtStatetName").val(data.stateName||"");
		$("#drpCountry").val(data.countryName||"");  // Set country name to selected option text
		$("#drpDeduction").val(data.ptDeductionType||"");
		$("#txtMonth").val(data.ptDeductionPeriod);
		$("#txtCertificateno").val(data.enrollmentCertificateNo);
		$("#txtesicStatecode").val(data.esicStateCode);
		$("#txtAddress").val(data.esicRegisteredOfficeAddress);
		$("#txtActive").prop("checked", false);  // Uncheck the checkbox ----- value set data.ojtApplicable
		if (data.applicablePTSettingForMale_Female) {
			$("#txtActive").prop("checked", true);  // Check the checkbox if data.ojtApplicable is true
		} else {
			$("#txtActive").prop("checked", false);  // Uncheck the checkbox if data.ojtApplicable is false or undefined
		}
		$(".FormType").text("Update");
			stateId= data.stateId;

		// Show the modal
		$("#addStateModel").modal('show');
	}



	function deleteState(data) {

		// Show confirmation dialog
		var isConfirmed = confirm("Are you sure you want to delete this state?");

		if (isConfirmed) {
			var deleteRecord = {
				Id: data.stateId,
				DeletedBy: user // You may want to pass the current user's ID or name here.
			};

			$.ajax({
					url: '@baseUrl/StateAPI/DeleteState',
				type: "DELETE",
				data: JSON.stringify(deleteRecord),
					headers: {
							'Authorization': 'Bearer ' + Token
						},
				success: function (response) {
					// Handle success: reload the table to reflect the changes
					loadDataTable();

					round_success_noti(response.responseMessage);
				},
				error: function (xhr, status, error) {
					// Handle error: provide feedback to the user
					round_error_noti(response.responseMessage);
				}
			});
		} else {
			// If the user cancels the confirmation, do nothing
			round_error_noti("State deletion was cancelled.");
		}
	}

	
	$("#addCity").click(() => {
			 resetCityFormFields();
			 
	   $("#addCityModel").modal('show');
	})


	  $(()=>{
			  localStorage.removeItem('cityMasterLocalStorage');
			  CityMasterDataTable();
	   })

 function CityMasterDataTable() {
	  $.ajax({
		type: "GET",
		url: '@baseUrl/CityAPI/GetAllCity', // Update to your correct API endpoint
			headers: {
							'Authorization': 'Bearer ' + Token
						},
		success: function (data) {
		  if (data.isSuccess) {

			$("#gridContainerCity").dxDataGrid({
			  dataSource: data.data,
			  stateStoring: {
				enabled: true,
				type: 'localStorage',
				storageKey: 'cityMasterLocalStorage'
			  },

			  columns: [
					
				{ dataField: 'cityName', caption: 'City Name'},
				{ dataField: 'stateName', caption: 'State Name' },
				{ dataField: 'country', caption: 'Country' },
				{ dataField: 'remarks', caption: 'Remarks'},
					{
						  dataField: '',
						  caption: '',
						  width: '50px',
						  cellTemplate: function (container, options) {
							   var buttonElement = $('<div class="d-flex order-actions">' +
										   '<a href="javascript:;" class="edit-action" title="Edit City">' +
										   '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
										   '<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
										   '</svg>' +
										   '</a>' +
										   '</div>')
							  .on('dxclick', function () {
								updateCity(options.data);
							  }).appendTo(container);
						  }
						},
						{
						  dataField: '',
						  caption: '',
						  width: '50px',
						  cellTemplate: function (container, options) {
							var buttonElement = $('<div class="d-flex order-actions">' +
							  '<a href="javascript:;" class="delete-action" title="Delete City">' +
							  '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
							  '<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
							  '</svg>' +
							  '</a>' +
							  '</div>')
							  .on('dxclick', function () {
								deleteCity(options.data);
							  }).appendTo(container);
						  }
						}
				
			  ],

			  columnsAutoWidth: true,
			  showBorders: true,
			  paging: { pageSize: 10 },
			  pager: {
				showPageSizeSelector: true,
				allowedPageSizes: [10, 25, 50, 100]
			  },
			  filterRow: { visible: true, applyFilter: "auto" },
			  headerFilter: { visible: true },
			  groupPanel: { visible: true },
			  searchPanel: { visible: true, width: 240, placeholder: "Search..." },
			  onContentReady(e) {
				$('#rowCount2').html('Total Records: ' + e.component.totalCount());
			  }
			});

		  }
		},
		error: function (xhr, status, error) {
		  console.error("AJAX Error: " + status + " - " + error);
		}
	  });
	}

 $("#btnCreateCity").click(async function () {
		$("#btnCreateCity").prop("disabled", true);
	const cityName = $("#txtCityName").val().trim();
	   const stateId = $("#dropdownState").val();
			  const country = $('#drpCityCountry').val();
			 // const cityCategoryId = $("#dropdownCityCategory").val();
		  const remarks = $("#txtRemarks").val();

	   let isValid = true;
	   debugger
	   // Validate City Name
	   if (cityName === "") {
		   $("#spnCityName").show();
		   isValid = false;
	   } else {
		   $("#spnCityName").hide();
	   }

	   // Validate State
	   if (!stateId) {
		   $("#spnCityState").show();
		   isValid = false;
	   } else {
		   $("#spnCityState").hide();
	   }

		  // Validate Country
			  if (!country) {
				 $("#spnCityCountry").show();
			  isValid = false;
		  } else {
				 $("#spnCityCountry").hide();
		  }

	   // You can add country validation here if needed

	   if (!isValid) 
	   {
		$("#btnCreateCity").prop("disabled", false);
			return;
	   }
	  
	   // Create data object to send
	   const data = {
		   CityID:CityID ,
		   CityName: cityName,
		   StateId: stateId,
		   Country: country,
			// CityCategoryId:cityCategoryId,
			Remarks:remarks,
			CreatedBy:CityID==0?user:null,
			UpdatedBy:CityID==0?null:user

	   };

	   // AJAX call to insert data (modify URL as per your API or Controller)
	   $.ajax({
		   type: "POST",
		   url: "@baseUrl/CityAPI/CreateCity", // Change this to your actual endpoint
		   data: JSON.stringify(data),
		   contentType: "application/json",
			   headers: {
							'Authorization': 'Bearer ' + Token
						},
		   success: function (response) {
				if (response.isSuccess) {
					round_success_noti(response.responseMessage);
					   CityMasterDataTable(); // refresh your data table
						   resetCityFormFields()
					$('#addCityModel').modal('hide');
				} else {
					round_error_noti(response.responseMessage);
				}
				$("#btnCreateCity").prop("disabled", false);
		   },
		   error: function (err) {
			   // Handle error
				   $("#btnCreateCity").prop("disabled", false);
				   round_error_noti("Some thing went wrong");
		   }
	   });
	   
 })


	 function bindStates() {
		$.ajax({
			type: "GET",
			 url: "@baseUrl/StateAPI/GetAllState",
				 headers: {
							'Authorization': 'Bearer ' + Token
						},
			   success: function (response) {
				if (response.isSuccess ) {
					let stateDropdown = $("#dropdownState");
					stateDropdown.empty().append('<option value="" disabled selected>Select </option>');
					$.each(response.data, function (index, state) {
						stateDropdown.append(`<option value="${state.stateId}">${state.stateName}</option>`);
					});
				} else {
						round_error_noti("Some thing went wrong.Please try again!");
				}
			},
			error: function (error) {
					round_error_noti("Some thing went wrong.Please try again!");

			}
		});
	}

	function bindCityCategories() {
		$.ajax({
			type: "GET",
			url: "@baseUrl/CityCategoryAPI/GetAllCityCategory", // Replace with your actual API endpoint
			success: function (response) {
				if (response.isSuccess ) {
					let cityCategoryDropdown = $("#dropdownCityCategory");
					cityCategoryDropdown.empty().append('<option value="" disabled selected>Select City Category</option>');
					$.each(response.data, function (index, category) {
						cityCategoryDropdown.append(`<option value="${category.cityCategoryId}">${category.cityCategoryName}</option>`);
					});
				} else {
					console.warn("No city categories found.");
				}
			},
			error: function (error) {
				console.error("Error fetching city categories:", error);
			}
		});
	}

function updateCity(data) {
    CityID = data.cityID || 0;
    $('#txtCityName').val(data.cityName || '');
	
		$('#drpCityCountry').val(data.country||"");
	  

    $('#dropdownState').val(data.stateId || '');
    //$('#dropdownCityCategory').val(data.cityCategoryId || '');
    $('#txtRemarks').val(data.remarks || '');

    $('#spnCityName').hide();
    $('#spnCountry').hide();
    $('#spnState').hide();

    $('#btnCreateCity').prop('disabled', false);
    $(".formType").text("Update");
    $("#btnCreateCity").text("Update");
    $('#addCityModel').modal('show');
}


	 function resetCityFormFields() {
		$('#txtCityName').val('');
			$('#dropdownState').val('');
			$('#drpCityCountry').val("");
			//$('#dropdownCityCategory').val('');
		$('#txtRemarks').val('');
			$('#spnCityState').hide();
		$('#spnCityName').hide();
			$('#spnCityCountry').hide();
		$('#spnCityCategory').hide();
		$('#spnRemarks').hide();
        CityID=0;
	  $('#btnCreateCity').prop('disabled', false);
			   $(".formType").text("Create");
				  $("#btnCreateCity").text("Create");
	}
	$(()=>{
			  bindStates();
			  // bindCityCategories();
		// $('#addCityModel').on('hidden.bs.modal', function () {
		// 	   resetCityFormFields();
	 //     });
	})




  function deleteCity(data) {
			  if (!confirm("Are you sure you want to delete this reason?")) {
				  return; // Cancel the delete operation
			  }

			  var deleteObj = {
				  id: data.cityID,
				  deletedBy: user // Set this to the actual user if needed
			  };

			  $.ajax({
				  url: '@baseUrl/CityAPI/DeleteCity',
				  type: 'DELETE',
				  contentType: 'application/json',
					  headers: {
							'Authorization': 'Bearer ' + Token
						},
				  data: JSON.stringify(deleteObj),
				  success: function (response) {
					  if (response.isSuccess) {
						  round_success_noti(response.responseMessage);
					  } else {
						  round_error_noti(response.responseMessage);
					  }
								CityMasterDataTable();
				  },
				  error: function (error) {
					  console.log('Error deleting city!');
				  }
			  });
		  }


		  //City Category

		 $("#addCityCategoryBtn").click(() => {
			    CityCategoryMasterDataTable();
				  $('#btnCreateCityCategory').prop('disabled', false);
					  $("#btnCreateCityCategory").text("Create");
			   $("#addCityCategoryModel").modal('show');
		})

function CityCategoryMasterDataTable() {
	  $.ajax({
		type: "GET",
		url: '@baseUrl/CityCategoryAPI/GetAllCityCategory', // 🔁 Update to your correct API endpoint
		success: function (data) {
		  if (data.isSuccess) {

			$("#gridContainerCityCategory").dxDataGrid({
			  dataSource: data.data,
			  stateStoring: {
				enabled: true,
				type: 'localStorage',
				storageKey: 'cityCategoryMasterLocalStorage'
			  },

			  columns: [
				
				{ dataField: 'cityCategoryName', caption: 'Category Name', alignment: 'center' },
				{ dataField: 'description', caption: 'Description', alignment: 'center' },
					{
					  dataField: '',
					  caption: '',
					  alignment: 'center',
					  width: '50px',
					  type: 'buttons',
					  cellTemplate: function (container, options) {
						var buttonElement = $('<div class="d-flex order-actions">' +
								   '<a href="javascript:;" class="edit-action" title="Edit City Category">' +
								   '<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
								   '<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
								   '</svg>' +
								   '</a>' +
								   '</div>')
						  .on('dxclick', function () {
							updateCityCategory(options.data);
						  }).appendTo(container);
					  }
					},
					{
					  dataField: '',
					  caption: '',
					  alignment: 'center',
					  width: '50px',
					  type: 'buttons',
					  cellTemplate: function (container, options) {
						$('<div class="d-flex order-actions">' +
							'<a href="javascript:;" class="delete-action" title="Delete Category">' +
							'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
							'<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
							'</svg>' +
							'</a>' +
						  '</div>')
						  .on('dxclick', function () {
							deleteCityCategory(options.data);
						  }).appendTo(container);
					  }
					}
				
			  ],

			  columnsAutoWidth: true,
			  showBorders: true,
			  paging: { pageSize: 10 },
			  pager: {
				showPageSizeSelector: true,
				allowedPageSizes: [10, 25, 50, 100]
			  },
			  filterRow: { visible: true, applyFilter: "auto" },
			  headerFilter: { visible: true },
			  groupPanel: { visible: true },
			  searchPanel: { visible: true, width: 240, placeholder: "Search..." },
			  onContentReady(e) {
				$('#rowCountCategory').html('Total Records: ' + e.component.totalCount());
			  }
			});

		  }
		},
		error: function (xhr, status, error) {
		  console.error("AJAX Error: " + status + " - " + error);
		}
	  });
	}

 $("#btnCreateCityCategory").click(async function () {
		$("#btnCreateCityCategory").prop("disabled", true);
		const cityCategoryName = $("#txtCityCategoryName").val().trim();
		const description = $("#txtDescription").val().trim();
		   

		   let isValid = true;

		   // Validate City Name
			  if (cityCategoryName === "") {
				   $("#spnCityCategoryName").show();
			   isValid = false;
		   } else {
				   $("#spnCityCategoryName").hide();
		   }

		   if (!isValid)
		   {
				$("#btnCreateCityCategory").prop("disabled", false);
				return;
		   }
		  
		   // Create data object to send
		   const data = {
			CityCategoryId:CityCategoryId ,
			CityCategoryName:cityCategoryName,
			Description:description,
				CreatedBy:null,
				UpdatedBy:null

		   };

		   // AJAX call to insert data (modify URL as per your API or Controller)
		   $.ajax({
			   type: "POST",
			   url: "@baseUrl/CityCategoryAPI/CreateCityCategory", // Change this to your actual endpoint
			   data: JSON.stringify(data),
			   contentType: "application/json; charset=utf-8",
			   success: function (response) {
					if (response.isSuccess) {
						round_success_noti(response.responseMessage);
						 CityCategoryMasterDataTable(); // refresh your data table
							resetCityCategoryFormFields();
					} else {
						round_error_noti(response.responseMessage);
					}
						$("#btnCreateCityCategory").prop("disabled", false);
			   },
			   error: function (err) {
				   // Handle error
				   console.error("Error while creating city Category:", err);
			   }
		   });

	 })


	function updateCityCategory(data) {
			resetCityCategoryFormFields();
		CityCategoryId=data.cityCategoryId;
			$("#txtCityCategoryName").val(data.cityCategoryName);
			$("#txtDescription").val(data.description);
				 $("#spnCityCategoryName").hide();
		$('#btnCreateCityCategory').prop('disabled', false);
		$(".formType").text("Update");
			$("#btnCreateCityCategory").text("Update");

	}


		function resetCityCategoryFormFields() {
				CityCategoryId=0;
				$("#txtCityCategoryName").val('');
				$("#txtDescription").val('');
				$("#spnCityCategoryName").hide();
			$('#btnCreateCityCategory').prop('disabled', false);
			$(".formType").text("Create");
			$("#btnCreateCityCategory").text("Create");

		}
		

		  function deleteCityCategory(data) {
				  if (!confirm("Are you sure you want to delete this reason?")) {
					  return; // Cancel the delete operation
				  }

				  var deleteObj = {
					  id: data.cityCategoryId,
					  deletedBy: null // Set this to the actual user if needed
				  };

				  $.ajax({
					  url: '@baseUrl/CityCategoryAPI/DeleteCityCategory',
					  type: 'DELETE',
					  contentType: 'application/json',
					  data: JSON.stringify(deleteObj),
					  success: function (response) {
						  if (response.isSuccess) {
							  round_success_noti(response.responseMessage);
						  } else {
							  round_error_noti(response.responseMessage);
						  }
							CityCategoryMasterDataTable();
					  },
					  error: function (error) {
						  console.log('Error deleting city Category!');
					  }
				  });
			  }
</script>