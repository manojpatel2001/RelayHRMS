@inject IConfiguration Configuration
@{
	ViewData["Title"] = "Additional Information";
	Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
	string UIBaseUrlLayout = Configuration["UIBaseUrlSettings:baseUrl"];
	var uri = new Uri(baseUrl);
	string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
}
<style>
	#profileImage {
		width: 150px;
		height: 150px;
		border-radius: 50%;
		object-fit: cover;
		cursor: pointer;
	}

	/* #fileInfo {
		margin-top: 5px;
		display: flex;
		align-items: center;
		gap: 8px;
	}

		#fileInfo small {
			color: green;
		}

		#fileInfo i {
			cursor: pointer;
			color: red;
		} */



	#cropModal .modal-dialog {
		max-width: 600px; /* Optional: limit modal width */
	}

	#cropModal .modal-body {
		max-height: 70vh;
		overflow: auto;
	}

	#cropImagePreview {
		max-width: 100%;
		max-height: 60vh;
		display: block;
		margin: 0 auto;
	}

	.nav-link {
		text-align: center;
		font-size: 14px;
		color: #333 !important;
		transition: color 0.3s;
	}

		.nav-link i {
			font-size: 20px;
			display: block;
			margin-bottom: 4px;
			color: #666;
			transition: color 0.3s;
		}

		/* Hover and Active (Text + Icon) */
		.nav-link:hover,
		.nav-link:hover i,
		.nav-link.active,
		.nav-link.active i {
			color: #007bff !important;
		}

	.navbar-nav {
		justify-content: space-around;
		width: 100%;
	}

	
	.light-grey-bg {
		background-color: #f8f9fa; 
	}
	
</style>



<div class="card" id="employeeDetailsCard">

	<div class="card-header bg-primary text-white">
		<div class="d-flex justify-content-between align-items-center">
			<!-- Left: Title -->
			<div>
				<h5 class="mb-0">Employee Details</h5>
			</div>

			<div class="mx-3 flex-grow-1 d-flex justify-content-center">
				<label for="searchBox" class=" mt-1 text-dark">Search:&nbsp;&nbsp;</label>
				<input type="text" class="form-control" placeholder="Employee Code or Name" id="searchBox" style="width: 30%; height: 30px;" />
			</div>

			<!-- Right: Back Arrow -->
			<div>
				<i class="fas fa-arrow-circle-left cursor-pointer text-dark" id="backArrow"></i>

			</div>
		</div>
	</div>


	<div class="card-body">
		<div class="row">
			<div class="col-md-12 bg-light py-2">
				<div class="d-flex justify-content-between">
					<span class="text-danger cursor-pointer">
						<i class="fas fa-angle-double-left"></i> Previous
					</span>

					<span class="text-danger cursor-pointer">
						Next <i class="fas fa-angle-double-right"></i>
					</span>
				</div>
			</div>
		</div>

		<div class="row mt-2">
			<!-- Left Side: Form Data -->
			<div class="col-md-8">
				
				
				<div class="card-body" id="editSectionEmoplyee" >
					<form >
						<div class="row">
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="hidden" class="form-control floating-input" id="EmployeeId" placeholder=" ">
									<select class="form-control floating-input" id="ddlInitial">
										<option value="">Select Initial</option>
										<option>Mr.</option>
										<option>Mrs.</option>
										<option>Ms.</option>
									</select>
									<label class="floating-label" for="ddlInitial">Initial *</label>
									<span id="spnInitial" style="color:red; display:none;">Please Select Initial</span>

								</div>
							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtFirstName" placeholder=" ">
									<label class="floating-label" for="txtFirstName">First Name *</label>
									<span id="spnFirstName" style="color:red; display:none;">Please Enter First Name</span>

								</div>
							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtMiddleName" placeholder=" ">
									<label class="floating-label" for="txtMiddleName">Middle Name</label>
								</div>
							</div>
						</div>

						<div class="row">
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtLastName" placeholder=" ">
									<label class="floating-label" for="txtLastName">Last Name</label>
								</div>
							</div>
							<div class="col-md-4">
								<div class="row p-1">

									<div class="col-md-5 p-0">
										<div class="form-group mt-3 position-relative">
											Employee Code*:
										</div>
									</div>
									<div class="col-md-4 p-0">
										<div class="form-group mt-3 position-relative">
											<input type="text" readonly class="form-control floating-input" id="txtEmpCode" placeholder="HRMS" value="">
										</div>
									</div>
									<div class="col-md-3 p-0">
										<div class="form-group mt-3 position-relative">
											<input type="text" readonly class="form-control floating-input" id="txtNumberEmpCode" placeholder="0001" value="">
										</div>
									</div>
								</div>

							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="date" class="form-control floating-input" id="doj" placeholder=" ">
									<label class="floating-label" for="doj">Date of Joining *</label>
								</div>
							</div>
						</div>

						<div class="row">
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="ddlBranch">
										<option disabled selected value="">Select Branch</option>
									</select>
									<label class="floating-label" for="ddlBranch">Branch *</label>
								</div>
							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="ddlGrade">
										<option value="">Select Grade</option>
										<option value="">MANAGEMENT</option>
									</select>
									<label class="floating-label" for="ddlGrade">Grade *</label>
								</div>
							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="ddlShift">
										<option value="">Day Shift</option>
									</select>
									<label class="floating-label" for="ddlShift">Shift *</label>
								</div>
							</div>
						
						<!-- New Fields -->
						
							@* <div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtCTC" placeholder=" ">
									<label class="floating-label" for="txtCTC">CTC</label>
								</div>
							</div> *@
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="ddlDesignation">
										<option value="">Select Designation</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlDesignation">Designation </label>
								</div>
							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="number" class="form-control floating-input" id="txtGrossSalary" placeholder=" " min="0">
									<label class="floating-label" for="txtGrossSalary">Gross Salary </label>
								</div>
							</div>

						

						
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="ddlCategory">
										<option value="">Select Category</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlCategory">Category </label>
								</div>
							</div>
							@* <div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="number" class="form-control floating-input" id="txtBasicSalary" placeholder=" " min="0">
									<label class="floating-label" for="txtBasicSalary">Basic Salary </label>
								</div>
							</div> *@
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="ddlDepartment">
										<option value="">Select Department</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlDepartment">Department *</label>
								</div>
							</div>

					
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="ddlEmpType">
										<option value="">Select Employee Type</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlEmpType">Employee Type </label>
								</div>
							</div>

							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="date" class="form-control floating-input" id="dob" placeholder=" ">
									<label class="floating-label" for="dob">Date of Birth </label>
								</div>
							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlRole">
										<option value="">Select</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlRole">Role</label>
								</div>
							</div>


							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtLoginAlias" placeholder=" ">
									<label class="floating-label" for="txtLoginAlias">Login Alias </label>
									<span id="spnLoginAlias" style="color:red; display:none;">Please Enter Login Alias</span>

								</div>
							</div>

							<div class="col-md-4">
								<div class="form-group mt-4 position-relative">
									Scheme Assign:
									<label class="scheme-assign-label cursor-pointer text-primary ms-2" data-bs-toggle="modal" data-bs-target="#schemeAssignModal">
										Click here
									</label>

								</div>
							</div>

							<div class="col-md-4">
								<div class="form-group mt-4 position-relative">
									WeekOff Assign:
									<label class="scheme-assign-label cursor-pointer text-primary ms-2" data-bs-toggle="modal" data-bs-target="#weekOffAssignModal">
										Click here
									</label>
								</div>
							</div>
					

							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtEnrolNo" placeholder="Enroll No/Punching Code	">
									<label class="floating-label" for="txtEnrolNo">Enroll No/Punching Code	 </label>

								</div>
							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="drpReporting">
										<option disabled selected value="">Select Reporting</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="drpReporting">Reporting Manager </label>
								</div>
							</div>

							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="drpSubBranch">
										<option disabled selected value="">Select Sub Branch</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="drpSubBranch">Sub Branch </label>
								</div>
							</div>


						</div>

						<div class="row mt-3">
							<div class="col-md-3">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="overtime">
									<label class="form-check-label" for="overtime">Over Time</label>
								</div>
							</div>
							<div class="col-md-3">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="latemark">
									<label class="form-check-label" for="latemark">Late Mark</label>
								</div>
							</div>
							<div class="col-md-3">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="earlymark">
									<label class="form-check-label" for="earlymark">Early Mark</label>
								</div>
							</div>
							<div class="col-md-3">
								<div class="form-check">
									<input class="form-check-input" type="checkbox" id="fullpf">
									<label class="form-check-label" for="fullpf">Full PF</label>
								</div>
							</div>
							<div class="col-md-3">
								<div class="form-check mt-2">
									<input class="form-check-input" type="checkbox" id="pt">
									<label class="form-check-label" for="pt">PT</label>
								</div>
							</div>
							<div class="col-md-3">
								<div class="form-check mt-2">
									<input class="form-check-input" type="checkbox" id="fixsalary">
									<label class="form-check-label" for="fixsalary">Fix Salary</label>
								</div>
							</div>
							<div class="col-md-3">
								<div class="form-check mt-2">
									<input class="form-check-input" type="checkbox" id="probation">
									<label class="form-check-label" for="probation">Probation</label>
								</div>
							</div>
							<div class="col-md-3">
								<div class="form-check mt-2">
									<input class="form-check-input" type="checkbox" id="trainee">
									<label class="form-check-label" for="trainee">Trainee</label>
								</div>
							</div>
						</div>

					<div class="row mt-3" >
						<div class="col-md-2"></div>
						<div class="col-md-8 text-center">
							<button type="button" class="btn btn-dark px-5 m-2 " id="btnBackEmployee">Back</button>
@* 							<button type="reset" class="btn btn-secondary px-5" id="btnEmployeeClear">Clear</button>
 *@							<button type="button" class="btn btn-primary px-5" id="btnUpdateEmployee" style="background-color:#2395c6; color:white;">Update</button>

						</div>
						<div class="col-md-2"></div>
					</div>
					</form>
			     </div>
				

			</div>

			<!-- Right Side: Upload Image/Signature -->
			<!-- Right Side: Upload Image/Signature -->
			<div class="col-md-4">

				<!-- PHOTO Upload -->
				<div class="mb-4 text-center">
					<label>Profile Picture</label><br>

					<img id="profileImage"
						 src="@baseDomainUrl/uploads/defaultuserprofile/user-profile-png-image.png"
						 alt="Profile Image"
						 style="width: 150px; height: 150px; cursor: pointer;" />

					<input type="file" id="profileInput" accept="image/jpeg" class="d-none" />

					<!-- Show filename BELOW image -->
					<div id="fileInfo" class="mt-2" style="display: none; margin-left:20px;">
						<p>
							<span id="fileNameText" class="text-success"></span>
							<span id="deleteBtn">
								<i class="fas fa-trash text-danger ms-2 cursor-pointer" aria-hidden="true"></i>
							</span>
						</p>
					</div>
				</div>

				<!-- SIGNATURE Upload -->
				<div class="mb-4 text-center">
					<label>Upload Signature</label><br>

					<img id="empSignPreview"
						 src="@baseDomainUrl/uploads/defaultuserprofile/default-signature.jpg"
						 style="width: 150px; height: 80px; cursor: pointer;"
						 class="img-thumbnail" />

					<input type="file" id="empSignatureInput" class="d-none" accept=".jpg,.jpeg" />

					<!-- Show signature filename BELOW image -->
					<div id="signFileInfo" class="mt-2" style="display: none;">
						<p>
							<span id="signFileNameText" class="text-success"></span>
							<span id="deleteSignBtn">
								<i class="fas fa-trash text-danger ms-2 cursor-pointer" aria-hidden="true"></i>
							</span>
						</p>
					</div>
				</div>

				<!-- Upload button -->
				<div class="text-center mt-4">
					<div id="uploadBtnTag" class="mt-2" style="display: none;">
						<button type="button" class="btn btn-primary" id="btnUpload" style="background-color:#2395c6; color:white;">
							Upload
						</button>
					</div>
				</div>

			</div>


		</div>

		<div class="row">
			<div class="col-md-12  py-2">
				<div class="d-flex justify-content-between">
					<span><strong>Profile Last Updated By:</strong>
						<span id="lastUpdatedBy"></span>
				     </span>
					<span class="text-danger cursor-pointer " id="viewEmployeeHistroy">
						<i class="fas fa-history"></i> View Employee History
					</span>
				</div>
			</div>
		</div>

	</div>
</div>


<!-- Modal HTML -->
<div class="modal" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="cropModalLabel">Crop Profile Image</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<img id="cropImagePreview" src="" alt="Image preview" class="img-fluid">
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary" id="cropConfirmBtn">Confirm Crop</button>
			</div>
		</div>
	</div>
</div>

<!--Addition menu-->
	<div class="card shadow mt-3 ">
		<div class="card-body p-0">
			<nav class="navbar navbar-expand-lg navbar-light bg-light rounded-top">
				<div class="container-fluid">
					<div class="collapse navbar-collapse show" id="navbarTabsOnly">
						<ul class="navbar-nav d-flex flex-wrap text-center">
							<li class="nav-item">
								<a class="nav-link active" href="#">
									<i class="fas fa-id-card"></i>
									Employee Personal Info
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link " href="#">
									<i class="fas fa-phone-alt"></i>
									Contact
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-user-shield"></i>
									Emergency Contact(s)
								</a>
							</li>
							
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-briefcase"></i>
									Reporting & Contract
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-paperclip"></i>
									Attachments
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-money-bill-wave"></i>
									Allowance
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-coins"></i>
									Salary
								</a>
							</li>
						</ul>
					</div>
				</div>
			</nav>

		</div>
	<div id="partialViewContainer">
		<div id="EmployeePersonalInfo" class="partial-section"></div>
		<div id="Contact" class="partial-section d-none"></div>
		<div id="EmergencyContacts" class="partial-section d-none"></div>
		<div id="ReportingContract" class="partial-section d-none"></div>
		<div id="Attachments" class="partial-section d-none"></div>
		<div id="Allowance" class="partial-section d-none"></div>
		<div id="Salary" class="partial-section d-none"></div>
	</div>


	</div>

	

<!-- CropperJS CSS & JS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


<script>
	
		let employeeList = [];
		let currentIndex =0;
		let CurrentEmployeeId=localStorage.getItem('CurrentEmployeeId');
		const savedCompany = localStorage.getItem('selectedCompany');
		var companyDetails = JSON.parse(savedCompany);
		const CurrentCompanyId=companyDetails.CompanyId;
		// console.log("CurrentEmployeeId:",CurrentEmployeeId);
		// console.log("CurrentCompanyId:",CurrentCompanyId);
		var EmployeeProfileUrl="";
		var EmployeeSignatureUrl="";
	
	function formatDate(date) {
		if (!date) return '';
		var d = new Date(date);
		return d.toISOString().split('T')[0];
	}

	$(document).ready( async function () {
		//await LoadCompanyDetails();
			await Promise.all([bindBranch(),loadBindRoleOption(),bindReporting(), bindDesignation(), bindDepartment(), bindGrade(),bindCategory(),bindEmployeeType(),bindShift()]);
		await new Promise(resolve => setTimeout(resolve, 1000));

		// $('#companyDropdown').change(async function() {
		// 	var selectedCompany = $(this).val();
		// 	if (selectedCompany) {
		// 		CurrentEmployeeId=0;
		// 		getEmployeeDetailsByCompanyId(selectedCompany);
		//     }
		// });
	    //$('#companyDropdown').val(CurrentCompanyId);
		// var Company = $('#companyDropdown').val();
		if (!CurrentCompanyId) {
			round_error_noti("Please select company");
			return;
		}
	  getEmployeeDetailsByCompanyId(CurrentCompanyId);
	});
	function getEmployeeDetailsByCompanyId(company)
	{
	 $.ajax({
			type: "GET",
			url: "@baseUrl/EmployeeMasterAPI/GetAllEmployee"+ "?companyId=" + company,
			success: function(data) {
				console.log("Data received:", data);
				if (data.isSuccess)
				{
					employeeList=data.data;
					if(CurrentEmployeeId==0)
					{
					 currentIndex=0;
					}
					else{
					currentIndex=findIndexById(CurrentEmployeeId);
					}
					fillEmployeeForm(employeeList[currentIndex]);
				}
				else{
					round_error_noti(data.responseMessage);
						round_error_noti(data.responseMessage);
						setTimeout(function() {
							window.location.href = "@UIBaseUrlLayout/AdminPanel/EmployeeMaster/EmployeeMaster";
						}, 1000);
				}
			},
			error: function(xhr, status, error) {
				console.error("AJAX Error: " + status + " - " + error);
			}
		})
	}
	function findIndexById(idToFind) {
		
		const index = employeeList.findIndex(function(obj) {
			return obj.id == idToFind; // Using == to allow type coercion
		});

		console.log('Found Index:', index);
		return index;
	}


	// Sample fill function
	function fillEmployeeForm(employee) {
		// Set values into form fields, handling null values
		$('#EmployeeId').val(employee.id);
		$('#ddlInitial').val(employee.initial);
		$('#txtFirstName').val(employee.firstName);
		$('#txtMiddleName').val(employee.middleName );
		$('#txtLastName').val(employee.lastName );
		
			$('#txtEmpCode').val(employee.alfaCode||"");
			$('#txtNumberEmpCode').val(employee.employeeCode||"");
		$('#doj').val(formatDate(employee.dateOfJoining));
		$('#ddlBranch').val(employee.branchId||"");
		$('#ddlGrade').val(employee.gradeId||"");
		$('#ddlShift').val(employee.shiftMasterId||"");
		$('#txtCTC').val(employee.ctc ||"");
		$('#ddlDesignation').val(employee.designationId||"");
		$('#txtGrossSalary').val(employee.grossSalary || '');
		$('#ddlCategory').val(employee.categoryId || '');
		$('#txtBasicSalary').val(employee.basicSalary || '');
		$('#ddlDepartment').val(employee.departmentId || '');
		$('#ddlEmpType').val(employee.employeeTypeId ||'');
	    $('#dob').val(employee.dateOfBirth || '');
		$('#ddlRole').val(employee.roleId ||'');
		$('#txtLoginAlias').val(employee.loginAlias || '');
		$('#drpReporting').val(employee.reportingManagerId || '');
		$('#drpSubBranch').val(employee.subBranch || '');
		$('#txtEnrolNo').val(employee.enrollNo || '');
		$('#overtime').prop('checked', employee.overtime || false);
		$('#latemark').prop('checked', employee.latemark || false);
		$('#earlymark').prop('checked', employee.earlymark || false);
		$('#fullpf').prop('checked', employee.fullpf || false);
		$('#pt').prop('checked', employee.pt || false);
		$('#fixsalary').prop('checked', employee.fixsalary || false);
		$('#probation').prop('checked', employee.probation || false);
		$('#trainee').prop('checked', employee.trainee||false);

		if(employee.employeeProfileUrl!=null )
		{
			$('#profileImage').attr('src',employee.employeeProfileUrl );
			EmployeeProfileUrl=employee.employeeProfileUrl;
			$('#fileInfo').show();
			$("#uploadBtnTag").show();
		}
		else{
		   $('#profileImage').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/user-profile-png-image.png');
	     	$('#fileInfo').hide();
		}
		if(employee.employeeSignatureUrl!=null){
			EmployeeSignatureUrl=employee.employeeSignatureUrl;
			$('#empSignPreview').attr('src', employee.employeeSignatureUrl);
			$('#signFileInfo').show();
			$("#uploadBtnTag").show();
		}
		else{
		   $('#empSignPreview').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/default-signature.jpg');
		   $('#signFileInfo').hide();
		}
		$(".loaderTag").show();
		GetEmployeeAdditionDetails(employee.id);
	}

	async function bindDesignation(){

	   $.ajax({
				url: '@baseUrl/DesignationAPI/GetAllDesignation',
				method: 'GET',
				success: function(data) {
					if(data.isSuccess){
						var dropdown = $('#ddlDesignation');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select Designation</option>');
						$.each(data.data, function(index, company) {
							dropdown.append($('<option>', {
								value: company.designationId,
								text: company.designationName
							}));
						});


					}
				},
				error: function(error) {
					console.error('Error fetching designation data:', error);
				}
			});

	 }

	 async function bindReporting(){

		$.ajax({
		type: "GET",
		url: "@baseUrl/EmployeeMasterAPI/GetAllEmployee"+ "?companyId=" + CurrentCompanyId,
		success: function(data) {
			console.log("Data received:", data);
				if(data.isSuccess){
					var dropdown = $('#drpReporting');
					dropdown.empty();
					dropdown.append('<option disabled selected value="">Select</option>');
					$.each(data.data, function(index, company) {
						dropdown.append($('<option>', {
							value: company.id,
							text: company.fullName
						}));
					});


	            }
		},
		error: function(xhr, status, error) {
			console.error("AJAX Error: " + status + " - " + error);
		}
	})

	 }
	 async function bindDepartment(){

	   $.ajax({
				url: '@baseUrl/DepartmentAPI/GetAllDepartment',
				method: 'GET',
				success: function(data) {
					if(data.isSuccess){
						var dropdown = $('#ddlDepartment');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select Department</option>');
						$.each(data.data, function(index, company) {
							dropdown.append($('<option>', {
								value: company.departmentId,
								text: company.departmentName
							}));
						});


					}
				},
				error: function(error) {
					console.error('Error fetching designation data:', error);
				}
			});

	 }
	async function bindGrade(){
	   $.ajax({
				url: '@baseUrl/GradeAPI/GetAllGrade',
				method: 'GET',
				success: function(data) {
					if(data.isSuccess){
						var dropdown = $('#ddlGrade');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select Grade</option>');
						$.each(data.data, function(index, company) {
							dropdown.append($('<option>', {
								value: company.gradeId,
								text: company.gradeName
							}));
						});


					}
				},
				error: function(error) {
					console.error('Error fetching grade data:', error);
				}
			});

	 }

	async function loadBindRoleOption() {

		try {
			const response = await fetch('@baseUrl/RoleAPI/GetAllRoles', {
				method: 'GET',
				headers: {
					'Accept': 'application/json'
				}
			});

			const data = await response.json();

			if (data.isSuccess) {

				console.log("Permissions loaded:", data.data);
				var arrayDta=data.data;
				 var dropdowns = $('#ddlRole');
							dropdowns.empty();
							dropdowns.append(
								$('<option>', {
								value: '0',
								text: 'Select',
								selected: true,
								disabled: true
								})
							);

							$.each(data.data, function(index, role) {
									dropdowns.append($('<option >', {
									value: role.id,
									text: role.name
								}));
							});
			}
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}

	  async function bindBranch(){

		  $.ajax({
			   url: '@baseUrl/BranchAPI/GetAllBranch',
			   method: 'GET',
			   success: function(data) {
				   if(data.isSuccess){
					   var dropdown = $('#ddlBranch');
					   dropdown.empty();
					   dropdown.append('<option disabled selected value="">Select Branch</option>');
					   $.each(data.data, function(index, company) {
						   dropdown.append($('<option>', {
							   value: company.branchId,
							   text: company.branchName
						   }));
					   });


				   }
			   },
			   error: function(error) {
				   console.error('Error fetching company data:', error);
			   }
		   });

	}
	
	async function bindEmployeeType(){

	   $.ajax({
			url: '@baseUrl/EmployeeTypeAPI/GetAllEmployeeTypes',
			method: 'GET',
			success: function(data) {
				if(data.isSuccess){
					var dropdown = $('#ddlEmpType');
					dropdown.empty();
					dropdown.append('<option disabled selected value="">Select</option>');
					$.each(data.data, function(index, company) {
						dropdown.append($('<option>', {
							value: company.employeeTypeId,
							text: company.employeeTypeName
						}));
					});


				}
			},
			error: function(error) {
				console.error('Error fetching category data:', error);
			}
		});

	}
	async function bindCategory(){

	   $.ajax({
			url: '@baseUrl/CategoryAPI/GetAllCategories',
			method: 'GET',
			success: function(data) {
				if(data.isSuccess){
					var dropdown = $('#ddlCategory');
					dropdown.empty();
					dropdown.append('<option disabled selected value="">Select</option>');
					$.each(data.data, function(index, company) {
						dropdown.append($('<option>', {
							value: company.categoryId,
							text: company.categoryName
						}));
					});


				}
			},
			error: function(error) {
				console.error('Error fetching category data:', error);
			}
		});

	}
	async function bindShift(){

	   $.ajax({
			url: '@baseUrl/ShiftMasterAPI/GetAllShifts',
			method: 'GET',
			success: function(data) {
				if(data.isSuccess){
					var dropdown = $('#ddlShift');
					dropdown.empty();
					dropdown.append('<option disabled selected value="">Select</option>');
					$.each(data.data, function(index, company) {
						dropdown.append($('<option>', {
							value: company.shiftID,
							text: company.shiftName
						}));
					});


				}
			},
			error: function(error) {
				console.error('Error fetching category data:', error);
			}
		});

	}

	// Bind navigation buttons
	$(document).ready( async function () {
		 
		 $('span:contains("Next")').click(function () {
			if (currentIndex < employeeList.length - 1) {
				currentIndex++;
				fillEmployeeForm(employeeList[currentIndex]);
			}
		});

		$('span:contains("Previous")').click(function () {
			if (currentIndex > 0) {
				currentIndex--;
				fillEmployeeForm(employeeList[currentIndex]);
			}
		});

		
	});


	$('#btnUpdateEmployee').click(async function() {
			$("#btnUpdateEmployee").prop("disabled", true);
			// Capture form values in variables
			var employeeId=$('#EmployeeId').val();
			var initial = $('#ddlInitial').val();
			var firstName = $('#txtFirstName').val();
			var middleName = $('#txtMiddleName').val();
			var lastName = $('#txtLastName').val();
			var employeeStringCode = $('#txtEmpCode').val(); // Assuming the first input is for EmployeeStringCode
			var employeeNumberCode = $('#txtNumberEmpCode').val(); // Assuming the second input is for EmployeeNumberCode
			var dateOfJoining = $('#doj').val();
			var branch = $('#ddlBranch').val();
			var grade = $('#ddlGrade').val();
			var shift = $('#ddlShift').val();
			//var ctc = $('#txtCTC').val();
			var designation = $('#ddlDesignation').val();
			var grossSalary = $('#txtGrossSalary').val();
			var category = $('#ddlCategory').val();
			//var basicSalary = $('#txtBasicSalary').val();
			var department = $('#ddlDepartment').val();
			var employeeType = $('#ddlEmpType').val();
			var dateOfBirth = $('#dob').val();
			var RoleId = $('#ddlRole').val();
			var reportingManager=$('#drpReporting').val();
			var subBranch=	$('#drpSubBranch').val();
			var enrollNo=	$('#txtEnrolNo').val();
			var loginAlias = $('#txtLoginAlias').val();
			var overtime = $('#overtime').is(':checked');
			var latemark = $('#latemark').is(':checked');
			var earlymark = $('#earlymark').is(':checked');
			var fullpf = $('#fullpf').is(':checked');
			var pt = $('#pt').is(':checked');
			var fixsalary = $('#fixsalary').is(':checked');
			var probation = $('#probation').is(':checked');
			var trainee = $('#trainee').is(':checked');
			var Company = CurrentCompanyId;

				// Validate required fields
			   var isValid = true;

				if (!initial) {
					$('#spnInitial').show();
					isValid = false;
				}
				else{
					$('#spnInitial').hide();
				}

				if (!firstName) {
					$('#spnFirstName').show();
					isValid = false;
				}
				else{
					$('#spnFirstName').hide();
				}

				// if (!employeeStringCode) {

				// 	isValid = false;
				// }

				// if (!employeeNumberCode) {

				// 	isValid = false;
				// }

				// if (!dateOfJoining) {
				//
				// 	isValid = false;
				// }

				// if (!branch) {
				//
				// 	isValid = false;
				// }

				// if (!grade) {
				// 	$('#ddlGrade').addClass('is-invalid');
				// 	$('#ddlGrade').next('.invalid-feedback').show();
				// 	isValid = false;
				// }

				// if (!shift) {

				// 	isValid = false;
				// }

				// if (!department) {

				// 	isValid = false;
				// }

				if (!loginAlias) {
					$('#spnLoginAlias').show();
					isValid = false;
				}
				else{
					$('#spnLoginAlias').hide();
				}
				if (!RoleId) {
					$('#spnRole').show();
					isValid = false;
				}
				else{
					$('#spnRole').hide();
				}
				if (!isValid) {
					$("#btnUpdateEmployee").prop("disabled", false);
					return;
				}
			// Create employeeData object
						var employeeData = {
						Id:employeeId,
						CompanyId:Company===""?null:Company,
						Initial: initial === "" ? null : initial,
						FirstName: firstName === "" ? null : firstName,
						MiddleName: middleName === "" ? null : middleName,
						LastName: lastName === "" ? null : lastName,
						FullName: `${initial} ${firstName} ${middleName} ${lastName}`.trim(),
						EmployeeCode: `${employeeNumberCode}`.trim(),
						AlfaCode: `${employeeStringCode}`.trim(),
						AlfaEmployeeCode: `${employeeStringCode}${employeeNumberCode}`.trim(),
						DateOfJoining: dateOfJoining === "" ? null : dateOfJoining,
						BranchId: branch === "" ? null : branch,
						GradeId: grade === "" ? null : grade,
						shiftMasterId: shift === "" ? null : shift,
						CTC:null,
						DesignationId: designation === "" ? null : designation,
						GrossSalary: grossSalary === "" ? null : grossSalary,
						CategoryId: category === "" ? null : category,
						BasicSalary: null,
						DepartmentId: department === "" ? null : department,
						EmployeeTypeId: employeeType === "" ? null : employeeType,
						DateOfBirth: dateOfBirth === "" ? null : dateOfBirth,
						RoleId: RoleId === "" ? null : RoleId,
						LoginAlias: loginAlias === "" ? null : loginAlias,
						Password: null,
						ReportingManagerId:reportingManager==""? null:reportingManager,
						SubBranch:subBranch==""? null:subBranch,
						EnrollNo:enrollNo==""? null:enrollNo,
						Overtime: overtime === "" ? false : overtime,
						Latemark: latemark === "" ? false : latemark,
						Earlymark: earlymark === "" ? false : earlymark,
						Fullpf: fullpf === "" ? false : fullpf,
						Pt: pt === "" ? false : pt,
						Fixsalary: fixsalary === "" ? false : fixsalary,
						Probation: probation === "" ? false : probation,
						Trainee: trainee === "" ? false : trainee,

						// Default values for properties not present in the JavaScript object


						CreatedBy: null,
						UpdatedBy: null,

						EmployeeProfileUrl: null,
						EmployeeSignatureUrl: null
					};
					//Add employee person info
					console.log("employeeData: "+ employeeData);
					var employeePersional=await getEmployeePersonalInfo();
					var employeeContact= await getEmployeeContactFromForm();

					var updateEmployee={
						vmEmployeeData:employeeData,
						EmployeePersonalInfo:employeePersional,
						EmployeeContact:employeeContact
					};
					console.log("updateEmployee",updateEmployee)

			// Send data to server using AJAX
				$.ajax({
					url: '@baseUrl/EmployeeMasterAPI/UpdateEmployee',
					type: 'POST',
					contentType: 'application/json',
					data: JSON.stringify(updateEmployee),
					success: function(response) {
						if (response.isSuccess) {
						round_success_noti(response.responseMessage);
							// resetAllEmployeeData(response.data)
						} else {
							round_error_noti(response.responseMessage);
						}
						$("#btnUpdateEmployee").prop("disabled", false);
					},
					error: function(xhr, status, error) {
						$("#btnUpdateEmployee").prop("disabled", false);

						console.error('Error:', error);
						console.error('Status:', status);
						console.error('Response Text:', xhr.responseText);
					}
				});

		});

		function resetAllEmployeeData(data)
		{
			$('#fileNameText').text("");
			$('#signFileNameText').text("");
			employeeList.splice(currentIndex, 1);
			employeeList.splice(currentIndex, 0, data);
			fillEmployeeForm(employeeList[currentIndex]);
			localStorage.removeItem('AllEmployeeData');
			localStorage.setItem('AllEmployeeData', JSON.stringify(employeeList));
		}


		// Add employee persional info
	async function getEmployeePersonalInfo() {
		// Helper function to set null for empty values
		const setNullIfEmpty = (value) => {
			return value === "" ? null : value;
		};
		// Collect data from the form and set null for empty values
		const employeePersonalInfo = {
			EmployeePersonalInfoId:setNullIfEmpty($("#EmployeePersonalInfoId").val()),
			Gender: setNullIfEmpty($('#ddlGender').val()),
			PersonalEmailId: setNullIfEmpty($('#inpPersonalEmailId').val()),
			FatherName: setNullIfEmpty($('#inpFatherName').val()),
			MotherName: setNullIfEmpty($('#inpMotherName').val()),
			DateOfBirth: setNullIfEmpty($('#inpDateOfBirth').val()),
			BloodGroup: setNullIfEmpty($('#ddlBloodGroup').val()),
			Height: setNullIfEmpty($('#inpHeight').val()),
			MaritalStatus: setNullIfEmpty($('#ddlMaritalStatus').val()),
			MarriageDate: setNullIfEmpty($('#inpMarriageDate').val()),
			MarkIdentification: setNullIfEmpty($('#inpMarkIdentification').val()),
			Religion: setNullIfEmpty($('#inpReligion').val()),
			Caste: setNullIfEmpty($('#ddlCast').val()),
			CastCategory: setNullIfEmpty($('#ddlCastCategory').val()),
			AadharCardNo: setNullIfEmpty($('#inpAadharCardNo').val()),
			PANNo: setNullIfEmpty($('#inpPanNo').val()),
			Dispensary: setNullIfEmpty($('#inpDispensary').val()),
			DoctorName: setNullIfEmpty($('#inpDoctorName').val()),
			DispensaryAddress: setNullIfEmpty($('#inpDispensaryAddress').val()),
			UANNumber: setNullIfEmpty($('#inpUanNumber').val()),
			DrivingLicense: setNullIfEmpty($('#inpDrivingLicense').val()),
			DrivingLicenseExpiry: setNullIfEmpty($('#inpDrivingLicenseExpiry').val()),
			RationCardType: setNullIfEmpty($('#ddlRationCardType').val()),
			RationCardNo: setNullIfEmpty($('#inpRationCardNo').val()),
			LinkedInId: setNullIfEmpty($('#inpLinkedInId').val()),
			TwitterId: setNullIfEmpty($('#inpTwitterId').val()),
			ProbationCompletionPeriod: setNullIfEmpty($('#inpProbationCompletionPeriod').val()),
			ProbationPeriodType: setNullIfEmpty($('input[name="probationPeriod"]:checked').val()),
			ManagerProbation: setNullIfEmpty($('#ddlManagerProbation').val()),
			ConfirmDate: setNullIfEmpty($('#inpConfirmDate').val()),
			RetirementDate: setNullIfEmpty($('#inpRetirementDate').val()),
			OfferDate: setNullIfEmpty($('#inpOfferDate').val()),
			TraineeCompletionPeriod: setNullIfEmpty($('#inpTraineeCompletionPeriod').val()),
			TraineePeriodType: setNullIfEmpty($('input[name="traininPeriod"]:checked').val()),
			CanteenCode: setNullIfEmpty($('#inpCanteenCode').val()),
			TallyLedgerName: setNullIfEmpty($('#ddlTallyLedgerName').val()),
			IsMetroCity: $('#rdoIsMetroCity').is(':checked'),
			AdultWorkerNo: setNullIfEmpty($('#inpAdultWorkerNo').val()),
			PhysicalDisability: setNullIfEmpty($('#inpPhysicalDisability').val()),
			MinimumWageSkillType: setNullIfEmpty($('#ddlMinimumWageSkillType').val()),
			VehicleNo: setNullIfEmpty($('#inpVehicleNo').val()),
			InsuranceNo: $('#rdoInsuranceNo').is(':checked'),
			DressCode: setNullIfEmpty($('#inpDressCode').val()),
			ShirtSize: setNullIfEmpty($('#inpShirtSize').val()),
			PantSize: setNullIfEmpty($('#inpPantSize').val()),
			ShoeSize: setNullIfEmpty($('#inpShoeSize').val()),
			EmployeeId :$('#EmployeeId').val(), // Replace with actual EmployeeId
			CreatedBy:null,
			UpdatedBy:null
		};

		console.log("employeePersonalInfo",employeePersonalInfo);

		return employeePersonalInfo;
		// Send data to the server using AJAX
		// $.ajax({
		//     url: '@baseUrl/EmployeePersonalInfoAPI/CreateEmployeePersonalInfo',
		//     type: 'POST',
		//     contentType: 'application/json',
		//     data: JSON.stringify(employeePersonalInfo),
		//     success: function(response) {
		//         if (response.isSuccess) {
		//             round_success_noti(response.responseMessage);
		//         } else {
		//             round_error_noti(response.responseMessage);
		//         }
		//     },
		//     error: function(xhr, status, error) {

		//         console.error('Error:', error);
		//         console.error('Status:', status);
		//         console.error('Response Text:', xhr.responseText);
		//     }
		// });
	}

	function GetEmployeeAdditionDetails(employeeId)
	{
		$.ajax({
			type: "GET",
			url: "@baseUrl/EmployeeMasterAPI/GetAllAdditionalInformation/"+employeeId,
			success: function(data) {
				console.log("Data received:", data);
				if (data.isSuccess)
				{
					fillEmployeePersonalInfoForm(data.data.employeePersonalInfo)
					setEmployeeContact(data.data.employeeContact);
				}
				else{
					round_error_noti(data.responseMessage);
				}
			},
			error: function(xhr, status, error) {
				console.error("AJAX Error: " + status + " - " + error);
			}
		})
	}

	//set personal employee info
	function fillEmployeePersonalInfoForm(employeePersonalInfo) {
		if(employeePersonalInfo!=null)
		{
			// Set values into form fields, handling null or undefined values
			$("#EmployeePersonalInfoId").val(employeePersonalInfo.employeePersonalInfoId||0)
			$('#ddlGender').val(employeePersonalInfo.gender || "Male");
			$('#inpPersonalEmailId').val(employeePersonalInfo.personalEmailId || "");
			$('#inpFatherName').val(employeePersonalInfo.fatherName || "");
			$('#inpMotherName').val(employeePersonalInfo.motherName || "");
			$('#inpDateOfBirth').val(employeePersonalInfo.dateOfBirth ? formatDate(employeePersonalInfo.dateOfBirth) : "");
			$('#ddlBloodGroup').val(employeePersonalInfo.bloodGroup || "");
			$('#inpHeight').val(employeePersonalInfo.height || "");
			$('#ddlMaritalStatus').val(employeePersonalInfo.maritalStatus || "");
			$('#inpMarriageDate').val(employeePersonalInfo.marriageDate ? formatDate(employeePersonalInfo.marriageDate) : "");
			$('#inpMarkIdentification').val(employeePersonalInfo.markIdentification || "");
			$('#inpReligion').val(employeePersonalInfo.religion || "");
			$('#ddlCast').val(employeePersonalInfo.caste || "");
			$('#ddlCastCategory').val(employeePersonalInfo.castCategory || "");
			$('#inpAadharCardNo').val(employeePersonalInfo.aadharCardNo || "");
			$('#inpPanNo').val(employeePersonalInfo.panNo || "");
			$('#inpDispensary').val(employeePersonalInfo.dispensary || "");
			$('#inpDoctorName').val(employeePersonalInfo.doctorName || "");
			$('#inpDispensaryAddress').val(employeePersonalInfo.dispensaryAddress || "");
			$('#inpUanNumber').val(employeePersonalInfo.uanNumber || "");
			$('#inpDrivingLicense').val(employeePersonalInfo.drivingLicense || "");
			$('#inpDrivingLicenseExpiry').val(employeePersonalInfo.drivingLicenseExpiry ? formatDate(employeePersonalInfo.drivingLicenseExpiry) : "");
			$('#ddlRationCardType').val(employeePersonalInfo.rationCardType || "");
			$('#inpRationCardNo').val(employeePersonalInfo.rationCardNo || "");
			$('#inpLinkedInId').val(employeePersonalInfo.linkedInId || "");
			$('#inpTwitterId').val(employeePersonalInfo.twitterId || "");
			$('#inpProbationCompletionPeriod').val(employeePersonalInfo.probationCompletionPeriod || "");
			$(`input[name="probationPeriod"][value="${employeePersonalInfo.probationPeriodType || "Months"}"]`).prop('checked', true);
			$('#ddlManagerProbation').val(employeePersonalInfo.managerProbation || "");
			$('#inpConfirmDate').val(employeePersonalInfo.confirmDate ? formatDate(employeePersonalInfo.confirmDate) : "");
			$('#inpRetirementDate').val(employeePersonalInfo.retirementDate ? formatDate(employeePersonalInfo.retirementDate) : "");
			$('#inpOfferDate').val(employeePersonalInfo.offerDate ? formatDate(employeePersonalInfo.offerDate) : "");
			$('#inpTraineeCompletionPeriod').val(employeePersonalInfo.traineeCompletionPeriod || "");
			$(`input[name="traininPeriod"][value="${employeePersonalInfo.traineePeriodType || "Months"}"]`).prop('checked', true);
			$('#inpCanteenCode').val(employeePersonalInfo.canteenCode || "");
			$('#ddlTallyLedgerName').val(employeePersonalInfo.tallyLedgerName || "");
			$('#rdoIsMetroCity').prop('checked', employeePersonalInfo.isMetroCity || false);
			$('#inpAdultWorkerNo').val(employeePersonalInfo.adultWorkerNo || "");
			$('#inpPhysicalDisability').val(employeePersonalInfo.physicalDisability || "");
			$('#ddlMinimumWageSkillType').val(employeePersonalInfo.minimumWageSkillType || "");
			$('#inpVehicleNo').val(employeePersonalInfo.vehicleNo || "");
			$('#rdoInsuranceNo').prop('checked', employeePersonalInfo.insuranceNo || false);
			$('#inpDressCode').val(employeePersonalInfo.dressCode || "");
			$('#inpShirtSize').val(employeePersonalInfo.shirtSize || "");
			$('#inpPantSize').val(employeePersonalInfo.pantSize || "");
			$('#inpShoeSize').val(employeePersonalInfo.shoeSize || "");
			$(".loaderTag").hide();
		}
		else{
			resetEmployeePersonalInfoForm();
		}
	}

	function resetEmployeePersonalInfoForm() {
		// Reset each form field to its default or empty value
		$("#EmployeePersonalInfoId").val(0);
		$('#ddlGender').val("Male");
		$('#inpPersonalEmailId').val("");
		$('#inpFatherName').val("");
		$('#inpMotherName').val("");
		$('#inpDateOfBirth').val("");
		$('#ddlBloodGroup').val("");
		$('#inpHeight').val("");
		$('#ddlMaritalStatus').val("");
		$('#inpMarriageDate').val("");
		$('#inpMarkIdentification').val("");
		$('#inpReligion').val("");
		$('#ddlCast').val("");
		$('#ddlCastCategory').val("");
		$('#inpAadharCardNo').val("");
		$('#inpPanNo').val("");
		$('#inpDispensary').val("");
		$('#inpDoctorName').val("");
		$('#inpDispensaryAddress').val("");
		$('#inpUanNumber').val("");
		$('#inpDrivingLicense').val("");
		$('#inpDrivingLicenseExpiry').val("");
		$('#ddlRationCardType').val("");
		$('#inpRationCardNo').val("");
		$('#inpLinkedInId').val("");
		$('#inpTwitterId').val("");
		$('#inpProbationCompletionPeriod').val("");
		$(`input[name="probationPeriod"][value="Months"]`).prop('checked', true);
		$('#ddlManagerProbation').val("");
		$('#inpConfirmDate').val("");
		$('#inpRetirementDate').val("");
		$('#inpOfferDate').val("");
		$('#inpTraineeCompletionPeriod').val("");
		$(`input[name="traininPeriod"][value="Months"]`).prop('checked', true);
		$('#inpCanteenCode').val("");
		$('#ddlTallyLedgerName').val("");
		$('#rdoIsMetroCity').prop('checked', false);
		$('#inpAdultWorkerNo').val("");
		$('#inpPhysicalDisability').val("");
		$('#ddlMinimumWageSkillType').val("");
		$('#inpVehicleNo').val("");
		$('#rdoInsuranceNo').prop('checked', false);
		$('#inpDressCode').val("");
		$('#inpShirtSize').val("");
		$('#inpPantSize').val("");
		$('#inpShoeSize').val("");
	    $(".loaderTag").hide();

	}

	function getEmployeeContactFromForm() {
		// Helper function to set null if the value is an empty string
		const setNullIfEmpty = (value) => {
			return value === "" ? null : value;
		};

		// Create an object to hold the EmployeeContact data
		var employeeContact = {
			EmployeeContactId: $('#employeeContactId').val()==""?0:$('#employeeContactId').val(),
			PresentAddress: setNullIfEmpty($('#txtPresentAddress').val().trim()),
			PresentTehsil: setNullIfEmpty($('#txtPresentTehsil').val().trim()),
			PresentDistrict: setNullIfEmpty($('#txtPresentDistrict').val().trim()),
			PresentCity: setNullIfEmpty($('#txtPresentCity').val().trim()),
			PresentState: setNullIfEmpty($('#ddlPresentState').val()),
			PresentPincode: setNullIfEmpty($('#txtPresentPincode').val().trim()),
			PresentThanaId: setNullIfEmpty($('#ddlPresentThana').val()),
			PermanentAddress: setNullIfEmpty($('#txtPermanentAddress').val().trim()),
			PermanentTehsil: setNullIfEmpty($('#txtPermanentTehsil').val().trim()),
			PermanentDistrict: setNullIfEmpty($('#txtPermanentDistrict').val().trim()),
			PermanentCity: setNullIfEmpty($('#txtPermanentCity').val().trim()),
			PermanentState: setNullIfEmpty($('#ddlPermanentState').val()),
			PermanentPincode: setNullIfEmpty($('#txtPermanentPincode').val().trim()),
			PermanentThanaId: setNullIfEmpty($('#ddlPermanentThana').val()),
			CountryId: setNullIfEmpty($('#ddlCountry').val()),
			WorkPhone: setNullIfEmpty($('#txtWorkPhone').val().trim()),
			PersonalPhone: setNullIfEmpty($('#txtPersonalPhone').val().trim()),
			OfficialEmail: setNullIfEmpty($('#txtOfficialEmail').val().trim()),
			Nationality: setNullIfEmpty($('#txtNationality').val().trim()),
			ExtensionNo: setNullIfEmpty($('#txtExtensionNo').val().trim()),
			MobileNo: setNullIfEmpty($('#txtMobileNo').val().trim()),
			SameAsPresentAddress: $('#chkSameAs').is(':checked'),
			EmployeeId: $('#EmployeeId').val(), // Set this to the appropriate employee ID if available
			
			CreatedBy: null // Replace with actual user information if available
		};

		return employeeContact;
	}


    function setEmployeeContact(data) {
		if(data!=null)
		{
			resetEmployeeContact();
			// Set text inputs and textareas
			$('#employeeContactId').val(data.employeeContactId);
			$('#txtPresentAddress').val(data.presentAddress);
			$('#txtPresentTehsil').val(data.presentTehsil || '');
			$('#txtPresentDistrict').val(data.presentDistrict);
			$('#txtPresentCity').val(data.presentCity);
			$('#txtPresentPincode').val(data.presentPincode);

			// Set select elements
			$('#ddlPresentState').val(data.presentState || '');
			$('#ddlPresentThana').val(data.presentThanaId || '');

			// Set permanent address fields
			$('#txtPermanentAddress').val(data.permanentAddress);
			$('#txtPermanentTehsil').val(data.permanentTehsil || '');
			$('#txtPermanentDistrict').val(data.permanentDistrict);
			$('#txtPermanentCity').val(data.permanentCity);
			$('#txtPermanentPincode').val(data.permanentPincode || '');
			$('#ddlPermanentState').val(data.permanentState || '');
			$('#ddlPermanentThana').val(data.permanentThanaId || '');

			// Set contact information
			$('#ddlCountry').val(data.countryId || '');
			$('#txtWorkPhone').val(data.workPhone || '');
			$('#txtPersonalPhone').val(data.personalPhone || '');
			$('#txtOfficialEmail').val(data.officialEmail || '');
			$('#txtNationality').val(data.nationality || '');
			$('#txtExtensionNo').val(data.extensionNo || '');
			$('#txtMobileNo').val(data.mobileNo || '');

			// Set checkbox
			$('#chkSameAs').prop('checked', data.sameAsPresentAddress || false);

			// Set employee ID if needed
			// Assuming you have a field for EmployeeId, otherwise you can ignore this
			// $('#employeeId').val(data.employeeId || '');
		}
		else{
			resetEmployeeContact();
		}

	}

     function resetEmployeeContact() {
		// Reset text inputs and textareas to empty strings
		$('#employeeContactId').val('');
		$('#txtPresentAddress').val('');
		$('#txtPresentTehsil').val('');
		$('#txtPresentDistrict').val('');
		$('#txtPresentCity').val('');
		$('#txtPresentPincode').val('');

		// Reset select elements to their default/placeholder option
		$('#ddlPresentState').prop('selectedIndex', 0);
		$('#ddlPresentThana').prop('selectedIndex', 0);

		// Reset permanent address fields
		$('#txtPermanentAddress').val('');
		$('#txtPermanentTehsil').val('');
		$('#txtPermanentDistrict').val('');
		$('#txtPermanentCity').val('');
		$('#txtPermanentPincode').val('');
		$('#ddlPermanentState').prop('selectedIndex', 0);
		$('#ddlPermanentThana').prop('selectedIndex', 0);

		// Reset contact information fields
		$('#ddlCountry').prop('selectedIndex', 0);
		$('#txtWorkPhone').val('');
		$('#txtPersonalPhone').val('');
		$('#txtOfficialEmail').val('');
		$('#txtNationality').val('');
		$('#txtExtensionNo').val('');
		$('#txtMobileNo').val('');

		// Uncheck the checkbox
		$('#chkSameAs').prop('checked', false);

		// Hide any visible error messages
		$('#employeeForm span[id^="spn"]').hide();
	}

	
</script>

<script>
	let cropper;
	let selectedFile;
	let currentCropTarget = '';
	let profileFile=null;
	let signatureFile=null;

	 $("#backArrow,#btnBackEmployee").click(() => {
			window.location.href = '@UIBaseUrlLayout/AdminPanel/EmployeeMaster/EmployeeMaster';
	 });
	 

	// Trigger file input
	$('#profileImage').click(() => $('#profileInput').click());

	// File selected
	$('#profileInput').change(function () {
		const file = this.files[0];
		// if (!file || !file.name.toLowerCase().endsWith(".jpg")) {
		// 	alert("Only JPG files are allowed.");
		// 	resetAll();
		// 	return;
		// }

		selectedFile = file;
		const reader = new FileReader();
		reader.onload = function (e) {
			$('#cropImagePreview').attr('src', e.target.result);
			$('#cropImagePreview').on('load', function () {
				// Initialize Cropper only after the image is fully loaded
				initCropper();
			});

			// Show the modal directly when the file is loaded
			const modal = new bootstrap.Modal(document.getElementById('cropModal'));
			modal.show();
		};
		reader.readAsDataURL(file);
	});

	// Function to initialize the cropper
	function initCropper() {
		const image = document.getElementById('cropImagePreview');

		// Destroy any previous cropper instance before creating a new one
		if (cropper) {
			cropper.destroy();
		}

		// Initialize cropper
		cropper = new Cropper(image, {
			aspectRatio: 1,
			viewMode: 1,
			autoCropArea: 1,
			ready() {
				// Optionally, you can set focus or trigger other UI updates after cropper is ready
			}
		});
	}

	// On Modal hidden - destroy cropper
	$('#cropModal').on('hidden.bs.modal', function () {
		if (cropper) {
			cropper.destroy();
			cropper = null;
		}
	});

	// // Confirm crop
	// $('#cropConfirmBtn').click(function () {
	// 	if (!cropper) {
	// 		alert("Cropper not initialized.");
	// 		return;
	// 	}

	// 	const canvas = cropper.getCroppedCanvas({ width: 150, height: 150 });
	// 	const dataURL = canvas.toDataURL("image/jpeg");

	// 	$('#profileImage').attr('src', dataURL); // Update the profile image
	// 	$('#fileNameText').text(selectedFile.name);
	// 	$('#fileInfo').show(); // Show the file info

	// 	// Hide modal
	// 	bootstrap.Modal.getInstance(document.getElementById('cropModal')).hide();
	// });

	// // Delete all
	$('#deleteBtn').click(() => resetProfile());

	function resetProfile() {
		$('#profileInput').val('');
		$('#profileImage').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/user-profile-png-image.png');
		$('#fileInfo').hide();
		selectedFile = null;
		profileFile=null;
		if (cropper) {
			cropper.destroy();
			cropper = null;
		}
	}


	$('#cropConfirmBtn').click(function () {
		if (!cropper) {
			alert("Cropper not initialized.");
			return;
		}
		const canvas = currentCropTarget === 'signature'
			? cropper.getCroppedCanvas({ width: 150, height: 80 })
			: cropper.getCroppedCanvas({ width: 150, height: 150 });

		const dataURL = canvas.toDataURL("image/jpeg");

		if (currentCropTarget === 'signature') {
			$('#empSignPreview').attr('src', dataURL);
			$('#signFileNameText').text(selectedFile.name);
			signatureFile=selectedFile;
			$('#signFileInfo').show();
		} else {
			$('#profileImage').attr('src', dataURL);
			$('#fileNameText').text(selectedFile.name);
			profileFile=selectedFile;
			$('#fileInfo').show();
		}
		$("#uploadBtnTag").show();
	$('#cropConfirmBtn').blur(); // <-- remove focus from button
	bootstrap.Modal.getInstance(document.getElementById('cropModal')).hide();
});



	//signature

	$('#empSignPreview').click(() => $('#empSignatureInput').click());

	// Signature file selected
	$('#empSignatureInput').change(function () {
		const file = this.files[0];

		if (!file || !file.name.toLowerCase().endsWith(".jpg")) {
			alert("Only JPG files are allowed for signature.");
			resetSignature();
			return;
		}

		selectedFile = file;
		currentCropTarget = 'signature';

		const reader = new FileReader();
		reader.onload = function (e) {
			$('#cropImagePreview').attr('src', e.target.result);
			$('#cropImagePreview').on('load', function () {
				initCropperSignature(); // for signature aspect
			});

			const modal = new bootstrap.Modal(document.getElementById('cropModal'));
			modal.show();
		};
		reader.readAsDataURL(file);
	});

	// Delete Signature
	$('#deleteSignBtn').click(() => resetSignature());

	function initCropperSignature() {
		const image = document.getElementById('cropImagePreview');
		if (cropper) cropper.destroy();

		cropper = new Cropper(image, {
			aspectRatio: 150 / 80,
			viewMode: 1,
			autoCropArea: 1
		});
	}

	function resetSignature() {
		$('#empSignatureInput').val('');
		$('#empSignPreview').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/default-signature.jpg');
		$('#signFileInfo').hide();
		selectedFile = null;
		signatureFile=null;
		if (cropper) {
			cropper.destroy();
			cropper = null;
		}
	}

	

  $("#btnUpload").click(() => {
		$("#btnUpload").prop("disabled", true);
		var employeeId = $('#EmployeeId').val();
			var profileFile = $('#profileInput')[0].files[0];
			var signatureFile = $('#empSignatureInput')[0].files[0];
			
			var profileFormdata = new FormData();
		profileFormdata.append("EmployeeId", employeeId);
		profileFormdata.append("EmployeeProfileFile", profileFile);
		profileFormdata.append("EmployeeSignatureFile", signatureFile);
		profileFormdata.append("EmployeeSignatureUrl", EmployeeSignatureUrl);
		profileFormdata.append("EmployeeProfileUrl", EmployeeProfileUrl);
			console.log(profileFormdata);
		// Example of sending the FormData to the server using AJAX
		$.ajax({
			url: '@baseUrl/EmployeeMasterAPI/UpdateEmployeeProfileAndSignature', // Replace with your actual endpoint
			type: 'POST',
			data: profileFormdata,
			processData: false,
			contentType: false,
			success: function(response) {
			  if (response.isSuccess) 
			  {
				  var employee=response.data;
				  console.log(response.data);
						  resetAllEmployeeData(employee);
					// if(employee.employeeProfileUrl!=null )
					// {
					// 	$('#profileImage').attr('src',employee.employeeProfileUrl );
					// 	EmployeeProfileUrl=employee.employeeProfileUrl;
					// }
					// else{
					// 	$('#profileImage').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/user-profile-png-image.png');
					// }
					// if(employee.employeeSignatureUrl!=null){
					// 	EmployeeSignatureUrl=employee.employeeSignatureUrl;
					// 	$('#empSignPreview').attr('src', employee.employeeSignatureUrl);
					// }
					// else{
					// 	$('#empSignPreview').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/default-signature.jpg');
					// }
				round_success_noti(response.responseMessage);
			  } 
				else {
					round_error_noti(response.responseMessage);
				}
					$("#btnUpload").prop("disabled", false);
			},
			error: function(xhr, status, error) {
				$("#btnUpload").prop("disabled", false);
				console.error('Upload failed', error);
			}
		});
	});

</script>




<script>
	const tabMap = {
		"EmployeePersonalInfo": "@Url.Action("EmployeeInfo", "PartialView")",
		"Contact": "@Url.Action("Contact", "PartialView")",
		"EmergencyContacts": "@Url.Action("EmergencyContact", "PartialView")",
		"ReportingContract": "@Url.Action("Reporting", "PartialView")",
		"Attachments": "@Url.Action("Attachments", "PartialView")",
		"Allowance": "@Url.Action("Allowance", "PartialView")",
		"Salary": "@Url.Action("Salary", "PartialView")"
	};

	$(document).ready(function () {
		// Load all partial views on page load
		for (let key in tabMap) {
			$('#' + key).html('<div class="text-center p-3"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');
			$.get(tabMap[key], function (response) {
				$('#' + key).html(response);
			});
		}

		// Handle tab click
		$('.nav-link').on('click', function (e) {
			e.preventDefault();

			$('.nav-link').removeClass('active');
			$(this).addClass('active');

			let text = $(this).text().trim();
			let idMap = {
				"Employee Personal Info": "EmployeePersonalInfo",
				"Contact": "Contact",
				"Emergency Contact(s)": "EmergencyContacts",
				"Reporting & Contract": "ReportingContract",
				"Attachments": "Attachments",
				"Allowance": "Allowance",
				"Salary": "Salary"
			};

			let targetId = idMap[text];

			if (!targetId) return;

			$('.partial-section').addClass('d-none');
			$('#' + targetId).removeClass('d-none');
		});

		// Trigger default tab
		$('.nav-link.active').trigger('click');
	});

	$(document).ready(function () {
	  $('#viewEmployeeHistroy').on('click', function () {
		const baseUIOrginUrl = window.location.origin; 
		window.location.href = baseUIOrginUrl + '/EmployeeMaster/EmployeeHistory';

	  });
	});

</script>

<script>

	$(document).ready(async function () {
		await loadSalaryAllowance();
	});

	async function loadSalaryAllowance() {
		try {
			const response = await fetch('@baseUrl/EmployeeSalaryAllowanceAPI/GetEmployeeSalaryAllowanceByEmployeeId/'+CurrentEmployeeId, {
				method: 'GET',
				headers: {
					'Accept': 'application/json'
				}
			});

			const data = await response.json();

			if (data.isSuccess) {

				console.log("Salary loaded:", data.data);
				var arrayDta=data.data;
			 bindSalaryAllowance (arrayDta);
			}
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}

	
     function formatCurrency(amount) {
		return '₹' + amount.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
	}

	function bindSalaryAllowance(salaryData) {
		// Earnings
		$('#monthlyGross').text(formatCurrency(salaryData.totalGrossSalary));
		$('#AnualGross').text(formatCurrency(salaryData.totalGrossSalary * 12));

		$('#basicSalaryMonth').text(formatCurrency(salaryData.basicSalary));
		$('#basicSalaryYear').text(formatCurrency(salaryData.basicSalary * 12));
		$('#hraMonth').text(formatCurrency(salaryData.hra));
		$('#hraYear').text(formatCurrency(salaryData.hra * 12));
		$('#deputationAllowanceMonth').text(formatCurrency(salaryData.deputationAllowance));
		$('#deputationAllowanceYear').text(formatCurrency(salaryData.deputationAllowance * 12));
		$('#conveyanceAllowanceMonth').text(formatCurrency(salaryData.conveyanceAllowance));
		$('#conveyanceAllowanceYear').text(formatCurrency(salaryData.conveyanceAllowance * 12));
		$('#medicalAllowanceMonth').text(formatCurrency(salaryData.medicalAllowance));
		$('#medicalAllowanceYear').text(formatCurrency(salaryData.medicalAllowance * 12));
		$('#childEducationAllowanceMonth').text(formatCurrency(salaryData.childEducationAllowance));
		$('#childEducationAllowanceYear').text(formatCurrency(salaryData.childEducationAllowance * 12));
		$('#totalGrossMonth').text(formatCurrency(salaryData.totalGrossSalary));
		$('#totalGrossYear').text(formatCurrency(salaryData.totalGrossSalary * 12));

		// Deductions
		$('#pfMonth').text(formatCurrency(salaryData.employeePF));
		$('#pfYear').text(formatCurrency(salaryData.employeePF * 12));
		$('#esiMonth').text(formatCurrency(salaryData.employeeESI));
		$('#esiYear').text(formatCurrency(salaryData.employeeESI * 12));
		$('#ptMonth').text(formatCurrency(salaryData.professionalTax));
		$('#ptYear').text(formatCurrency(salaryData.professionalTax * 12));
		$('#groupMedicalMonth').text(formatCurrency(salaryData.groupMedical));
		$('#groupMedicalYear').text(formatCurrency(salaryData.groupMedical * 12));
		$('#termInsuranceMonth').text(formatCurrency(salaryData.termInsurance));
		$('#termInsuranceYear').text(formatCurrency(salaryData.termInsurance * 12));
		$('#totalDeductionMonth').text(formatCurrency(salaryData.totalDeductions));
		$('#totalDeductionYear').text(formatCurrency(salaryData.totalDeductions * 12));

		// Net Salary
		$('#netSalaryMonth').text(formatCurrency(salaryData.netSalary));
		$('#netSalaryYear').text(formatCurrency(salaryData.netSalary * 12));

		// CTC calculation
		$('#CalculationGrossMonth').text(formatCurrency(salaryData.ctc));
		$('#CalculationGrossYear').text(formatCurrency(salaryData.ctc * 12));
		$('#CalculationPFMonth').text(formatCurrency(salaryData.employeePF));
		$('#CalculationPFYear').text(formatCurrency(salaryData.employeePF * 12));
		$('#CalculationESIMonth').text(formatCurrency(salaryData.employeeESI));
		$('#CalculationESIMonth').text(formatCurrency(salaryData.employeeESI * 12));
		// CTC
		$('#ctcMonth').text(formatCurrency(salaryData.ctc));
		$('#ctcYear').text(formatCurrency(salaryData.ctc * 12));

		// Summary
		$('#summaryCtc').text(formatCurrency(salaryData.ctc));
		$('#summaryNet').text(formatCurrency(salaryData.netSalary));
		$('#summaryAnnual').text(formatCurrency(salaryData.ctc * 12));
	}


</script>



