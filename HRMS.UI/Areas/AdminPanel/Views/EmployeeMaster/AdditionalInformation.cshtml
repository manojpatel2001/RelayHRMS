@inject IConfiguration Configuration
@{
	ViewData["Title"] = "Additional Information";
	Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
	string UIBaseUrlLayout = Configuration["UIBaseUrlSettings:baseUrl"];
	var uri = new Uri(baseUrl);
	string baseDomainUrl = $"{uri.Scheme}://{uri.Host}:{uri.Port}";
}
<style>
	#profileImage {
		width: 150px;
		height: 150px;
		border-radius: 50%;
		object-fit: cover;
		cursor: pointer;
	}

	/* #fileInfo {
		margin-top: 5px;
		display: flex;
		align-items: center;
		gap: 8px;
	}

		#fileInfo small {
			color: green;
		}

		#fileInfo i {
			cursor: pointer;
			color: red;
		} */



	#cropModal .modal-dialog {
		max-width: 600px; /* Optional: limit modal width */
	}

	#cropModal .modal-body {
		max-height: 70vh;
		overflow: auto;
	}

	#cropImagePreview {
		max-width: 100%;
		max-height: 60vh;
		display: block;
		margin: 0 auto;
	}

	.nav-link {
		text-align: center;
		font-size: 14px;
		color: #333 !important;
		transition: color 0.3s;
	}

		.nav-link i {
			font-size: 20px;
			display: block;
			margin-bottom: 4px;
			color: #666;
			transition: color 0.3s;
		}

		/* Hover and Active (Text + Icon) */
		.nav-link:hover,
		.nav-link:hover i,
		.nav-link.active,
		.nav-link.active i {
			color: #007bff !important;
		}

	.navbar-nav {
		justify-content: space-around;
		width: 100%;
	}

	
	.light-grey-bg {
		background-color: #f8f9fa; 
	}
	
</style>



<div class="card" id="employeeDetailsCard">

	<div class="card-header bg-primary text-white">
		<div class="d-flex justify-content-between align-items-center">
			<!-- Left: Title -->
			<div>
				<h5 class="mb-0">Employee Details</h5>
			</div>

			<div class="mx-3 flex-grow-1 d-flex justify-content-center">
				<label for="searchBox" class=" mt-1 text-dark">Search:&nbsp;&nbsp;</label>
				<input type="text" class="form-control" placeholder="Employee Code or Name" id="searchBox" style="width: 30%; height: 30px;" />
			</div>

			<!-- Right: Back Arrow -->
			<div>
				<i class="fas fa-arrow-circle-left cursor-pointer text-dark" id="backArrow"></i>

			</div>
		</div>
	</div>


	<div class="card-body" style="font-size:12px;">
		<div class="row">
			<div class="col-md-12 bg-light py-2">
				<div class="d-flex justify-content-between">
					<span class="text-danger cursor-pointer">
						<i class="fas fa-angle-double-left"></i> Previous
					</span>

					<span class="text-danger cursor-pointer">
						Next <i class="fas fa-angle-double-right"></i>
					</span>
				</div>
			</div>
		</div>

		<div class="row mt-2">
			<!-- Left Side: Form Data -->
			<div class="col-md-8">
				
				
				<div class="card-body" id="editSectionEmoplyee" >
					<form >
						<div class="row">
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlInitial">
										<option value="">Select</option>
										<option>Mr.</option>
										<option>Mrs.</option>
										<option>Ms.</option>
									</select>
									<label class="floating-label" for="ddlInitial">Initial<span class="required-star">*</span></label>

								</div>
								<span id="spnInitial" style="color:red; display:none;">Please Select Initial</span>

							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtFirstName" placeholder="First Name">
									<label class="floating-label" for="txtFirstName">First Name<span class="required-star">*</span></label>

								</div>
								<span id="spnFirstName" style="color:red; display:none;">Please Enter First Name</span>

							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtMiddleName" placeholder="Middle Name">
									<label class="floating-label" for="txtMiddleName">Middle Name</label>
								</div>
							</div>
						</div>

						<div class="row">
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtLastName" placeholder="Last Name">
									<label class="floating-label" for="txtLastName">Last Name</label>
								</div>
							</div>
							<div class="col-md-4">
								<div class="row">

									<div class="col-md-5">
										<div class="form-group mt-3 position-relative">
											Employee Code<span class="required-star">*</span>:
										</div>
									</div>
									<div class="col-md-4 p-0">
										<div class="form-group mt-3 position-relative">
											<input type="text" readonly class="form-control floating-input" id="txtEmpCode" placeholder="HRMS" value="">
										</div>
									</div>
									<div class="col-md-3">
										<div class="form-group mt-3 position-relative">
											<input type="text" readonly class="form-control floating-input" id="txtNumberEmpCode" placeholder="0001" value="">
										</div>

									</div>
									<span id="spnStringCode" style="color:red; display:none;">Please Enter String Code</span>
									<span id="spnNumberCode" style="color:red; display:none;">Please Select Number Code</span>

								</div>

							</div>

							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="date" class="form-control floating-input" id="doj" placeholder=" ">
									<label class="floating-label" for="doj">Date of Joining<span class="required-star">*</span></label>
								</div>
								<span id="spnDoj" style="color:red; display:none;">Please Select Date Of Joining</span>

							</div>
						</div>

						<div class="row">
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlBranch">
										<option value="">Select</option>
									</select>
									<label class="floating-label" for="ddlBranch">Branch<span class="required-star">*</span></label>
								</div>
								<span id="spnBranch" style="color:red; display:none;">Please Select Branch</span>

							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlGrade">
										<option value="">Select</option>
										@* 									<option value="">MANAGEMENT</option>
 *@								</select>
									<label class="floating-label" for="ddlGrade">Grade<span class="required-star">*</span></label>
								</div>
								<span id="spnGrade" style="color:red; display:none;">Please Select Grade</span>

							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlShift">
										<option value="">Select</option>
									</select>
									<label class="floating-label" for="ddlShift">Shift<span class="required-star">*</span></label>
								</div>
								<span id="spnShift" style="color:red; display:none;">Please Select Shift</span>

							</div>



							@* <div class="col-md-4">
							<div class="form-group mt-3 position-relative">
								<input type="text" class="form-control floating-input" id="txtCTC" placeholder=" ">
								<label class="floating-label" for="txtCTC">CTC</label>
							</div>
						</div> *@
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlDesignation">
										<option value="">Select </option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlDesignation">Designation<span class="required-star">*</span></label>
								</div>
								<span id="spnDesignation" style="color:red; display:none;">Please Select Designation</span>

							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="text" class="form-control floating-input" id="txtGrossSalary" placeholder="Gross Salary " step="1" min="0" oninput="this.value = this.value.replace(/[^0-9]/g, '')">
									<label class="floating-label" for="txtGrossSalary">Gross Salary </label>
								</div>
							</div>


							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlCategory">
										<option value="">Select</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlCategory">Category<span class="required-star">*</span></label>
								</div>
								<span id="spnCategory" style="color:red; display:none;">Please Select Category</span>

							</div>
							
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlDepartment">
										<option value="">Select</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlDepartment">Department<span class="required-star">*</span></label>
								</div>
								<span id="spnDepartment" style="color:red; display:none;">Please Select Department</span>

							</div>



							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlEmpType">
										<option value="">Select</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlEmpType">Employee Type<span class="required-star">*</span></label>
								</div>
								<span id="spnEmployeeType" style="color:red; display:none;">Please Select Employee Type</span>

							</div>

							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="date" class="form-control floating-input" id="dob" placeholder=" ">
									<label class="floating-label" for="dob">Date of Birth<span class="required-star">*</span></label>
								</div>
								<span id="spnBirth" style="color:red; display:none;">Please Select Date Of Birth</span>

							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlRole">
										<option value="">Select</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlRole">Role<span class="required-star">*</span></label>
								</div>
								<span id="spnRole" style="color:red; display:none;">Please select Role</span>

							</div>

							<div class="col-md-4">
								<div class="form-group mt-3">
									@* <label for="txtLoginAlias">Login Alias<span class="required-star">*</span></label>
*@
									<div class="input-group">
										<!-- Prefix text inside the input group -->
										<!-- Input field -->
										<input type="text" class="form-control floating-input w-50" id="txtLoginAlias" placeholder="Login Alias">
										<span class="input-group-text p-0 w-50" id="txtDomainName"
											  style="white-space: nowrap;
											 overflow: hidden;
											 text-overflow: ellipsis;
											 display: inline-block;
											 padding: 6px 10px;">
										</span>

									</div>

									<!-- Error message -->
									<span id="spnLoginAlias" style="color:red; display:none;">Please Enter Login Alias</span>
								</div>
							</div>




							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<input type="password" class="form-control floating-input" id="txtPassword" value="Relay@@123" placeholder="Password" style="padding-right: 40px;">
									<label class="floating-label" for="txtPassword">Password <span class="required-star">*</span></label>

									<!-- Boxicons eye icon -->
									<i id="togglePassword" class='bx bx-show'
									   style="position: absolute; top: 50%; right: 10px; transform: translateY(-50%); cursor: pointer; font-size: 1.2rem; color: #666;">
									</i>
								</div>

								<span id="spnPassword" style="color:red; display:none;">Please Enter Password</span>
								<span id="spnPasswordError" style="color:red; display:none;">Please Enter Valid Password</span>
							</div>
							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-select floating-input" id="ddlWeekOfAssign">
										<option value="">Select</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="ddlWeekOfAssign">WeekOff Assign</label>
								</div>
								<span id="spnWeekOff" style="color:red; display:none;">Please Enter Week Off</span>

							</div>

							<div class="col-md-4">
								<div class="form-group mt-3 position-relative">
									<select class="form-control floating-input" id="drpReporting">
										<option disabled selected value="">Select Reporting</option>
										<!-- Add your options here -->
									</select>
									<label class="floating-label" for="drpReporting">Reporting Manager </label>
								</div>
							</div>
							<div class="col-md-2">
								<div class="form-check mt-4">
									<input class="form-check-input" type="checkbox" id="pt" >
									<label class="form-check-label" for="pt">PT</label>
								</div>
							</div>

							<div class="col-md-2">
								<div class="form-check mt-4">
									<input class="form-check-input" type="checkbox" id="checkInOut">
									<label class="form-check-label" for="checkInOut">Punch In Out</label>
								</div>
							</div>

						</div>

						
					<div class="row mt-3" >
						<div class="col-md-2"></div>
						<div class="col-md-8 text-center">
							<button type="button" class="btn btn-dark px-5 m-2 " id="btnBackEmployee">Back</button>
@* 							<button type="reset" class="btn btn-secondary px-5" id="btnEmployeeClear">Clear</button>
 *@							<button type="button" class="btn btn-primary px-5" id="btnUpdateEmployee" style="background-color:#2395c6; color:white;">Update</button>

						</div>
						<div class="col-md-2"></div>
					</div>
					</form>
			     </div>
				

			</div>

			<!-- Right Side: Upload Image/Signature -->
			<!-- Right Side: Upload Image/Signature -->
			<div class="col-md-4">

				<!-- PHOTO Upload -->
				<div class="mb-4 text-center">
					<label>Profile Picture</label><br>

					<img id="profileImage"
						 src="@baseDomainUrl/uploads/defaultuserprofile/user-profile-png-image.png"
						 alt="Profile Image"
						 style="width: 150px; height: 150px; cursor: pointer;" />

					<input type="file" id="profileInput" accept="image/jpeg" class="d-none" />

					<!-- Show filename BELOW image -->
					<div id="fileInfo" class="mt-2" style="display: none; margin-left:20px;">
						<p>
							<span id="fileNameText" class="text-success"></span>
							<span id="deleteBtn">
								<i class="fas fa-trash text-danger ms-2 cursor-pointer" aria-hidden="true"></i>
							</span>
						</p>
					</div>
				</div>

				<!-- SIGNATURE Upload -->
				<div class="mb-4 text-center">
					<label>Upload Signature</label><br>

					<img id="empSignPreview"
						 src="@baseDomainUrl/uploads/defaultuserprofile/default-signature.jpg"
						 style="width: 150px; height: 80px; cursor: pointer;"
						 class="img-thumbnail" />

					<input type="file" id="empSignatureInput" class="d-none" accept=".jpg,.jpeg" />

					<!-- Show signature filename BELOW image -->
					<div id="signFileInfo" class="mt-2" style="display: none;">
						<p>
							<span id="signFileNameText" class="text-success"></span>
							<span id="deleteSignBtn">
								<i class="fas fa-trash text-danger ms-2 cursor-pointer" aria-hidden="true"></i>
							</span>
						</p>
					</div>
				</div>

				<!-- Upload button -->
				<div class="text-center mt-4">
					<div id="uploadBtnTag" class="mt-2" style="display: none;">
						<button type="button" class="btn btn-primary" id="btnUpload" style="background-color:#2395c6; color:white;">
							Upload
						</button>
					</div>
				</div>

			</div>


		</div>

		<div class="row">
			<div class="col-md-12  py-2">
				<div class="d-flex justify-content-between">
					<span><strong>Profile Last Updated By:</strong>
						<span id="lastUpdatedBy"></span>
				     </span>
					<span class="text-danger cursor-pointer " id="viewEmployeeHistroy">
						<i class="fas fa-history"></i> View Employee History
					</span>
				</div>
			</div>
		</div>

	</div>
</div>


<!-- Modal HTML -->
<div class="modal" id="cropModal" tabindex="-1" aria-labelledby="cropModalLabel" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="cropModalLabel">Crop Profile Image</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<img id="cropImagePreview" src="" alt="Image preview" class="img-fluid">
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary" id="cropConfirmBtn">Confirm Crop</button>
			</div>
		</div>
	</div>
</div>

<!--Addition menu-->
	<div class="card shadow mt-3 ">
		<div class="card-body p-0">
		<nav class="navbar navbar-expand-lg navbar-light bg-light rounded-top addition-menu">
				<div class="container-fluid">
					<div class="collapse navbar-collapse show" id="navbarTabsOnly">
						<ul class="navbar-nav d-flex flex-wrap text-center">
							<li class="nav-item">
								<a class="nav-link active" href="#">
									<i class="fas fa-id-card"></i>
									Employee Personal Info
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link " href="#">
									<i class="fas fa-phone-alt"></i>
									Contact
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-user-shield"></i>
									Emergency Contact(s)
								</a>
							</li>
							
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-briefcase"></i>
									Reporting & Contract
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-paperclip"></i>
									Attachments
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-money-bill-wave"></i>
									Allowance
								</a>
							</li>
							<li class="nav-item">
								<a class="nav-link" href="#">
									<i class="fas fa-coins"></i>
									Salary
								</a>
							</li>
						</ul>
					</div>
				</div>
			</nav>

		</div>
	<div id="partialViewContainer">
		<div id="EmployeePersonalInfo" class="partial-section"></div>
		<div id="Contact" class="partial-section d-none"></div>
		<div id="EmergencyContacts" class="partial-section d-none"></div>
		<div id="ReportingContract" class="partial-section d-none"></div>
		<div id="Attachments" class="partial-section d-none"></div>
		<div id="Allowance" class="partial-section d-none"></div>
		<div id="Salary" class="partial-section d-none"></div>
	</div>


	</div>

	

<!-- CropperJS CSS & JS -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.css" rel="stylesheet">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.13/cropper.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">


<script>
	
		let employeeList = [];
		let currentIndex =0;
		let CurrentEmployeeId=localStorage.getItem('CurrentEmployeeId');
		const savedCompany = localStorage.getItem('selectedCompany');
		var companyDetails = JSON.parse(savedCompany);
		const CurrentCompanyId=companyDetails.CompanyId;
		// console.log("CurrentEmployeeId:",CurrentEmployeeId);
		// console.log("CurrentCompanyId:",CurrentCompanyId);
		var EmployeeProfileUrl="";
		var EmployeeSignatureUrl="";
	
	function formatDate(date) {
		if (!date) return '';
		var d = new Date(date);
		return d.toISOString().split('T')[0];
	}

	$(document).ready( async function () {
		//await LoadCompanyDetails();
			await Promise.all([bindBranch(),loadBindRoleOption(),bindReporting(), bindDesignation(), bindDepartment(), bindGrade(),bindCategory(),bindEmployeeType(),bindShift(),loadBindbusinessSegmentOption()]);
		await new Promise(resolve => setTimeout(resolve, 1000));

		// $('#companyDropdown').change(async function() {
		// 	var selectedCompany = $(this).val();
		// 	if (selectedCompany) {
		// 		CurrentEmployeeId=0;
		// 		getEmployeeDetailsByCompanyId(selectedCompany);
		//     }
		// });
	    //$('#companyDropdown').val(CurrentCompanyId);
		// var Company = $('#companyDropdown').val();
		if (!CurrentCompanyId) {
			round_error_noti("Please select company");
			return;
		}
	  getEmployeeDetailsByCompanyId(CurrentCompanyId);


	  $("#ddlBranch").change(()=>{
			LoadWeekOffMaster();
		})
		$('#txtLoginAlias').on('input', function () {
			var inputVal = $(this).val();
			var domain = $('#txtDomainName').text().trim();

			if (inputVal.includes('@@')) {
				round_error_noti(`The domain "${domain}" is already added.`);

				// Optionally remove the '@@' from the input
				$(this).val(inputVal.replace('@@', ''));
			}
		});

		$('#togglePassword').click(function() {
			let passwordInput = $('#txtPassword');
			let type = passwordInput.attr('type') === 'password' ? 'text' : 'password';
			passwordInput.attr('type', type);

			// Toggle icon class
			$(this).toggleClass('bx-show bx-hide');
		});
	});
	function getEmployeeDetailsByCompanyId(company)
	{
	 $.ajax({
			type: "GET",
			url: "@baseUrl/EmployeeMasterAPI/GetAllEmployeeForUpdate"+ "?companyId=" + company,
			success: function(data) {
				console.log("Data received:", data);
				if (data.isSuccess)
				{
					employeeList=data.data;
					if(CurrentEmployeeId==0)
					{
					 currentIndex=0;
					}
					else{
					currentIndex=findIndexById(CurrentEmployeeId);
					}
					fillEmployeeForm(employeeList[currentIndex]);
				}
				else{
					round_error_noti(data.responseMessage);
						round_error_noti(data.responseMessage);
						setTimeout(function() {
							window.location.href = "@UIBaseUrlLayout/AdminPanel/EmployeeMaster/EmployeeMaster";
						}, 1000);
				}
			},
			error: function(xhr, status, error) {
				console.error("AJAX Error: " + status + " - " + error);
			}
		})
	}
	function findIndexById(idToFind) {
		
		const index = employeeList.findIndex(function(obj) {
			return obj.id == idToFind; // Using == to allow type coercion
		});

		console.log('Found Index:', index);
		return index;
	}


	// Sample fill function
		function fillEmployeeForm(employee) {
		// Set values into form fields, handling null or undefined values directly
		$('#EmployeeId').val(employee.id || '');
		CurrentEmployeeId = employee.id || '';

		// Personal Information
		$('#ddlInitial').val(employee.initial || '');
		$('#txtFirstName').val(employee.firstName || '');
		$('#txtMiddleName').val(employee.middleName || '');
		$('#txtLastName').val(employee.lastName || '');
		$('#txtEmpCode').val(employee.alfaCode || '');
		$('#txtNumberEmpCode').val(employee.employeeCode || '');
		$('#doj').val(formatDate(employee.dateOfJoining) || '');
		$('#ddlBranch').val(employee.branchId || '');
		LoadWeekOffMaster();
		$('#ddlGrade').val(employee.gradeId || '');
		$('#ddlShift').val(employee.shiftMasterId || '');
		$('#txtCTC').val(employee.ctc || '');
		$('#ddlDesignation').val(employee.designationId || '');
		$('#txtGrossSalary').val(employee.grossSalary || '');
		$('#ddlCategory').val(employee.categoryId || '');
		$('#txtBasicSalary').val(employee.basicSalary || '');
		$('#ddlDepartment').val(employee.departmentId || '');
		$('#ddlEmpType').val(employee.employeeTypeId || '');
		$('#dob').val(formatDate(employee.dateOfBirth) || '');
		$('#ddlRole').val(employee.roleId || '');
		$('#drpReporting').val(employee.reportingManagerId || '');

		// Checkboxes
		$('#pt').prop('checked', employee.pt || false);
		$('#checkInOut').prop('checked', employee.isPermissionPunchInOut || false);
		$('#chkSameAs').prop('checked', employee.sameAsPresentAddress || false);

		// Other fields
		$('#ddlWeekOfAssign').val(employee.weekOffDetailsId || '');

		// Login Alias
		if (employee.loginAlias) {
			const parts = employee.loginAlias.split('@@');
			$('#txtLoginAlias').val(parts[0] || '');
			$('#txtDomainName').text(parts[1] ? '@@' + parts[1] : '');
		}

		// Personal Info
		$('#ddlGender').val(employee.gender || '');
		$('#inpPersonalEmailId').val(employee.personalEmailId || '');
		$('#inpFatherName').val(employee.fatherName || '');
		$('#inpMotherName').val(employee.motherName || '');
		$('#ddlBloodGroup').val(employee.bloodGroup || '');
		$('#inpHeight').val(employee.height || '');
		$('#ddlMaritalStatus').val(employee.maritalStatus || '');
		$('#inpMarriageDate').val(employee.marriageDate || '');
		$('#inpMarkIdentification').val(employee.markIdentification || '');
		$('#inpReligion').val(employee.religion || '');
		$('#inpCaste').val(employee.caste || '');
		$('#ddlCasteCategory').val(employee.castCategory || '');
		$('#inpAadharCardNo').val(employee.aadharCardNo || '');
		$('#inpPanNo').val(employee.panNo || '');
		$('#inpDispensary').val(employee.dispensary || '');
		$('#inpDoctorName').val(employee.doctorName || '');
		$('#inpDispensaryAddress').val(employee.dispensaryAddress || '');
		$('#inpUanNumber').val(employee.uanNumber || '');
		$('#inpDrivingLicense').val(employee.drivingLicense || '');
		$('#inpDrivingLicenseExpiry').val(employee.drivingLicenseExpiry || '');
		$('#ddlRationCardType').val(employee.rationCardType || '');
		$('#inpRationCardNo').val(employee.rationCardNo || '');
		$('#inpProbationCompletionPeriod').val(employee.probationCompletionPeriod || '');
		$('input[name="probationPeriod"]').val(employee.probationPeriodType || '');
		$('#ddlManagerProbation').val(employee.managerProbationId || '');
		$('#inpConfirmDate').val(formatDate(employee.confirmDate) || '');
		$('#inpRetirementDate').val(employee.retirementDate || '');
		$('#inpOfferDate').val(formatDate(employee.offerDate) || '');
		$('#inpTraineeCompletionPeriod').val(employee.traineeCompletionPeriod || '');
		$('input[name="trainingPeriod"]').val(employee.traineePeriodType || '');

		// Contact Details
		$('#txtPresentAddress').val(employee.presentAddress || '');
		$('#txtPresentTehsil').val(employee.presentTehsil || '');
		$('#txtPresentDistrict').val(employee.presentDistrict || '');
		$('#txtPresentCity').val(employee.presentCity || '');
		$('#ddlPresentState').val(employee.presentStateId || '');
		$('#txtPresentPincode').val(employee.presentPincode || '');
		$('#ddlPresentThana').val(employee.presentThanaId || '');
		$('#txtPermanentAddress').val(employee.permanentAddress || '');
		$('#txtPermanentTehsil').val(employee.permanentTehsil || '');
		$('#txtPermanentDistrict').val(employee.permanentDistrict || '');
		$('#txtPermanentCity').val(employee.permanentCity || '');
		$('#ddlPermanentState').val(employee.permanentStateId || '');
		$('#txtPermanentPincode').val(employee.permanentPincode || '');
		$('#ddlPermanentThana').val(employee.permanentThanaId || '');
		$('#ddlCountry').val(employee.countryId || '');
		$('#txtWorkPhone').val(employee.workPhone || '');
		$('#txtPersonalPhone').val(employee.personalPhone || '');
		$('#txtOfficialEmail').val(employee.officialEmail || '');
		$('#txtNationality').val(employee.nationality || '');
		$('#txtExtensionNo').val(employee.extensionNo || '');
		$('#txtMobileNo').val(employee.mobileNo || '');

		// Salary Report Info
		$('#primaryPaymentMode').val(employee.primaryPaymentMode || '');
		$('#primaryBank').val(employee.primaryBankId || '');
		$('#primaryIFSC').val(employee.primaryIFSCCode || '');
		$('#primaryAccountNo').val(employee.primaryAccountNumber || '');
		$('#primaryBranchName').val(employee.primaryBankBranchName || '');
		$('#ddlWagesType').val(employee.wagesType || '');
		$('#groupJoiningDate').val(formatDate(employee.groupJoiningDate)|| '');
		$('#businessSegment').val(employee.businessSegmentId || '');
		$('#employeeNameSalaryReport').val(employee.employeeSalaryReport || '');
		$('#employeeNamePFReport').val(employee.employeePFReport || '');
		$('#employeeNamePTReport').val(employee.employeePTReport || '');
		$('#employeeNameTaxReport').val(employee.employeeTaxReport || '');
		$('#employeeNameESICReport').val(employee.employeeESIReport || '');
		$('#employeeNamePrimaryBank').val(employee.employeeNamePrimaryBank || '');

		// Profile and Signature Images
		if (employee.employeeProfileUrl) {
			$('#profileImage').attr('src', employee.employeeProfileUrl);
			EmployeeProfileUrl = employee.employeeProfileUrl;
			$('#fileInfo').show();
			$("#uploadBtnTag").show();
		} else {
			$('#profileImage').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/user-profile-png-image.png');
			$('#fileInfo').hide();
		}

		if (employee.employeeSignatureUrl) {
			EmployeeSignatureUrl = employee.employeeSignatureUrl;
			$('#empSignPreview').attr('src', employee.employeeSignatureUrl);
			$('#signFileInfo').show();
			$("#uploadBtnTag").show();
		} else {
			$('#empSignPreview').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/default-signature.jpg');
			$('#signFileInfo').hide();
		}

		//$(".loaderTag").show();
	}


	async function bindDesignation(){

	   $.ajax({
				url: '@baseUrl/DesignationAPI/GetAllDesignation',
				method: 'GET',
				success: function(data) {
					if(data.isSuccess){
						var dropdown = $('#ddlDesignation');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select Designation</option>');
						$.each(data.data, function(index, company) {
							dropdown.append($('<option>', {
								value: company.designationId,
								text: company.designationName
							}));
						});


					}
				},
				error: function(error) {
					console.error('Error fetching designation data:', error);
				}
			});

	 }
	function LoadWeekOffMaster()
	{
		 let branchId = $('#ddlBranch').val();

			// Validation
			if (!branchId) {
				round_error_noti("Please select branch first!");
				return;
			}
			var data={
				branchId:branchId,
				CompanyId:CurrentCompanyId
			}
			// API call
			$.ajax({
				url: '@baseUrl/WeekOffMasterAPI/GetAllWeekOffDetails',
				type: "Post",
				contentType: 'application/json',
				data: JSON.stringify(data),
				success: function (res) {

					if(res.isSuccess){
							var dropdown = $('#ddlWeekOfAssign');
							dropdown.empty();
							dropdown.append('<option disabled selected value="">Select</option>');
							let sundayValue = null;
							$.each(res.data, function(index, company) {
								dropdown.append($('<option>', {
									value: company.weekOffDetailsId,
									text: company.weekOffName
								}));
								   // Check if the name is "Sunday"
								if (company.weekOffName.toLowerCase() === 'sunday') {
									sundayValue = company.weekOffDetailsId;
								}
							});
							if (sundayValue !== null) {
								dropdown.val(sundayValue);
							}
					}
				},
				error: function () {
					round_error_noti("Failed to fetch week off data.");
				}
			});

	}

	 async function bindReporting(){

		$.ajax({
		type: "GET",
		url: "@baseUrl/EmployeeMasterAPI/GetAllEmployee"+ "?companyId=" + CurrentCompanyId,
		success: function(data) {
			console.log("Data received:", data);
				if(data.isSuccess){
					var dropdown = $('#drpReporting');
					dropdown.empty();
					dropdown.append('<option disabled selected value="">Select</option>');
					$.each(data.data, function(index, company) {
						dropdown.append($('<option>', {
							value: company.id,
							text: company.fullName
						}));
					});


	            }
		},
		error: function(xhr, status, error) {
			console.error("AJAX Error: " + status + " - " + error);
		}
	})

	 }
	 async function bindDepartment(){

	   $.ajax({
				url: '@baseUrl/DepartmentAPI/GetAllDepartment',
				method: 'GET',
				success: function(data) {
					if(data.isSuccess){
						var dropdown = $('#ddlDepartment');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select Department</option>');
						$.each(data.data, function(index, company) {
							dropdown.append($('<option>', {
								value: company.departmentId,
								text: company.departmentName
							}));
						});


					}
				},
				error: function(error) {
					console.error('Error fetching designation data:', error);
				}
			});

	 }
	async function bindGrade(){
	   $.ajax({
				url: '@baseUrl/GradeAPI/GetAllGrade',
				method: 'GET',
				success: function(data) {
					if(data.isSuccess){
						var dropdown = $('#ddlGrade');
						dropdown.empty();
						dropdown.append('<option disabled selected value="">Select Grade</option>');
						$.each(data.data, function(index, company) {
							dropdown.append($('<option>', {
								value: company.gradeId,
								text: company.gradeName
							}));
						});


					}
				},
				error: function(error) {
					console.error('Error fetching grade data:', error);
				}
			});

	 }

	async function loadBindRoleOption() {

		try {
			const response = await fetch('@baseUrl/RoleAPI/GetAllRoles', {
				method: 'GET',
				headers: {
					'Accept': 'application/json'
				}
			});

			const data = await response.json();

			if (data.isSuccess) {

				console.log("Permissions loaded:", data.data);
				var arrayDta=data.data;
				 var dropdowns = $('#ddlRole');
							dropdowns.empty();
							dropdowns.append(
								$('<option>', {
								value: '0',
								text: 'Select',
								selected: true,
								disabled: true
								})
							);

							$.each(data.data, function(index, role) {
									dropdowns.append($('<option >', {
									value: role.id,
									text: role.name
								}));
							});
			}
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}

	  async function bindBranch(){

		  $.ajax({
			   url: '@baseUrl/BranchAPI/GetAllBranch',
			   method: 'GET',
			   success: function(data) {
				   if(data.isSuccess){
					   var dropdown = $('#ddlBranch');
					   dropdown.empty();
					   dropdown.append('<option disabled selected value="">Select Branch</option>');
					   $.each(data.data, function(index, company) {
						   dropdown.append($('<option>', {
							   value: company.branchId,
							   text: company.branchName
						   }));
					   });


				   }
			   },
			   error: function(error) {
				   console.error('Error fetching company data:', error);
			   }
		   });

	}
	
	async function bindEmployeeType(){

	   $.ajax({
			url: '@baseUrl/EmployeeTypeAPI/GetAllEmployeeTypes',
			method: 'GET',
			success: function(data) {
				if(data.isSuccess){
					var dropdown = $('#ddlEmpType');
					dropdown.empty();
					dropdown.append('<option disabled selected value="">Select</option>');
					$.each(data.data, function(index, company) {
						dropdown.append($('<option>', {
							value: company.employeeTypeId,
							text: company.employeeTypeName
						}));
					});


				}
			},
			error: function(error) {
				console.error('Error fetching category data:', error);
			}
		});

	}
	async function bindCategory(){

	   $.ajax({
			url: '@baseUrl/CategoryAPI/GetAllCategories',
			method: 'GET',
			success: function(data) {
				if(data.isSuccess){
					var dropdown = $('#ddlCategory');
					dropdown.empty();
					dropdown.append('<option disabled selected value="">Select</option>');
					$.each(data.data, function(index, company) {
						dropdown.append($('<option>', {
							value: company.categoryId,
							text: company.categoryName
						}));
					});


				}
			},
			error: function(error) {
				console.error('Error fetching category data:', error);
			}
		});

	}
	async function bindShift(){

	   $.ajax({
			url: '@baseUrl/ShiftMasterAPI/GetAllShifts',
			method: 'GET',
			success: function(data) {
				if(data.isSuccess){
					var dropdown = $('#ddlShift');
					dropdown.empty();
					dropdown.append('<option disabled selected value="">Select</option>');
					$.each(data.data, function(index, company) {
						dropdown.append($('<option>', {
							value: company.shiftID,
							text: company.shiftName
						}));
					});


				}
			},
			error: function(error) {
				console.error('Error fetching category data:', error);
			}
		});

	}

	// Bind navigation buttons
	$(document).ready( async function () {
		 
		 $('span:contains("Next")').click(function () {
			if (currentIndex < employeeList.length - 1) {
				currentIndex++;
				fillEmployeeForm(employeeList[currentIndex]);
			}
		});

		$('span:contains("Previous")').click(function () {
			if (currentIndex > 0) {
				currentIndex--;
				fillEmployeeForm(employeeList[currentIndex]);
			}
		});

		
	});


	$('#btnUpdateEmployee').click(async function() {
			$("#btnUpdateEmployee").prop("disabled", true);
			// Capture form values in variables
			var initial = $('#ddlInitial').val();
			var firstName = $('#txtFirstName').val().trim();
			var middleName = $('#txtMiddleName').val().trim();
			var lastName = $('#txtLastName').val().trim();
			var employeeStringCode = $('#txtEmpCode').val(); // Assuming the first input is for EmployeeStringCode
			var employeeNumberCode = $('#txtNumberEmpCode').val(); // Assuming the second input is for EmployeeNumberCode
			var dateOfJoining = $('#doj').val();
			var branch = $('#ddlBranch').val();
			var grade = $('#ddlGrade').val();
			var shift = $('#ddlShift').val();
			var ctc = null;
			var designation = $('#ddlDesignation').val();
			var grossSalary = $('#txtGrossSalary').val().trim();
			var category = $('#ddlCategory').val();
			var basicSalary = null;
			var department = $('#ddlDepartment').val();
			var employeeType = $('#ddlEmpType').val();
			var dateOfBirth = $('#dob').val();
			var RoleId = $('#ddlRole').val();
			var loginAlias = $('#txtLoginAlias').val().trim();
			var password = $('#txtPassword').val().trim();
			var domainName = $('#txtDomainName').text().trim();
			var weekOfAssignId = $('#ddlWeekOfAssign').val();
			var pt = $('#pt').is(':checked');
			var checkInOut = $('#checkInOut').is(':checked');
			 var patternPassword = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@@$!%*?&])[A-Za-z\d@@$!%*?&]{8,}$/;
			var reportingManager=$('#drpReporting').val();

			var Company = CurrentCompanyId;


			
				// Validate required fields
			   var isValid = true;

				if (!initial) {
					$('#spnInitial').show();
					isValid = false;
				}
				else{
					$('#spnInitial').hide();
				}

				if (!firstName) {
					$('#spnFirstName').show();
					isValid = false;
				}
				else{
					$('#spnFirstName').hide();
				}
				if (!employeeStringCode) {
					$('#spnNumberCode').hide();
					$('#spnStringCode').show();
					isValid = false;
				}
				else{
					$('#spnStringCode').hide();
					if (!spnNumberCode) {
						$('#spnNumberCode').show();
						isValid = false;
					}
					else{
						$('#spnNumberCode').hide();
					}
				}
				if (!dateOfJoining) {
					$('#spnDoj').show();
					isValid = false;
				}
				else{
					$('#spnDoj').hide();
				}
				if (!branch) {
					$('#spnBranch').show();
					isValid = false;
				}
				else{
					$('#spnBranch').hide();
				}
				if (!grade) {
					$('#spnGrade').show();
					isValid = false;
				}
				else{
					$('#spnGrade').hide();
				}
				if (!shift) {
					$('#spnShift').show();
					isValid = false;
				}
				else{
					$('#spnShift').hide();
				}
				if (!designation) {
					$('#spnDesignation').show();
					isValid = false;
				}
				else{
					$('#spnDesignation').hide();
				}
				if (!category) {
					$('#spnCategory').show();
					isValid = false;
				}
				else{
					$('#spnCategory').hide();
				}
				if (!department) {
					$('#spnDepartment').show();
					isValid = false;
				}
				else{
					$('#spnDepartment').hide();
				}
				if (!employeeType) {
					$('#spnEmployeeType').show();
					isValid = false;
				}
				else{
					$('#spnEmployeeType').hide();
				}
				if (!dateOfBirth) {
					$('#spnBirth').show();
					isValid = false;
				}
				else{
					$('#spnBirth').hide();
				}
				if (!RoleId) {
					$('#spnRole').show();
					isValid = false;
				}
				else{
					$('#spnRole').hide();
				}


				if (!loginAlias) {
					$('#spnLoginAlias').show();
					isValid = false;
				}else{
					$('#spnLoginAlias').hide();
				}

				if (!password) {
					$('#spnPasswordError').hide();
					$('#spnPassword').show();
					isValid = false;
				}
				else{
					$('#spnPassword').hide();
					if (patternPassword.test(password)) {
						$('#spnPasswordError').hide();

					} else {
						$('#spnPasswordError').show();
					}
				}
				if (!weekOfAssignId) {
					$('#spnWeekOff').show();
					isValid = false;
				}else{
					$('#spnWeekOff').hide();
				}

				if (!isValid) {
					$("#btnUpdateEmployee").prop("disabled", false);
					return;
				}
				const setNullIfEmpty = (value) => {
					return value === "" ? null : value;
				};

			// Create employeeData object
					var employeeData = {
						Id:CurrentEmployeeId,
						CompanyId:Company===""?null:Company,
						Initial: initial === "" ? null : initial,
						FirstName: firstName === "" ? null : firstName,
						MiddleName: middleName === "" ? null : middleName,
						LastName: lastName === "" ? null : lastName,
						FullName: `${initial} ${firstName} ${middleName} ${lastName}`.trim(),
						EmployeeCode: `${employeeNumberCode}`.trim(),
						AlfaCode: `${employeeStringCode}`.trim(),
						AlfaEmployeeCode: `${employeeStringCode}${employeeNumberCode}`.trim(),
						DateOfJoining: dateOfJoining === "" ? null : dateOfJoining,
						BranchId: branch === "" ? null : branch,
						GradeId: grade === "" ? null : grade,
						ShiftMasterId: shift === "" ? null : shift,
						DesignationId: designation === "" ? null : designation,
						GrossSalary: grossSalary === "" ? null : grossSalary,
						CategoryId: category === "" ? null : category,
						BasicSalary: null,
						DepartmentId: department === "" ? null : department,
						EmployeeTypeId: employeeType === "" ? null : employeeType,
						DateOfBirth: dateOfBirth === "" ? null : dateOfBirth,
						RoleId: RoleId === "" ? 0 : RoleId,
						LoginAlias: loginAlias === "" ? null : `${loginAlias}${domainName}`,
						Password: password,
					     ReportingManagerId:reportingManager==""? null:reportingManager,
						Pt: pt === "" ? false : pt,

						// Default values for properties not present in the JavaScript object


						CreatedBy: null,
						UpdatedBy: `${CurrentEmployeeId}`,

						EmployeeProfileUrl: null,
						EmployeeSignatureUrl: null,
						WeekOffDetailsId:weekOfAssignId==""?null:weekOfAssignId,
						IsPermissionPunchInOut:checkInOut,

						//PersionalInfo
						  Gender: setNullIfEmpty($('#ddlGender').val()),
							PersonalEmailId: setNullIfEmpty($('#inpPersonalEmailId').val()),
							FatherName: setNullIfEmpty($('#inpFatherName').val()),
							MotherName: setNullIfEmpty($('#inpMotherName').val()),
							BloodGroup: setNullIfEmpty($('#ddlBloodGroup').val()),
							Height: setNullIfEmpty($('#inpHeight').val()),
							MaritalStatus: setNullIfEmpty($('#ddlMaritalStatus').val()),
							MarriageDate: setNullIfEmpty($('#inpMarriageDate').val()),
							MarkIdentification: setNullIfEmpty($('#inpMarkIdentification').val()),
							Religion: setNullIfEmpty($('#inpReligion').val()),
							Caste: setNullIfEmpty($('#inpCaste').val()),
							CastCategory: setNullIfEmpty($('#ddlCasteCategory').val()),
							AadharCardNo: setNullIfEmpty($('#inpAadharCardNo').val()),
							PANNo: setNullIfEmpty($('#inpPanNo').val()),
							Dispensary: setNullIfEmpty($('#inpDispensary').val()),
							DoctorName: setNullIfEmpty($('#inpDoctorName').val()),
							DispensaryAddress: setNullIfEmpty($('#inpDispensaryAddress').val()),
							UANNumber: setNullIfEmpty($('#inpUanNumber').val()),
							DrivingLicense: setNullIfEmpty($('#inpDrivingLicense').val()),
							DrivingLicenseExpiry: setNullIfEmpty($('#inpDrivingLicenseExpiry').val()),
							RationCardType: setNullIfEmpty($('#ddlRationCardType').val()),
							RationCardNo: setNullIfEmpty($('#inpRationCardNo').val()),

							ProbationCompletionPeriod: setNullIfEmpty($('#inpProbationCompletionPeriod').val()),
							ProbationPeriodType: setNullIfEmpty($('input[name="probationPeriod"]:checked').val()),
							ManagerProbationId: setNullIfEmpty($('#ddlManagerProbation').val()),
							ConfirmDate: setNullIfEmpty($('#inpConfirmDate').val()),
							RetirementDate: setNullIfEmpty($('#inpRetirementDate').val()),
							OfferDate: setNullIfEmpty($('#inpOfferDate').val()),
							TraineeCompletionPeriod: setNullIfEmpty($('#inpTraineeCompletionPeriod').val()),
							TraineePeriodType: setNullIfEmpty($('input[name="trainingPeriod"]:checked').val()),

							// Contact Details
							PresentAddress: setNullIfEmpty($('#txtPresentAddress').val().trim()),
							PresentTehsil: setNullIfEmpty($('#txtPresentTehsil').val().trim()),
							PresentDistrict: setNullIfEmpty($('#txtPresentDistrict').val().trim()),
							PresentCity: setNullIfEmpty($('#txtPresentCity').val().trim()),
							PresentStateId: setNullIfEmpty($('#ddlPresentState').val()),
							PresentPincode: setNullIfEmpty($('#txtPresentPincode').val().trim()),
							PresentThanaId: setNullIfEmpty($('#ddlPresentThana').val()),

							PermanentAddress: setNullIfEmpty($('#txtPermanentAddress').val().trim()),
							PermanentTehsil: setNullIfEmpty($('#txtPermanentTehsil').val().trim()),
							PermanentDistrict: setNullIfEmpty($('#txtPermanentDistrict').val().trim()),
							PermanentCity: setNullIfEmpty($('#txtPermanentCity').val().trim()),
							PermanentStateId: setNullIfEmpty($('#ddlPermanentState').val()),
							PermanentPincode: setNullIfEmpty($('#txtPermanentPincode').val().trim()),
							PermanentThanaId: setNullIfEmpty($('#ddlPermanentThana').val()),

							CountryId: setNullIfEmpty($('#ddlCountry').val()),
							WorkPhone: setNullIfEmpty($('#txtWorkPhone').val().trim()),
							PersonalPhone: setNullIfEmpty($('#txtPersonalPhone').val().trim()),
							OfficialEmail: setNullIfEmpty($('#txtOfficialEmail').val().trim()),
							Nationality: setNullIfEmpty($('#txtNationality').val().trim()),
							ExtensionNo: setNullIfEmpty($('#txtExtensionNo').val().trim()),
							MobileNo: setNullIfEmpty($('#txtMobileNo').val().trim()),
							SameAsPresentAddress: $('#chkSameAs').is(':checked'),

							// Salary Report Info
							 PrimaryPaymentMode: setNullIfEmpty($('#primaryPaymentMode').val()),
							  PrimaryBankName: setNullIfEmpty($('#primaryBank').val()),
							  PrimaryIFSCCode: setNullIfEmpty($('#primaryIFSC').val()),
							  PrimaryAccountNumber: setNullIfEmpty($('#primaryAccountNo').val()),
							  PrimaryBankBranchName: setNullIfEmpty($('#primaryBranchName').val()),
							  WagesType: setNullIfEmpty($('#ddlWagesType').val()),
							  GroupJoiningDate: setNullIfEmpty($('#groupJoiningDate').val()),
							  BusinessSegmentId: setNullIfEmpty($('#businessSegment').val()),
							  EmployeeSalaryReport: setNullIfEmpty($('#employeeNameSalaryReport').val()),
							  EmployeePFReport: setNullIfEmpty($('#employeeNamePFReport').val()),
							  EmployeePTReport: setNullIfEmpty($('#employeeNamePTReport').val()),
							  EmployeeTaxReport: setNullIfEmpty($('#employeeNameTaxReport').val()),
							  EmployeeESIReport: setNullIfEmpty($('#employeeNameESICReport').val()),
							  EmployeeNamePrmaryBank: setNullIfEmpty($('#employeeNamePrimaryBank').val())

					};
					debugger;
					//Add employee person info
					console.log("employeeData: ", employeeData);
					//var employeePersional=await getEmployeePersonalInfo();
					// var employeeContact= await getEmployeeContactFromForm();

					// var updateEmployee={
					// 	vmEmployeeData:employeeData,
					// 	EmployeePersonalInfo:employeePersional,
					// 	EmployeeContact:employeeContact
					// };
					// console.log("updateEmployee",updateEmployee)

			// Send data to server using AJAX
				$.ajax({
					url: '@baseUrl/EmployeeMasterAPI/UpdateEmployee',
					type: 'POST',
					contentType: 'application/json',
					data: JSON.stringify(employeeData),
					success: function(response) {
						if (response.isSuccess) {
						round_success_noti(response.responseMessage);
							// resetAllEmployeeData(response.data)
						} else {
							round_error_noti(response.responseMessage);
						}
						$("#btnUpdateEmployee").prop("disabled", false);
					},
					error: function(xhr, status, error) {
						$("#btnUpdateEmployee").prop("disabled", false);

						console.error('Error:', error);
						console.error('Status:', status);
						console.error('Response Text:', xhr.responseText);
					}
				});

		});

		function resetAllEmployeeData(data)
		{
			$('#fileNameText').text("");
			$('#signFileNameText').text("");
			employeeList.splice(currentIndex, 1);
			employeeList.splice(currentIndex, 0, data);
			fillEmployeeForm(employeeList[currentIndex]);
			localStorage.removeItem('AllEmployeeData');
			localStorage.setItem('AllEmployeeData', JSON.stringify(employeeList));
		}


		async function loadBindbusinessSegmentOption() {

		try {
			const response = await fetch('@baseUrl/BusinessSegmentAPI/GetAllBusinessSegments', {
				method: 'GET',
				headers: {
					'Accept': 'application/json'
				}
			});

			const data = await response.json();

			if (data.isSuccess) {

				console.log("businessSegment loaded:", data.data);
				var arrayDta=data.data;
				 var dropdowns = $('#businessSegment');
							dropdowns.empty();
							dropdowns.append(
								$('<option>', {
								value: '',
								text: 'Select',
								selected: true,
								disabled: true
								})
							);

							$.each(data.data, function(index, x) {
									dropdowns.append($('<option >', {
									value: x.businessSegmentId,
									text: x.businessSegmentName
								}));
							});
			}
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}

	
</script>

<script>
	let cropper;
	let selectedFile;
	let currentCropTarget = '';
	let profileFile=null;
	let signatureFile=null;

	 $("#backArrow,#btnBackEmployee").click(() => {
			window.location.href = '@UIBaseUrlLayout/AdminPanel/EmployeeMaster/EmployeeMaster';
	 });
	 

	// Trigger file input
	$('#profileImage').click(() => $('#profileInput').click());

	// File selected
	$('#profileInput').change(function () {
		const file = this.files[0];
		// if (!file || !file.name.toLowerCase().endsWith(".jpg")) {
		// 	alert("Only JPG files are allowed.");
		// 	resetAll();
		// 	return;
		// }

		selectedFile = file;
		const reader = new FileReader();
		reader.onload = function (e) {
			$('#cropImagePreview').attr('src', e.target.result);
			$('#cropImagePreview').on('load', function () {
				// Initialize Cropper only after the image is fully loaded
				initCropper();
			});

			// Show the modal directly when the file is loaded
			const modal = new bootstrap.Modal(document.getElementById('cropModal'));
			modal.show();
		};
		reader.readAsDataURL(file);
	});

	// Function to initialize the cropper
	function initCropper() {
		const image = document.getElementById('cropImagePreview');

		// Destroy any previous cropper instance before creating a new one
		if (cropper) {
			cropper.destroy();
		}

		// Initialize cropper
		cropper = new Cropper(image, {
			aspectRatio: 1,
			viewMode: 1,
			autoCropArea: 1,
			ready() {
				// Optionally, you can set focus or trigger other UI updates after cropper is ready
			}
		});
	}

	// On Modal hidden - destroy cropper
	$('#cropModal').on('hidden.bs.modal', function () {
		if (cropper) {
			cropper.destroy();
			cropper = null;
		}
	});

	// // Confirm crop
	// $('#cropConfirmBtn').click(function () {
	// 	if (!cropper) {
	// 		alert("Cropper not initialized.");
	// 		return;
	// 	}

	// 	const canvas = cropper.getCroppedCanvas({ width: 150, height: 150 });
	// 	const dataURL = canvas.toDataURL("image/jpeg");

	// 	$('#profileImage').attr('src', dataURL); // Update the profile image
	// 	$('#fileNameText').text(selectedFile.name);
	// 	$('#fileInfo').show(); // Show the file info

	// 	// Hide modal
	// 	bootstrap.Modal.getInstance(document.getElementById('cropModal')).hide();
	// });

	// // Delete all
	$('#deleteBtn').click(() => resetProfile());

	function resetProfile() {
		$('#profileInput').val('');
		$('#profileImage').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/user-profile-png-image.png');
		$('#fileInfo').hide();
		selectedFile = null;
		profileFile=null;
		if (cropper) {
			cropper.destroy();
			cropper = null;
		}
	}


	$('#cropConfirmBtn').click(function () {
		if (!cropper) {
			alert("Cropper not initialized.");
			return;
		}
		const canvas = currentCropTarget === 'signature'
			? cropper.getCroppedCanvas({ width: 150, height: 80 })
			: cropper.getCroppedCanvas({ width: 150, height: 150 });

		const dataURL = canvas.toDataURL("image/jpeg");

		if (currentCropTarget === 'signature') {
			$('#empSignPreview').attr('src', dataURL);
			$('#signFileNameText').text(selectedFile.name);
			signatureFile=selectedFile;
			$('#signFileInfo').show();
		} else {
			$('#profileImage').attr('src', dataURL);
			$('#fileNameText').text(selectedFile.name);
			profileFile=selectedFile;
			$('#fileInfo').show();
		}
		$("#uploadBtnTag").show();
	$('#cropConfirmBtn').blur(); // <-- remove focus from button
	bootstrap.Modal.getInstance(document.getElementById('cropModal')).hide();
});



	//signature

	$('#empSignPreview').click(() => $('#empSignatureInput').click());

	// Signature file selected
	$('#empSignatureInput').change(function () {
		const file = this.files[0];

		if (!file || !file.name.toLowerCase().endsWith(".jpg")) {
			alert("Only JPG files are allowed for signature.");
			resetSignature();
			return;
		}

		selectedFile = file;
		currentCropTarget = 'signature';

		const reader = new FileReader();
		reader.onload = function (e) {
			$('#cropImagePreview').attr('src', e.target.result);
			$('#cropImagePreview').on('load', function () {
				initCropperSignature(); // for signature aspect
			});

			const modal = new bootstrap.Modal(document.getElementById('cropModal'));
			modal.show();
		};
		reader.readAsDataURL(file);
	});

	// Delete Signature
	$('#deleteSignBtn').click(() => resetSignature());

	function initCropperSignature() {
		const image = document.getElementById('cropImagePreview');
		if (cropper) cropper.destroy();

		cropper = new Cropper(image, {
			aspectRatio: 150 / 80,
			viewMode: 1,
			autoCropArea: 1
		});
	}

	function resetSignature() {
		$('#empSignatureInput').val('');
		$('#empSignPreview').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/default-signature.jpg');
		$('#signFileInfo').hide();
		selectedFile = null;
		signatureFile=null;
		if (cropper) {
			cropper.destroy();
			cropper = null;
		}
	}

	

  $("#btnUpload").click(() => {
		$("#btnUpload").prop("disabled", true);
			var profileFile = $('#profileInput')[0].files[0];
			var signatureFile = $('#empSignatureInput')[0].files[0];
			
			var profileFormdata = new FormData();
			profileFormdata.append("EmployeeId", CurrentEmployeeId);
		profileFormdata.append("EmployeeProfileFile", profileFile);
		profileFormdata.append("EmployeeSignatureFile", signatureFile);
		profileFormdata.append("EmployeeSignatureUrl", EmployeeSignatureUrl);
		profileFormdata.append("EmployeeProfileUrl", EmployeeProfileUrl);
			console.log(profileFormdata);
		// Example of sending the FormData to the server using AJAX
		$.ajax({
			url: '@baseUrl/EmployeeMasterAPI/UpdateEmployeeProfileAndSignature', // Replace with your actual endpoint
			type: 'POST',
			data: profileFormdata,
			processData: false,
			contentType: false,
			success: function(response) {
			  if (response.isSuccess) 
			  {
				  var employee=response.data;
				  console.log(response.data);
						 // resetAllEmployeeData(employee);
					// if(employee.employeeProfileUrl!=null )
					// {
					// 	$('#profileImage').attr('src',employee.employeeProfileUrl );
					// 	EmployeeProfileUrl=employee.employeeProfileUrl;
					// }
					// else{
					// 	$('#profileImage').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/user-profile-png-image.png');
					// }
					// if(employee.employeeSignatureUrl!=null){
					// 	EmployeeSignatureUrl=employee.employeeSignatureUrl;
					// 	$('#empSignPreview').attr('src', employee.employeeSignatureUrl);
					// }
					// else{
					// 	$('#empSignPreview').attr('src', '@baseDomainUrl/uploads/defaultuserprofile/default-signature.jpg');
					// }
				round_success_noti(response.responseMessage);
			  } 
				else {
					round_error_noti(response.responseMessage);
				}
					$("#btnUpload").prop("disabled", false);
			},
			error: function(xhr, status, error) {
				$("#btnUpload").prop("disabled", false);
				console.error('Upload failed', error);
			}
		});
	});

</script>




<script>
	const tabMap = {
		"EmployeePersonalInfo": "@Url.Action("EmployeeInfo", "PartialView")",
		"Contact": "@Url.Action("Contact", "PartialView")",
		"EmergencyContacts": "@Url.Action("EmergencyContact", "PartialView")",
		"ReportingContract": "@Url.Action("Reporting", "PartialView")",
		"Attachments": "@Url.Action("Attachments", "PartialView")",
		"Allowance": "@Url.Action("Allowance", "PartialView")",
		"Salary": "@Url.Action("Salary", "PartialView")"
	};

	$(document).ready(function () {
		// Load all partial views on page load
		for (let key in tabMap) {
			$('#' + key).html('<div class="text-center p-3"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div></div>');
			$.get(tabMap[key], function (response) {
				$('#' + key).html(response);
			});
		}

		// Handle tab click
		$('.nav-link').on('click', function (e) {
			e.preventDefault();

			$('.nav-link').removeClass('active');
			$(this).addClass('active');

			let text = $(this).text().trim();
			let idMap = {
				"Employee Personal Info": "EmployeePersonalInfo",
				"Contact": "Contact",
				"Emergency Contact(s)": "EmergencyContacts",
				"Reporting & Contract": "ReportingContract",
				"Attachments": "Attachments",
				"Allowance": "Allowance",
				"Salary": "Salary"
			};

			let targetId = idMap[text];

			if (!targetId) return;

			$('.partial-section').addClass('d-none');
			$('#' + targetId).removeClass('d-none');
		});

		// Trigger default tab
		$('.nav-link.active').trigger('click');
	});

	$(document).ready(function () {
	  $('#viewEmployeeHistroy').on('click', function () {
		const baseUIOrginUrl = window.location.origin; 
		window.location.href = baseUIOrginUrl + '/EmployeeMaster/EmployeeHistory';

	  });
	});

</script>

<script>



	$('#txtGrossSalary').blur(async function () {
		await loadLiveSalaryAllowance();

	});
	async function loadLiveSalaryAllowance() {
	var grossSalary = $('#txtGrossSalary').val();
	if(!grossSalary)
	{
		return;
	}
	   try {
			const response = await fetch('@baseUrl/EmployeeSalaryAllowanceAPI/GetLiveEmployeeSalaryAllowance/'+grossSalary, {
				method: 'GET',
				headers: {
					'Content-Type': 'application/json'
				}
			});

			const data = await response.json();
			if (data.isSuccess) {
				console.log("Salary loaded:", data.data);
				var arrayDta = data.data;
				bindSalaryAllowance(arrayDta);


			}
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}

	$(document).ready(async function () {
		await loadSalaryAllowance();
	});

	async function loadSalaryAllowance() {
		try {
			const response = await fetch('@baseUrl/EmployeeSalaryAllowanceAPI/GetEmployeeSalaryAllowanceByEmployeeId/'+CurrentEmployeeId, {
				method: 'GET',
				headers: {
					'Accept': 'application/json'
				}
			});

			const data = await response.json();

			if (data.isSuccess) {

				console.log("Salary loaded:", data.data);
				var arrayDta=data.data;
			 bindSalaryAllowance (arrayDta);
			}
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}

	
     function formatCurrency(amount) {
		return '₹' + amount.toFixed(2).replace(/\d(?=(\d{3})+\.)/g, '$&,');
	}

	function bindSalaryAllowance(salaryData) {
		// Earnings
		$('#monthlyGross').text(formatCurrency(salaryData.totalGrossSalary));
		$('#AnualGross').text(formatCurrency(salaryData.totalGrossSalary * 12));

		$('#basicSalaryMonth').text(formatCurrency(salaryData.basicSalary));
		$('#basicSalaryYear').text(formatCurrency(salaryData.basicSalary * 12));
		$('#hraMonth').text(formatCurrency(salaryData.hra));
		$('#hraYear').text(formatCurrency(salaryData.hra * 12));
		$('#deputationAllowanceMonth').text(formatCurrency(salaryData.deputationAllowance));
		$('#deputationAllowanceYear').text(formatCurrency(salaryData.deputationAllowance * 12));
		$('#conveyanceAllowanceMonth').text(formatCurrency(salaryData.conveyanceAllowance));
		$('#conveyanceAllowanceYear').text(formatCurrency(salaryData.conveyanceAllowance * 12));
		$('#medicalAllowanceMonth').text(formatCurrency(salaryData.medicalAllowance));
		$('#medicalAllowanceYear').text(formatCurrency(salaryData.medicalAllowance * 12));
		$('#childEducationAllowanceMonth').text(formatCurrency(salaryData.childEducationAllowance));
		$('#childEducationAllowanceYear').text(formatCurrency(salaryData.childEducationAllowance * 12));
		$('#totalGrossMonth').text(formatCurrency(salaryData.totalGrossSalary));
		$('#totalGrossYear').text(formatCurrency(salaryData.totalGrossSalary * 12));

		// Deductions
		$('#pfMonth').text(formatCurrency(salaryData.employeePF));
		$('#pfYear').text(formatCurrency(salaryData.employeePF * 12));
		$('#esiMonth').text(formatCurrency(salaryData.employeeESI));
		$('#esiYear').text(formatCurrency(salaryData.employeeESI * 12));
		$('#ptMonth').text(formatCurrency(salaryData.professionalTax));
		$('#ptYear').text(formatCurrency(salaryData.professionalTax * 12));
		$('#groupMedicalMonth').text(formatCurrency(salaryData.groupMedical));
		$('#groupMedicalYear').text(formatCurrency(salaryData.groupMedical * 12));
		$('#termInsuranceMonth').text(formatCurrency(salaryData.termInsurance));
		$('#termInsuranceYear').text(formatCurrency(salaryData.termInsurance * 12));
		$('#totalDeductionMonth').text(formatCurrency(salaryData.totalDeductions));
		$('#totalDeductionYear').text(formatCurrency(salaryData.totalDeductions * 12));

		// Net Salary
		$('#netSalaryMonth').text(formatCurrency(salaryData.netSalary));
		$('#netSalaryYear').text(formatCurrency(salaryData.netSalary * 12));

		// CTC calculation
		$('#CalculationGrossMonth').text(formatCurrency(salaryData.ctc));
		$('#CalculationGrossYear').text(formatCurrency(salaryData.ctc * 12));
		$('#CalculationPFMonth').text(formatCurrency(salaryData.employeePF));
		$('#CalculationPFYear').text(formatCurrency(salaryData.employeePF * 12));
		$('#CalculationESIMonth').text(formatCurrency(salaryData.employeeESI));
		$('#CalculationESIMonth').text(formatCurrency(salaryData.employeeESI * 12));
		// CTC
		$('#ctcMonth').text(formatCurrency(salaryData.ctc));
		$('#ctcYear').text(formatCurrency(salaryData.ctc * 12));

		// Summary
		$('#summaryCtc').text(formatCurrency(salaryData.ctc));
		$('#summaryNet').text(formatCurrency(salaryData.netSalary));
		$('#summaryAnnual').text(formatCurrency(salaryData.ctc * 12));
	}


</script>



