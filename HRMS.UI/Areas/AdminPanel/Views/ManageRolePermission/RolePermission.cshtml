@inject IConfiguration Configuration
@{
	ViewData["Title"] = "Role Permission";
	Layout = "~/Areas/AdminPanel/Views/Shared/_AdminLayout.cshtml";
	string baseUrl = Configuration["BaseUrlSettings:baseUrl"];
}


<style>
	.permission-box {
		border: 1px solid #ccc;
		padding: 15px;
		margin: 12px;
		width: 95%;
		font-family: Arial, sans-serif;
		background: #f9f9f9;
		border-radius: 6px;
		max-height: 400px;
		overflow-y: auto;
	}

		.permission-box label {
			display: block;
			margin-bottom: 8px;
		}

	.permission-group {
		margin-top: 15px;
		padding: 10px;
		background: #fff;
		border-left: 4px solid #007acc;
		border-radius: 4px;
	}

	.group-title {
		margin-bottom: 8px;
		font-weight:bold;
	}

	

	.permission-items {
		display: flex;
		flex-wrap: wrap;
		gap: 8px;
		/* ✨ Add scrollable area */
		
	}

	.permission-inline {
		background: #f0f4ff;
		padding: 6px 12px;
		border-radius: 4px;
		display: inline-flex;
		align-items: center;
		gap: 6px;
		box-sizing: border-box;
	}

	
</style>


<div class="card">
	<div class="card-header bg-transparent ml-0 py-0">
		<div class="row m-2">
			<div class="col-6 ">
				<h6 class="pt-2 mb-0">
					Assign Permission
				</h6>
			</div>

			<div class="col-6 d-flex justify-content-end align-items-center">
				<div class="font-22 pl-2" style="color:#32393f; cursor:pointer;">
					@* 					<i class="fadeIn animated bx bx-refresh" id="refreshData" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Refresh Data"></i>
 *@				
                    <button id="addRolePermission"
							type="button"
							class="btn mr-1 rounded-1 "
							style="background-color:#2395c6; color:white;">
						Add
					</button>
				</div>
			</div>
		</div>
	</div>
	<div class="card-body">

		<div class="row">
			<div class="col-md-12">
				<div class="form-group" id="tagRolePermissionGrid">
					<div class="rowCount" id="rowCountRolePermission"></div>
					<div id="gridContainerRolePermission">
						<div class="d-flex justify-content-center align-items-center" style="height: 10vh;">
							<div class="spinner-border text-primary" role="status">
								<span class="visually-hidden">Loading...</span>
							</div>
						</div>
					</div>

				</div>
				<div id="spnNoRecord" style="display:none;">No Record Found!</div>

			</div>
		</div>
	</div>

</div>


<div class="modal fade" id="addRolePermissionModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-lg">
		<div class="modal-content">
			<div class="modal-header">
				<h6 class="modal-title btn-heading-title" id="exampleModalLabel">
					<span class="formType">Assign</span> Role Permission
				</h6>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body modal-body-font">


				<div class="row">
					<div class="col-md-12">
						<div class="form-group mt-3 position-relative">
							<select class="form-select floating-input" id="ddlRole">
								<option value="0">Select</option>
								<!-- Add your options here -->
							</select>
							<label class="floating-label" for="ddlRole">Role</label>
							<span id="spnddlRole" style="color:red; display:none;">Please Select Role</span>
						</div>
					</div>


				</div>
				
				<div class="row mt-3">
					<h6>
						<label>
							<input type="checkbox" id="chkAll" />
							Manage Permission 
						</label>
					</h6>
					<div class="permission-box">
						
						<div id="permissionContainer"></div>

					</div>

				</div>
				
				<div class="modal-footer btn-heading-title">
					<button type="button" class="btn btn-primary" id="btnAddRolePermission" style="background-color:#2395c6; color:white;">Save</button>
					<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				</div>
			</div>
		</div>
	</div>
</div>
<script src="~/assets/js/jquery.min.js"></script>
<script>
	$(document).ready(async function(){

		await loadPermissionOptions();
	});

	let permissionData=[];
	async function loadPermissionOptions() {
		
		try {
			const response = await fetch('@baseUrl/PermissionAPI/GetAllGroupPermissions', {
				method: 'GET',
				headers: {
					'Authorization': 'Bearer ' + localStorage.getItem("authToken"),
					'Content-Type': 'application/json'
				},
			});

			const data = await response.json();

			if (data.isSuccess) {
				
				console.log("Permissions loaded:", data.data);
				permissionData=data.data;

				await bindPermission(permissionData);
			} else {
				console.warn("API responded but without success:", data.message || 'Unknown issue');
			}
		} catch (error) {
			console.error('Fetch error:', error);
		} 
	}


		async function bindPermission(permissionsData, selectedPermissionIds = []) {
		const container = document.getElementById("permissionContainer");
		container.innerHTML = ""; // Clear previous data

		permissionsData.forEach((group, i) => {
			const groupId = `group-${i}`;
			const groupDiv = document.createElement("div");
			groupDiv.classList.add("permission-group");

			groupDiv.innerHTML = `
				<label class="group-title">
					<input type="checkbox" class="group-check" data-group="${groupId}" />
					${group.groupName}
				</label>
				<div id="${groupId}" class="permission-items">
					${group.permissions.map(p => `
						<label class="permission-inline">
							<input type="checkbox"
								   class="permission-check"
								   value="${p.permissionId}"
								   data-group="${groupId}"
								   data-slug="${p.slug}"
								   ${selectedPermissionIds.includes(p.permissionId) ? 'checked' : ''} />
							${p.permissionName}
						</label>
					`).join('')}
				</div>
			`;

			container.appendChild(groupDiv);
		});

		// Master checkbox logic — exclude 'block'
		document.getElementById("chkAll").addEventListener("change", function () {
			const isChecked = this.checked;

			document.querySelectorAll(".group-check").forEach(chk => {
				chk.checked = isChecked;
			});

			document.querySelectorAll(".permission-check").forEach(chk => {
				const isBlock = chk.dataset.slug?.includes("block");
				chk.checked = isChecked && !isBlock;
			});
		});

		// Group checkbox logic — exclude 'block'
		document.querySelectorAll(".group-check").forEach(groupChk => {
			groupChk.addEventListener("change", function () {
				const group = this.dataset.group;
				const isChecked = this.checked;

				document.querySelectorAll(`.permission-check[data-group="${group}"]`).forEach(chk => {
					const isBlock = chk.dataset.slug?.includes("block");
					chk.checked = isChecked && !isBlock;
				});

				updateMasterCheckbox();
			});
		});

		// Individual permission logic
		document.querySelectorAll(".permission-check").forEach(chk => {
			chk.addEventListener("change", function () {
				const group = this.dataset.group;
				const slug = this.dataset.slug;
				const permissions = document.querySelectorAll(`.permission-check[data-group="${group}"]`);
				const groupBox = document.querySelector(`.group-check[data-group="${group}"]`);

				// Logic: if block is checked, uncheck others
				if (this.checked && slug.includes("block")) {
					permissions.forEach(cb => {
						if (cb !== this) cb.checked = false;
					});
				}
				// Logic: if other is checked, uncheck block
				else if (this.checked && !slug.includes("block")) {
					permissions.forEach(cb => {
						if (cb.dataset.slug?.includes("block")) cb.checked = false;
					});
				}

				// Update group checkbox state
				const nonBlockPermissions = Array.from(permissions).filter(cb => !cb.dataset.slug?.includes("block"));
				groupBox.checked = nonBlockPermissions.every(cb => cb.checked);

				updateMasterCheckbox();
			});
		});

		updateGroupAndMasterCheckboxes();
	}

	function updateGroupAndMasterCheckboxes() {
		document.querySelectorAll(".group-check").forEach(groupChk => {
			const group = groupChk.dataset.group;
			const permissions = document.querySelectorAll(`.permission-check[data-group="${group}"]`);
			const nonBlockPermissions = Array.from(permissions).filter(cb => !cb.dataset.slug?.includes("block"));
			groupChk.checked = nonBlockPermissions.every(cb => cb.checked);
		});
		updateMasterCheckbox();
	}

	function updateMasterCheckbox() {
		const allGroupsChecked = Array.from(document.querySelectorAll(".group-check"))
			.every(g => g.checked);
		document.getElementById("chkAll").checked = allGroupsChecked;
	}



	// async function bindPermission(permissionsData){

	// 	const container = document.getElementById("permissionContainer");

	// 	// Render Groups and Permissions
	// 	permissionsData.forEach((group, i) => {
	// 	  const groupId = `group-${i}`;
	// 	  const groupDiv = document.createElement("div");
	// 	  groupDiv.classList.add("permission-group");
	// 	  groupDiv.innerHTML = `
	// 		<label class="group-title">
	// 		  <input type="checkbox" class="group-check" data-group="${groupId}" />
	// 		  ${group.groupName}
	// 		</label>
	// 		<div id="${groupId}" class="permission-items">
	// 		  ${group.permissions.map(p => `
	// 			<label class="permission-inline">
	// 			  <input type="checkbox" class="permission-check" value="${p.permissionId}" data-group="${groupId}" />
	// 			  ${p.permissionName}
	// 			</label>
	// 		  `).join('')}
	// 		</div>
	// 	  `;
	// 	  container.appendChild(groupDiv);
	// 	});

	// 		document.getElementById("chkAll").addEventListener("change", function () {
	// 	  const isChecked = this.checked;
	// 	  document.querySelectorAll(".group-check, .permission-check").forEach(chk => {
	// 		chk.checked = isChecked;
	// 	  });
	// 	});

	// 	// Group Checkbox Logic
	// 	document.querySelectorAll(".group-check").forEach(groupChk => {
	// 	  groupChk.addEventListener("change", function () {
	// 		const group = this.dataset.group;
	// 		const isChecked = this.checked;
	// 		document.querySelectorAll(`.permission-check[data-group="${group}"]`)
	// 		  .forEach(chk => chk.checked = isChecked);
	// 		updateMasterCheckbox();
	// 	  });
	// 	});

	// 	// Individual Permission Checkbox Logic
	// 	document.querySelectorAll(".permission-check").forEach(chk => {
	// 	  chk.addEventListener("change", function () {
	// 		const group = this.dataset.group;
	// 		const groupBox = document.querySelector(`.group-check[data-group="${group}"]`);
	// 		const permissions = document.querySelectorAll(`.permission-check[data-group="${group}"]`);
	// 		const allChecked = Array.from(permissions).every(chk => chk.checked);
	// 		groupBox.checked = allChecked;
	// 		updateMasterCheckbox();
	// 	  });
	// 	});


	// }
	// Master "Manage Permission" Checkbox
	

	// // Update master "Manage Permission" checkbox state
	// function updateMasterCheckbox() {
	//   const allGroupChecked = Array.from(document.querySelectorAll(".group-check"))
	// 	.every(g => g.checked);
	//   document.getElementById("chkAll").checked = allGroupChecked;
	// }

	// // Handle Update Button
	function GetSelectedPermissionIds() {
	  const selectedIds = Array.from(document.querySelectorAll(".permission-check"))
		.filter(chk => chk.checked)
		.map(chk => parseInt(chk.value));
	  console.log("✅ Selected Permission IDs:", selectedIds);
	  // Send `selectedIds` to API or form as needed
	  return selectedIds;
	}
</script>


<script>

	const savedCompany = localStorage.getItem('selectedCompany');
	var companyDetails = JSON.parse(savedCompany);
	const CompanyId=companyDetails.CompanyId;


	$("#addRolePermission").click( () => {
		loadPermissionOptions();
		resetPermissionFormFields();
		
		 $(".formType").text("Add");
			$("#btnAddPermissionMaster").text("Save");
	  $("#addRolePermissionModal").modal('show');

	})

	async function loadRoleOptions() {
		try {
			const response = await fetch('@baseUrl/RoleAPI/GetAllRoles', {
				method: 'GET',
				headers: {
					'Accept': 'application/json'
				}
			});

			const data = await response.json();

			if (data.isSuccess) {

				console.log("role loaded:", data.data);
				 var dropdowns = $('#ddlRole');
							dropdowns.empty();
							dropdowns.append(
								$('<option>', {
								value: '0',
								text: 'Select',
								selected: true,
								disabled: true
								})
							);

							$.each(data.data, function(index, role) {
									dropdowns.append($('<option >', {
									value: role.id,
									text: role.name
								}));
							});
			}
			
		} catch (error) {
			console.error('Fetch error:', error);
		}
	}


	$(document).ready(async function() {
		LoadRolePermissionTable();
		await loadRoleOptions();

		
		$('#btnAddRolePermission').click(function () {
			$('#btnAddRolePermission').prop("disabled", true);
			var roleId=$('#ddlRole').val();
			if(roleId=='0'||!roleId){
				$('#spnddlRole').show();
				$('#btnAddRolePermission').prop("disabled", false);
				return ;
			}
			else{
				$('#spnddlRole').hide();
			}
			const rolePermissionMaster = {
				RoleId:roleId,
				PermissionIds:GetSelectedPermissionIds(),
				CompanyId:CompanyId,
				CreatedBy: null,
				UpdatedBy:  null
			};
			console.log("rolePermissionMaster",rolePermissionMaster);
			
			$.ajax({
				url: '@baseUrl/RolePermissionAPI/CreateRolePermission',
				method: 'POST',
				contentType: 'application/json',
				data: JSON.stringify(rolePermissionMaster),
				success: function (response) {
					if (response.isSuccess) {
						round_success_noti(response.responseMessage);
						LoadRolePermissionTable();
						$('#addRolePermissionModal').modal('hide');
					} else {
						round_error_noti(response.responseMessage);
					}
					$('#btnAddRolePermission').prop("disabled", false);
				},
				error: function (error) {
					console.error('Error saving Permission Master:', error);
					round_error_noti('An error occurred while saving the Permission Role.');
					$('#btnAddRolePermission').prop("disabled", false);
				}
			});
		});


	 });

	function LoadRolePermissionTable() {
		$.ajax({
			type: "GET",
			url: '@baseUrl/RolePermissionAPI/GetAllRolesWithPermissionByCompanyId/'+CompanyId,
			success: function (data) {
				if (data.isSuccess) {
					$("#spnNoRecord").hide();
					$("#tagRolePermissionGrid").show();

					$("#gridContainerRolePermission").dxDataGrid({
						dataSource: data.data,
						rowHeight: 40,
						width: '100%',
						columns: [
							{ dataField: 'roleName', caption: 'Role Name', width: 200 },
						{ dataField: 'slug', caption: 'Slug', width: 200 },
						{ dataField: 'description', caption: 'Description', width: 300 },
						{ dataField: 'permissions', caption: 'Permissions', width: 400 },

							{
									dataField: '',
									caption: '',
									alignment: 'center',
									width: '50px',
									type: 'buttons',
									fixed: true,
									fixedPosition: 'right',
									cellTemplate: function(container, options) {
										var buttonElement = $('<div class="d-flex order-actions">' +
											'<a href="javascript:;" class="edit-action" title="Edit Employee">' +
											'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-eyedropper" viewBox="0 0 16 16">' +
											'<path d="M13.354.646a1.207 1.207 0 0 0-1.708 0L8.5 3.793l-.646-.647a.5.5 0 1 0-.708.708L8.293 5l-7.147 7.146A.5.5 0 0 0 1 12.5v1.793l-.854.853a.5.5 0 1 0 .708.707L1.707 15H3.5a.5.5 0 0 0 .354-.146L11 7.707l1.146 1.147a.5.5 0 0 0 .708-.708l-.647-.646 3.147-3.146a1.207 1.207 0 0 0 0-1.708zM2 12.707l7-7L10.293 7l-7 7H2z"/>' +
											'</svg>' +
											'</a>' +
											'</div>')
											.on('dxclick', function() {
												editRolePermission(options.data);
											}).appendTo(container);
									}
								},
								{
									dataField: '',
									caption: '',
									alignment: 'center',
									width: '50px',
									type: 'buttons',
									fixed: true,
									fixedPosition: 'right',
									cellTemplate: function(container, options) {
										var buttonElement = $('<div class="d-flex order-actions">' +
											'<a href="javascript:;" class="delete-action" title="Delete Employee">' +
											'<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-trash-fill" viewBox="0 0 16 16">' +
											'<path d="M2.5 1a1 1 0 0 0-1 1v1a1 1 0 0 0 1 1H3v9a2 2 0 0 0 2 2h6a2 2 0 0 0 2-2V4h.5a1 1 0 0 0 1-1V2a1 1 0 0 0-1-1H10a1 1 0 0 0-1-1H7a1 1 0 0 0-1 1zm3 4a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 .5-.5M8 5a.5.5 0 0 1 .5.5v7a.5.5 0 0 1-1 0v-7A.5.5 0 0 1 8 5m3 .5v7a.5.5 0 0 1-1 0v-7a.5.5 0 0 1 1 0"/>' +
											'</svg>' +
											'</a>' +
											'</div>')
											.on('dxclick', function() {
												deleteRolePermission(options.data);
											}).appendTo(container);
									}
								}

						],
						columnsAutoWidth: false,
						wordWrapEnabled: false,
						showBorders: true,
						rowAlternationEnabled: false,
						grouping: { autoExpandAll: true },
						paging: { pageSize: 10 },
						pager: {
							showPageSizeSelector: true,
							allowedPageSizes: [10, 25, 50, 100]
						},
						headerFilter: { visible: true },
						filterRow: { visible: true, applyFilter: "auto" },
						allowColumnResizing: true,
						groupPanel: { visible: true },
						searchPanel: { visible: true, width: 240, placeholder: "Search..." },
						columnFixing: { enabled: true },
						scrolling: {
							mode: "standard",
							useNative: false,
							scrollByContent: true,
							scrollByThumb: true
						},
						onContentReady: function (e) {
							$('#rowCountRolePermission').html('Total Records: ' + e.component.totalCount());
						}
					});
				} else {
					$("#spnNoRecord").show();
					$("#tagRolePermissionGrid").hide();

				}
			},
			error: function (xhr, status, error) {
				console.error("AJAX Error:", status, error);
			}
		});
	}

	async function editRolePermission(permission) {
	
		resetPermissionFormFields(); // Clear any previous values
			var rolePermissionMaster = {
						CompanyId: CompanyId,
						RoleId: permission.roleId
			};
		try {
				const response = await fetch('@baseUrl/RolePermissionAPI/GetAllPermissionByRoleId', {
					method: 'POST',
					body: JSON.stringify(rolePermissionMaster), // use 'body' not 'data'
					headers: {
						'Accept': 'application/json',
						'Content-Type': 'application/json' // Important for JSON payloads
					}
				});


			const data = await response.json();

			if (data.isSuccess) {
				console.log("Role permission loaded:", data.data);
				var arrayDta=data.data;

				const selectedPermissionIds = arrayDta.map(p => p.permissionId);

			       await bindPermission(permissionData, selectedPermissionIds);
			} else {
				console.warn("API responded but without success:", data.message || 'Unknown issue');
			}
		} catch (error) {
			console.error('Fetch error:', error);
		}


		// Update UI
		$(".formType").text("Update");
		$("#btnAddRolePermission").text("Update");

		
		// Populate form fields
		$('#ddlRole').val(permission.roleId);
		

		// Show the modal
		$('#addRolePermissionModal').modal('show');
	}



	function resetPermissionFormFields() {
		$('#btnAddRolePermission').prop("disabled", false);

		// Reset the form inputs
		RoleId = 0;
		$('#ddlRole').val('0');
		
		$('#spnddlRole').hide();
		
		// Reset UI labels
		$(".formType").text("Add");
		$("#btnAddRolePermission").text("Save");
	}

	  function  deleteRolePermission(data)
	  {
		if (!confirm("Are you sure you want to delete this permission?")) {
				return; // Cancel the delete operation
		}

			var deleteObj = {
				   RoleId:data.roleId,
				   CompanyId:CompanyId,
				deletedBy: null
			};
			$.ajax({
			url: '@baseUrl/RolePermissionAPI/DeleteRolePermission',
				type: 'DELETE',
				contentType: 'application/json',
				data: JSON.stringify(deleteObj),
				success: function (response) {
					if (response.isSuccess) {
						round_success_noti(response.responseMessage);
					   LoadRolePermissionTable();
					} else {
						round_error_noti(response.responseMessage);
					}

				},
				error: function (error) {
					console.log('Error deleting permission!');
				}
			});
	  }
</script>